

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun May 21 20:54:09 2023

Microchip MPLAB XC8 C Compiler v2.41 (Pro license) build 20230208172133 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	text65,global,reloc=2,class=CODE,delta=1
    79                           	psect	text66,global,reloc=2,class=CODE,delta=1
    80                           	psect	text67,global,reloc=2,class=CODE,delta=1
    81                           	psect	text68,global,reloc=2,class=CODE,delta=1
    82                           	psect	text69,global,reloc=2,class=CODE,delta=1
    83                           	psect	text70,global,reloc=2,class=CODE,delta=1
    84                           	psect	text71,global,reloc=2,class=CODE,delta=1
    85                           	psect	text72,global,reloc=2,class=CODE,delta=1
    86                           	psect	text73,global,reloc=2,class=CODE,delta=1
    87                           	psect	text74,global,reloc=2,class=CODE,delta=1
    88                           	psect	text75,global,reloc=2,class=CODE,delta=1
    89                           	psect	text76,global,reloc=2,class=CODE,delta=1
    90                           	psect	text77,global,reloc=2,class=CODE,delta=1
    91                           	psect	text78,global,reloc=2,class=CODE,delta=1
    92                           	psect	text79,global,reloc=2,class=CODE,delta=1
    93                           	psect	text80,global,reloc=2,class=CODE,delta=1
    94                           	psect	text81,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    96                           	psect	text83,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    99                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   100                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   101                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   102                           	psect	pa_nodes0,global,class=CODE,delta=1
   103   000000                     
   104                           ; Generated 09/02/2023 GMT
   105                           ; 
   106                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution. Publication is not required when
   120                           ;        this file is used in an embedded application.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4321 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138   000000                     
   139                           	psect	idataBANK0
   140   0014DC                     __pidataBANK0:
   141                           	callstack 0
   142                           
   143                           ;initializer for _KPAD_VALUES
   144   0014DC  FD                 	db	low STR_1
   145   0014DD  1F                 	db	high STR_1
   146   0014DE  D8                 	db	low STR_2
   147   0014DF  1F                 	db	high STR_2
   148   0014E0  DD                 	db	low STR_3
   149   0014E1  1F                 	db	high STR_3
   150   0014E2  E2                 	db	low STR_4
   151   0014E3  1F                 	db	high STR_4
   152   0014E4  E7                 	db	low STR_5
   153   0014E5  1F                 	db	high STR_5
   154   0014E6  EC                 	db	low STR_6
   155   0014E7  1F                 	db	high STR_6
   156   0014E8  CC                 	db	low STR_7
   157   0014E9  1F                 	db	high STR_7
   158   0014EA  F1                 	db	low STR_8
   159   0014EB  1F                 	db	high STR_8
   160   0014EC  D2                 	db	low STR_9
   161   0014ED  1F                 	db	high STR_9
   162   0014EE  FB                 	db	low STR_10
   163   0014EF  1F                 	db	high STR_10
   164   0014F0  F6                 	db	low STR_11
   165   0014F1  1F                 	db	high STR_11
   166   0014F2  F9                 	db	low STR_12
   167   0014F3  1F                 	db	high STR_12
   168                           
   169                           	psect	mediumconst
   170   001ED0                     __pmediumconst:
   171                           	callstack 0
   172   001ED0  00                 	db	0
   173   001ED1                     _KPAD_NOTES:
   174                           	callstack 0
   175   001ED1  04                 	db	4
   176   001ED2  08                 	db	8
   177   001ED3  0C                 	db	12
   178   001ED4  10                 	db	16
   179   001ED5  14                 	db	20
   180   001ED6  34                 	db	52
   181   001ED7  38                 	db	56
   182   001ED8  3C                 	db	60
   183   001ED9  40                 	db	64
   184   001EDA  14                 	db	20
   185   001EDB  1A                 	db	26
   186   001EDC  0E                 	db	14
   187   001EDD                     __end_of_KPAD_NOTES:
   188                           	callstack 0
   189   001EDD                     _KPAD_NO_SMS:
   190                           	callstack 0
   191   001EDD  00                 	db	0
   192   001EDE  03                 	db	3
   193   001EDF  03                 	db	3
   194   001EE0  03                 	db	3
   195   001EE1  03                 	db	3
   196   001EE2  03                 	db	3
   197   001EE3  04                 	db	4
   198   001EE4  03                 	db	3
   199   001EE5  04                 	db	4
   200   001EE6  00                 	db	0
   201   001EE7  00                 	db	0
   202   001EE8  00                 	db	0
   203   001EE9                     __end_of_KPAD_NO_SMS:
   204                           	callstack 0
   205   001EE9                     _KPAD_PRESSES:
   206                           	callstack 0
   207   001EE9  01                 	db	1
   208   001EEA  04                 	db	4
   209   001EEB  04                 	db	4
   210   001EEC  04                 	db	4
   211   001EED  04                 	db	4
   212   001EEE  04                 	db	4
   213   001EEF  05                 	db	5
   214   001EF0  04                 	db	4
   215   001EF1  05                 	db	5
   216   001EF2  01                 	db	1
   217   001EF3  02                 	db	2
   218   001EF4  01                 	db	1
   219   001EF5                     __end_of_KPAD_PRESSES:
   220                           	callstack 0
   221   001EF5                     _KPAD_INT_VALUES:
   222                           	callstack 0
   223   001EF5  00                 	db	0
   224   001EF6  01                 	db	1
   225   001EF7  02                 	db	2
   226   001EF8  03                 	db	3
   227   001EF9  04                 	db	4
   228   001EFA  05                 	db	5
   229   001EFB  06                 	db	6
   230   001EFC  07                 	db	7
   231   001EFD  08                 	db	8
   232   001EFE  09                 	db	9
   233   001EFF  0A                 	db	10
   234   001F00  0B                 	db	11
   235   001F01                     __end_of_KPAD_INT_VALUES:
   236                           	callstack 0
   237   001F01                     _MELODY:
   238                           	callstack 0
   239   001F01  04                 	db	4
   240   001F02  0C                 	db	12
   241   001F03  3C                 	db	60
   242   001F04  08                 	db	8
   243   001F05  04                 	db	4
   244   001F06  3C                 	db	60
   245   001F07  14                 	db	20
   246   001F08  3C                 	db	60
   247   001F09  40                 	db	64
   248   001F0A  14                 	db	20
   249   001F0B  14                 	db	20
   250   001F0C  0E                 	db	14
   251   001F0D                     __end_of_MELODY:
   252                           	callstack 0
   253   000000                     _EECON2	set	4007
   254   000000                     _EEDATA	set	4008
   255   000000                     _TXREG	set	4013
   256   000000                     _RCREG	set	4014
   257   000000                     _SPBRG	set	4015
   258   000000                     _TMR0	set	4054
   259   000000                     _PORTC	set	3970
   260   000000                     _TMR0IF	set	32658
   261   000000                     _PORTB	set	3969
   262   000000                     _PORTCbits	set	3970
   263   000000                     _TRISBbits	set	3987
   264   000000                     _TRISCbits	set	3988
   265   000000                     _ADCON2	set	4032
   266   000000                     _ADCON1	set	4033
   267   000000                     _INTCONbits	set	4082
   268   000000                     _ADRESH	set	4036
   269   000000                     _ADCON0bits	set	4034
   270   000000                     _RCONbits	set	4048
   271   000000                     _T0CON	set	4053
   272   000000                     _TMR0L	set	4054
   273   000000                     _PIR1bits	set	3998
   274   000000                     _RCSTA	set	4011
   275   000000                     _TXSTA	set	4012
   276   000000                     _BAUDCONbits	set	4024
   277   000000                     _TRISDbits	set	3989
   278   000000                     _LATBbits	set	3978
   279   000000                     _PORTDbits	set	3971
   280   000000                     _LATDbits	set	3980
   281   000000                     _TRISAbits	set	3986
   282   000000                     _SPBRGH	set	4016
   283   000000                     _EECON1bits	set	4006
   284   000000                     _EEADR	set	4009
   285   001F0D                     STR_16:
   286   001F0D  33                 	db	51	;'3'
   287   001F0E  2E                 	db	46
   288   001F0F  20                 	db	32
   289   001F10  4D                 	db	77	;'M'
   290   001F11  4F                 	db	79	;'O'
   291   001F12  44                 	db	68	;'D'
   292   001F13  49                 	db	73	;'I'
   293   001F14  46                 	db	70	;'F'
   294   001F15  59                 	db	89	;'Y'
   295   001F16  20                 	db	32
   296   001F17  43                 	db	67	;'C'
   297   001F18  55                 	db	85	;'U'
   298   001F19  52                 	db	82	;'R'
   299   001F1A  52                 	db	82	;'R'
   300   001F1B  45                 	db	69	;'E'
   301   001F1C  4E                 	db	78	;'N'
   302   001F1D  54                 	db	84	;'T'
   303   001F1E  20                 	db	32
   304   001F1F  54                 	db	84	;'T'
   305   001F20  49                 	db	73	;'I'
   306   001F21  4D                 	db	77	;'M'
   307   001F22  45                 	db	69	;'E'
   308   001F23  00                 	db	0
   309   001F24                     STR_17:
   310   001F24  34                 	db	52	;'4'
   311   001F25  2E                 	db	46
   312   001F26  20                 	db	32
   313   001F27  53                 	db	83	;'S'
   314   001F28  48                 	db	72	;'H'
   315   001F29  4F                 	db	79	;'O'
   316   001F2A  57                 	db	87	;'W'
   317   001F2B  20                 	db	32
   318   001F2C  43                 	db	67	;'C'
   319   001F2D  55                 	db	85	;'U'
   320   001F2E  52                 	db	82	;'R'
   321   001F2F  52                 	db	82	;'R'
   322   001F30  45                 	db	69	;'E'
   323   001F31  4E                 	db	78	;'N'
   324   001F32  54                 	db	84	;'T'
   325   001F33  20                 	db	32
   326   001F34  54                 	db	84	;'T'
   327   001F35  49                 	db	73	;'I'
   328   001F36  4D                 	db	77	;'M'
   329   001F37  45                 	db	69	;'E'
   330   001F38  00                 	db	0
   331   001F39                     STR_18:
   332   001F39  35                 	db	53	;'5'
   333   001F3A  2E                 	db	46
   334   001F3B  20                 	db	32
   335   001F3C  45                 	db	69	;'E'
   336   001F3D  4E                 	db	78	;'N'
   337   001F3E  44                 	db	68	;'D'
   338   001F3F  20                 	db	32
   339   001F40  43                 	db	67	;'C'
   340   001F41  4F                 	db	79	;'O'
   341   001F42  4D                 	db	77	;'M'
   342   001F43  4D                 	db	77	;'M'
   343   001F44  55                 	db	85	;'U'
   344   001F45  4E                 	db	78	;'N'
   345   001F46  49                 	db	73	;'I'
   346   001F47  43                 	db	67	;'C'
   347   001F48  41                 	db	65	;'A'
   348   001F49  54                 	db	84	;'T'
   349   001F4A  49                 	db	73	;'I'
   350   001F4B  4F                 	db	79	;'O'
   351   001F4C  4E                 	db	78	;'N'
   352   001F4D  00                 	db	0
   353   001F4E                     STR_14:
   354   001F4E  31                 	db	49	;'1'
   355   001F4F  2E                 	db	46
   356   001F50  20                 	db	32
   357   001F51  53                 	db	83	;'S'
   358   001F52  54                 	db	84	;'T'
   359   001F53  41                 	db	65	;'A'
   360   001F54  52                 	db	82	;'R'
   361   001F55  54                 	db	84	;'T'
   362   001F56  20                 	db	32
   363   001F57  52                 	db	82	;'R'
   364   001F58  45                 	db	69	;'E'
   365   001F59  43                 	db	67	;'C'
   366   001F5A  4F                 	db	79	;'O'
   367   001F5B  52                 	db	82	;'R'
   368   001F5C  44                 	db	68	;'D'
   369   001F5D  49                 	db	73	;'I'
   370   001F5E  4E                 	db	78	;'N'
   371   001F5F  47                 	db	71	;'G'
   372   001F60  00                 	db	0
   373   001F61                     STR_15:
   374   001F61  32                 	db	50	;'2'
   375   001F62  2E                 	db	46
   376   001F63  20                 	db	32
   377   001F64  50                 	db	80	;'P'
   378   001F65  4C                 	db	76	;'L'
   379   001F66  41                 	db	65	;'A'
   380   001F67  59                 	db	89	;'Y'
   381   001F68  20                 	db	32
   382   001F69  52                 	db	82	;'R'
   383   001F6A  45                 	db	69	;'E'
   384   001F6B  43                 	db	67	;'C'
   385   001F6C  4F                 	db	79	;'O'
   386   001F6D  52                 	db	82	;'R'
   387   001F6E  44                 	db	68	;'D'
   388   001F6F  49                 	db	73	;'I'
   389   001F70  4E                 	db	78	;'N'
   390   001F71  47                 	db	71	;'G'
   391   001F72  53                 	db	83	;'S'
   392   001F73  00                 	db	0
   393   001F74                     STR_24:
   394   001F74  4E                 	db	78	;'N'
   395   001F75  4F                 	db	79	;'O'
   396   001F76  20                 	db	32
   397   001F77  52                 	db	82	;'R'
   398   001F78  45                 	db	69	;'E'
   399   001F79  43                 	db	67	;'C'
   400   001F7A  4F                 	db	79	;'O'
   401   001F7B  52                 	db	82	;'R'
   402   001F7C  44                 	db	68	;'D'
   403   001F7D  49                 	db	73	;'I'
   404   001F7E  4E                 	db	78	;'N'
   405   001F7F  47                 	db	71	;'G'
   406   001F80  53                 	db	83	;'S'
   407   001F81  2E                 	db	46
   408   001F82  2E                 	db	46
   409   001F83  2E                 	db	46
   410   001F84  00                 	db	0
   411   001F85                     STR_22:
   412   001F85  43                 	db	67	;'C'
   413   001F86  55                 	db	85	;'U'
   414   001F87  52                 	db	82	;'R'
   415   001F88  52                 	db	82	;'R'
   416   001F89  45                 	db	69	;'E'
   417   001F8A  4E                 	db	78	;'N'
   418   001F8B  54                 	db	84	;'T'
   419   001F8C  20                 	db	32
   420   001F8D  54                 	db	84	;'T'
   421   001F8E  49                 	db	73	;'I'
   422   001F8F  4D                 	db	77	;'M'
   423   001F90  45                 	db	69	;'E'
   424   001F91  3A                 	db	58	;':'
   425   001F92  00                 	db	0
   426   001F93                     STR_23:
   427   001F93  52                 	db	82	;'R'
   428   001F94  45                 	db	69	;'E'
   429   001F95  43                 	db	67	;'C'
   430   001F96  4F                 	db	79	;'O'
   431   001F97  52                 	db	82	;'R'
   432   001F98  44                 	db	68	;'D'
   433   001F99  49                 	db	73	;'I'
   434   001F9A  4E                 	db	78	;'N'
   435   001F9B  47                 	db	71	;'G'
   436   001F9C  2E                 	db	46
   437   001F9D  2E                 	db	46
   438   001F9E  2E                 	db	46
   439   001F9F  00                 	db	0
   440   001FA0                     STR_21:
   441   001FA0  4D                 	db	77	;'M'
   442   001FA1  4F                 	db	79	;'O'
   443   001FA2  44                 	db	68	;'D'
   444   001FA3  49                 	db	73	;'I'
   445   001FA4  46                 	db	70	;'F'
   446   001FA5  59                 	db	89	;'Y'
   447   001FA6  20                 	db	32
   448   001FA7  54                 	db	84	;'T'
   449   001FA8  49                 	db	73	;'I'
   450   001FA9  4D                 	db	77	;'M'
   451   001FAA  45                 	db	69	;'E'
   452   001FAB  3A                 	db	58	;':'
   453   001FAC  00                 	db	0
   454   001FAD                     STR_25:
   455   001FAD  50                 	db	80	;'P'
   456   001FAE  4C                 	db	76	;'L'
   457   001FAF  41                 	db	65	;'A'
   458   001FB0  59                 	db	89	;'Y'
   459   001FB1  49                 	db	73	;'I'
   460   001FB2  4E                 	db	78	;'N'
   461   001FB3  47                 	db	71	;'G'
   462   001FB4  2E                 	db	46
   463   001FB5  2E                 	db	46
   464   001FB6  2E                 	db	46
   465   001FB7  00                 	db	0
   466   001FB8                     STR_13:
   467   001FB8  50                 	db	80	;'P'
   468   001FB9  4F                 	db	79	;'O'
   469   001FBA  52                 	db	82	;'R'
   470   001FBB  54                 	db	84	;'T'
   471   001FBC  20                 	db	32
   472   001FBD  4E                 	db	78	;'N'
   473   001FBE  41                 	db	65	;'A'
   474   001FBF  4D                 	db	77	;'M'
   475   001FC0  45                 	db	69	;'E'
   476   001FC1  3A                 	db	58	;':'
   477   001FC2  00                 	db	0
   478   001FC3                     STR_20:
   479   001FC3  62                 	db	98	;'b'
   480   001FC4  79                 	db	121	;'y'
   481   001FC5  65                 	db	101	;'e'
   482   001FC6  20                 	db	32
   483   001FC7  62                 	db	98	;'b'
   484   001FC8  79                 	db	121	;'y'
   485   001FC9  65                 	db	101	;'e'
   486   001FCA  20                 	db	32
   487   001FCB  00                 	db	0
   488   001FCC                     STR_7:
   489   001FCC  50                 	db	80	;'P'
   490   001FCD  51                 	db	81	;'Q'
   491   001FCE  52                 	db	82	;'R'
   492   001FCF  53                 	db	83	;'S'
   493   001FD0  37                 	db	55	;'7'
   494   001FD1  00                 	db	0
   495   001FD2                     STR_9:
   496   001FD2  57                 	db	87	;'W'
   497   001FD3  58                 	db	88	;'X'
   498   001FD4  59                 	db	89	;'Y'
   499   001FD5  5A                 	db	90	;'Z'
   500   001FD6  39                 	db	57	;'9'
   501   001FD7  00                 	db	0
   502   001FD8                     STR_2:
   503   001FD8  41                 	db	65	;'A'
   504   001FD9  42                 	db	66	;'B'
   505   001FDA  43                 	db	67	;'C'
   506   001FDB  32                 	db	50	;'2'
   507   001FDC  00                 	db	0
   508   001FDD                     STR_3:
   509   001FDD  44                 	db	68	;'D'
   510   001FDE  45                 	db	69	;'E'
   511   001FDF  46                 	db	70	;'F'
   512   001FE0  33                 	db	51	;'3'
   513   001FE1  00                 	db	0
   514   001FE2                     STR_4:
   515   001FE2  47                 	db	71	;'G'
   516   001FE3  48                 	db	72	;'H'
   517   001FE4  49                 	db	73	;'I'
   518   001FE5  34                 	db	52	;'4'
   519   001FE6  00                 	db	0
   520   001FE7                     STR_5:
   521   001FE7  4A                 	db	74	;'J'
   522   001FE8  4B                 	db	75	;'K'
   523   001FE9  4C                 	db	76	;'L'
   524   001FEA  35                 	db	53	;'5'
   525   001FEB  00                 	db	0
   526   001FEC                     STR_6:
   527   001FEC  4D                 	db	77	;'M'
   528   001FED  4E                 	db	78	;'N'
   529   001FEE  4F                 	db	79	;'O'
   530   001FEF  36                 	db	54	;'6'
   531   001FF0  00                 	db	0
   532   001FF1                     STR_8:
   533   001FF1  54                 	db	84	;'T'
   534   001FF2  55                 	db	85	;'U'
   535   001FF3  56                 	db	86	;'V'
   536   001FF4  38                 	db	56	;'8'
   537   001FF5  00                 	db	0
   538   001FF6                     STR_11:
   539   001FF6  30                 	db	48	;'0'
   540   001FF7  20                 	db	32
   541   001FF8  00                 	db	0
   542   001FF9                     STR_12:
   543   001FF9  23                 	db	35
   544   001FFA  00                 	db	0
   545   001FFB                     STR_10:
   546   001FFB  2A                 	db	42
   547   001FFC  00                 	db	0
   548   001FFD                     STR_1:
   549   001FFD  31                 	db	49	;'1'
   550   001FFE  00                 	db	0
   551   001FFF  00                 	db	0	; dummy byte at the end
   552   000000                     
   553                           ; #config settings
   554                           
   555                           	psect	cinit
   556   00115C                     __pcinit:
   557                           	callstack 0
   558   00115C                     start_initialization:
   559                           	callstack 0
   560   00115C                     __initialization:
   561                           	callstack 0
   562                           
   563                           ; Initialize objects allocated to BANK0 (24 bytes)
   564                           ; load TBLPTR registers with __pidataBANK0
   565   00115C  0EDC               	movlw	low __pidataBANK0
   566   00115E  6EF6               	movwf	tblptrl,c
   567   001160  0E14               	movlw	high __pidataBANK0
   568   001162  6EF7               	movwf	tblptrh,c
   569   001164  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   570   001166  6EF8               	movwf	tblptru,c
   571   001168  EE00  F0C8         	lfsr	0,__pdataBANK0
   572   00116C  EE10 F018          	lfsr	1,24
   573   001170                     copy_data0:
   574   001170  0009               	tblrd		*+
   575   001172  CFF5 FFEE          	movff	tablat,postinc0
   576   001176  50E5               	movf	postdec1,w,c
   577   001178  50E1               	movf	fsr1l,w,c
   578   00117A  E1FA               	bnz	copy_data0
   579                           
   580                           ; Clear objects allocated to BANK1 (80 bytes)
   581   00117C  EE01  F000         	lfsr	0,__pbssBANK1
   582   001180  0E50               	movlw	80
   583   001182                     clear_0:
   584   001182  6AEE               	clrf	postinc0,c
   585   001184  06E8               	decf	wreg,f,c
   586   001186  E1FD               	bnz	clear_0
   587                           
   588                           ; Clear objects allocated to BANK0 (72 bytes)
   589   001188  EE00  F080         	lfsr	0,__pbssBANK0
   590   00118C  0E48               	movlw	72
   591   00118E                     clear_1:
   592   00118E  6AEE               	clrf	postinc0,c
   593   001190  06E8               	decf	wreg,f,c
   594   001192  E1FD               	bnz	clear_1
   595                           
   596                           ; Clear objects allocated to COMRAM (91 bytes)
   597   001194  EE00  F001         	lfsr	0,__pbssCOMRAM
   598   001198  0E5B               	movlw	91
   599   00119A                     clear_2:
   600   00119A  6AEE               	clrf	postinc0,c
   601   00119C  06E8               	decf	wreg,f,c
   602   00119E  E1FD               	bnz	clear_2
   603   0011A0                     end_of_initialization:
   604                           	callstack 0
   605   0011A0                     __end_of__initialization:
   606                           	callstack 0
   607   0011A0  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   608   0011A2  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   609   0011A4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   610   0011A6  6EF8               	movwf	tblptru,c
   611   0011A8  0100               	movlb	0
   612   0011AA  EFD1  F006         	goto	_main	;jump to C main() function
   613                           
   614                           	psect	bssCOMRAM
   615   000001                     __pbssCOMRAM:
   616                           	callstack 0
   617   000001                     _timeAux:
   618                           	callstack 0
   619   000001                     	ds	4
   620   000005                     _Tics:
   621                           	callstack 0
   622   000005                     	ds	4
   623   000009                     _sentSamples:
   624                           	callstack 0
   625   000009                     	ds	2
   626   00000B                     _strL2:
   627                           	callstack 0
   628   00000B                     	ds	2
   629   00000D                     _strL1:
   630                           	callstack 0
   631   00000D                     	ds	2
   632   00000F                     _melodyPause:
   633                           	callstack 0
   634   00000F                     	ds	2
   635   000011                     _str:
   636                           	callstack 0
   637   000011                     	ds	2
   638   000013                     _indexSent:
   639                           	callstack 0
   640   000013                     	ds	1
   641   000014                     _option@TAD_MENURECORDINGS$F1580:
   642                           	callstack 0
   643   000014                     	ds	1
   644   000015                     _state@TAD_MENURECORDINGS$F1579:
   645                           	callstack 0
   646   000015                     	ds	1
   647   000016                     _recordingField:
   648                           	callstack 0
   649   000016                     	ds	1
   650   000017                     _index@TAD_SAVERECORDINGS$F1535:
   651                           	callstack 0
   652   000017                     	ds	1
   653   000018                     _state@TAD_SAVERECORDINGS$F1534:
   654                           	callstack 0
   655   000018                     	ds	1
   656   000019                     _indexAux:
   657                           	callstack 0
   658   000019                     	ds	1
   659   00001A                     _state@TAD_MICRO$F1460:
   660                           	callstack 0
   661   00001A                     	ds	1
   662   00001B                     _state@TAD_COUNTER$F1357:
   663                           	callstack 0
   664   00001B                     	ds	1
   665   00001C                     _showTime:
   666                           	callstack 0
   667   00001C                     	ds	1
   668   00001D                     _modifyTime:
   669                           	callstack 0
   670   00001D                     	ds	1
   671   00001E                     _timeAuxIndex:
   672                           	callstack 0
   673   00001E                     	ds	1
   674   00001F                     _printNext:
   675                           	callstack 0
   676   00001F                     	ds	1
   677   000020                     _option:
   678                           	callstack 0
   679   000020                     	ds	1
   680   000021                     _state@TAD_MENU$F1311:
   681                           	callstack 0
   682   000021                     	ds	1
   683   000022                     _biggerSize:
   684                           	callstack 0
   685   000022                     	ds	1
   686   000023                     _sizeL2:
   687                           	callstack 0
   688   000023                     	ds	1
   689   000024                     _sizeL1:
   690                           	callstack 0
   691   000024                     	ds	1
   692   000025                     _indexL2:
   693                           	callstack 0
   694   000025                     	ds	1
   695   000026                     _indexL1:
   696                           	callstack 0
   697   000026                     	ds	1
   698   000027                     _state@TAD_MARQUESINA$F1253:
   699                           	callstack 0
   700   000027                     	ds	1
   701   000028                     _melodyIndex:
   702                           	callstack 0
   703   000028                     	ds	1
   704   000029                     _playingMelody:
   705                           	callstack 0
   706   000029                     	ds	1
   707   00002A                     _dutyCycle:
   708                           	callstack 0
   709   00002A                     	ds	1
   710   00002B                     _period:
   711                           	callstack 0
   712   00002B                     	ds	1
   713   00002C                     _state@TAD_BUZZER$F1215:
   714                           	callstack 0
   715   00002C                     	ds	1
   716   00002D                     _state@TAD_JOYSTICK$F1125:
   717                           	callstack 0
   718   00002D                     	ds	1
   719   00002E                     _ready@TAD_JOYSTICK$F1124:
   720                           	callstack 0
   721   00002E                     	ds	1
   722   00002F                     _lastMove:
   723                           	callstack 0
   724   00002F                     	ds	1
   725   000030                     _enabled:
   726                           	callstack 0
   727   000030                     	ds	1
   728   000031                     _numChars:
   729                           	callstack 0
   730   000031                     	ds	1
   731   000032                     _state@TAD_PORT$F865:
   732                           	callstack 0
   733   000032                     	ds	1
   734   000033                     _state@TAD_LCD$F764:
   735                           	callstack 0
   736   000033                     	ds	1
   737   000034                     _index:
   738                           	callstack 0
   739   000034                     	ds	1
   740   000035                     _ColumnAct:
   741                           	callstack 0
   742   000035                     	ds	1
   743   000036                     _RowAct:
   744                           	callstack 0
   745   000036                     	ds	1
   746   000037                     _Columns:
   747                           	callstack 0
   748   000037                     	ds	1
   749   000038                     _Rows:
   750                           	callstack 0
   751   000038                     	ds	1
   752   000039                     _pressCount:
   753                           	callstack 0
   754   000039                     	ds	1
   755   00003A                     _smsPressed:
   756                           	callstack 0
   757   00003A                     	ds	1
   758   00003B                     _ready:
   759                           	callstack 0
   760   00003B                     	ds	1
   761   00003C                     _previousValue:
   762                           	callstack 0
   763   00003C                     	ds	1
   764   00003D                     _currentValue:
   765                           	callstack 0
   766   00003D                     	ds	1
   767   00003E                     _rowValues:
   768                           	callstack 0
   769   00003E                     	ds	1
   770   00003F                     _smsMode:
   771                           	callstack 0
   772   00003F                     	ds	1
   773   000040                     _state:
   774                           	callstack 0
   775   000040                     	ds	1
   776   000041                     _numRecordings:
   777                           	callstack 0
   778   000041                     	ds	1
   779   000042                     _strAux@TAD_COUNTER$F1352:
   780                           	callstack 0
   781   000042                     	ds	6
   782   000048                     _time:
   783                           	callstack 0
   784   000048                     	ds	4
   785   00004C                     _portName:
   786                           	callstack 0
   787   00004C                     	ds	4
   788   000050                     _newID:
   789                           	callstack 0
   790   000050                     	ds	2
   791   000052                     _txTimer:
   792                           	callstack 0
   793   000052                     	ds	1
   794   000053                     _timerHora:
   795                           	callstack 0
   796   000053                     	ds	1
   797   000054                     _timerByeBye:
   798                           	callstack 0
   799   000054                     	ds	1
   800   000055                     _timer:
   801                           	callstack 0
   802   000055                     	ds	1
   803   000056                     _timerMelody:
   804                           	callstack 0
   805   000056                     	ds	1
   806   000057                     _timerNote:
   807                           	callstack 0
   808   000057                     	ds	1
   809   000058                     _timerPWM:
   810                           	callstack 0
   811   000058                     	ds	1
   812   000059                     _Timer:
   813                           	callstack 0
   814   000059                     	ds	1
   815   00005A                     _timerRebots:
   816                           	callstack 0
   817   00005A                     	ds	1
   818   00005B                     _timerSms:
   819                           	callstack 0
   820   00005B                     	ds	1
   821                           
   822                           	psect	bssBANK0
   823   000080                     __pbssBANK0:
   824                           	callstack 0
   825   000080                     _recordings:
   826                           	callstack 0
   827   000080                     	ds	60
   828   0000BC                     _strAux:
   829                           	callstack 0
   830   0000BC                     	ds	12
   831                           
   832                           	psect	dataBANK0
   833   0000C8                     __pdataBANK0:
   834                           	callstack 0
   835   0000C8                     _KPAD_VALUES:
   836                           	callstack 0
   837   0000C8                     	ds	24
   838                           
   839                           	psect	bssBANK1
   840   000100                     __pbssBANK1:
   841                           	callstack 0
   842   000100                     _Timers:
   843                           	callstack 0
   844   000100                     	ds	80
   845                           
   846                           	psect	cstackCOMRAM
   847   00005C                     __pcstackCOMRAM:
   848                           	callstack 0
   849   00005C                     ??_JOY_Motor:
   850   00005C                     ??_SAVE_Motor:
   851   00005C                     ??_EscriuPrimeraOrdre:
   852   00005C                     ??_KPAD_GetChar:
   853   00005C                     ??_CantaPartAlta:
   854   00005C                     ??_CantaPartBaixa:
   855   00005C                     ??_MRCD_OptionUp:
   856   00005C                     ?_TI_GetTics:
   857                           	callstack 0
   858   00005C                     TI_Init@counter:
   859                           	callstack 0
   860   00005C                     TI_NewTimer@TimerHandle:
   861                           	callstack 0
   862   00005C                     TI_ResetTics@TimerHandle:
   863                           	callstack 0
   864   00005C                     TI_CloseTimer@TimerHandle:
   865                           	callstack 0
   866   00005C                     SIO_PutChar@Valor:
   867                           	callstack 0
   868   00005C                     JOY_GetMove@aux:
   869                           	callstack 0
   870   00005C                     CNT_GetTime@index:
   871                           	callstack 0
   872   00005C                     fillStrAux@opt:
   873                           	callstack 0
   874   00005C                     strlen@s:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x0
   878   00005C                     	ds	1
   879   00005D                     CantaPartAlta@c:
   880                           	callstack 0
   881   00005D                     CantaPartBaixa@c:
   882                           	callstack 0
   883   00005D                     EscriuPrimeraOrdre@ordre:
   884                           	callstack 0
   885   00005D                     BUZZ_Play@note:
   886                           	callstack 0
   887                           
   888                           ; 1 bytes @ 0x1
   889   00005D                     	ds	1
   890   00005E                     ??_strlen:
   891   00005E                     TI_NewTimer@Comptador:
   892                           	callstack 0
   893   00005E                     CantaIR@IR:
   894                           	callstack 0
   895   00005E                     CantaData@Data:
   896                           	callstack 0
   897   00005E                     SAVE_PutRecording@id:
   898                           	callstack 0
   899   00005E                     _KPAD_GetChar$576:
   900                           	callstack 0
   901   00005E                     LCD_PutString@s:
   902                           	callstack 0
   903                           
   904                           ; 2 bytes @ 0x2
   905   00005E                     	ds	1
   906   00005F                     SAVE_PutRecording@timestamp:
   907                           	callstack 0
   908                           
   909                           ; 1 bytes @ 0x3
   910   00005F                     	ds	1
   911   000060                     ??_TI_GetTics:
   912   000060                     KPAD_GetChar@aux:
   913                           	callstack 0
   914   000060                     strlen@i:
   915                           	callstack 0
   916                           
   917                           ; 1 bytes @ 0x4
   918   000060                     	ds	4
   919   000064                     TI_GetTics@CopiaTicsActual:
   920                           	callstack 0
   921                           
   922                           ; 4 bytes @ 0x8
   923   000064                     	ds	4
   924   000068                     TI_GetTics@TimerHandle:
   925                           	callstack 0
   926                           
   927                           ; 1 bytes @ 0xC
   928   000068                     	ds	1
   929   000069                     ??_MICRO_Motor:
   930   000069                     ??_BUZZ_Motor:
   931   000069                     TI_Wait40ms@Timer:
   932                           	callstack 0
   933   000069                     Espera@ms:
   934                           	callstack 0
   935   000069                     WaitForBusy@Busy:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0xD
   939   000069                     	ds	1
   940   00006A                     ??_Espera:
   941   00006A                     LCD_GotoXY@Row:
   942                           	callstack 0
   943                           
   944                           ; 1 bytes @ 0xE
   945   00006A                     	ds	1
   946   00006B                     ??_LCD_GotoXY:
   947                           
   948                           ; 1 bytes @ 0xF
   949   00006B                     	ds	2
   950   00006D                     _LCD_GotoXY$784:
   951                           	callstack 0
   952                           
   953                           ; 2 bytes @ 0x11
   954   00006D                     	ds	1
   955   00006E                     Espera@Timer:
   956                           	callstack 0
   957                           
   958                           ; 1 bytes @ 0x12
   959   00006E                     	ds	1
   960   00006F                     LCD_Init@columns:
   961                           	callstack 0
   962   00006F                     LCD_GotoXY@Fisics:
   963                           	callstack 0
   964   00006F                     MQ_PutString@s:
   965                           	callstack 0
   966                           
   967                           ; 2 bytes @ 0x13
   968   00006F                     	ds	1
   969   000070                     LCD_Init@rows:
   970                           	callstack 0
   971   000070                     LCD_GotoXY@Column:
   972                           	callstack 0
   973                           
   974                           ; 1 bytes @ 0x14
   975   000070                     	ds	1
   976   000071                     ??_MQ_Motor:
   977   000071                     ??_MRCD_Motor:
   978   000071                     LCD_PutChar@c:
   979                           	callstack 0
   980   000071                     LCD_PreviewChar@c:
   981                           	callstack 0
   982   000071                     MQ_PutString@line:
   983                           	callstack 0
   984   000071                     LCD_Init@i:
   985                           	callstack 0
   986                           
   987                           ; 2 bytes @ 0x15
   988   000071                     	ds	1
   989   000072                     ??_CNT_Motor:
   990   000072                     ??_LCD_Motor:
   991   000072                     ??_KPAD_Motor:
   992   000072                     ??_PORT_Motor:
   993   000072                     _MQ_PutString$1268:
   994                           	callstack 0
   995                           
   996                           ; 2 bytes @ 0x16
   997   000072                     	ds	2
   998   000074                     ??_MENU_Motor:
   999   000074                     KPAD_Motor@currRow:
  1000                           	callstack 0
  1001   000074                     PORT_Motor@aux:
  1002                           	callstack 0
  1003   000074                     CNT_Motor@aux:
  1004                           	callstack 0
  1005                           
  1006                           ; 1 bytes @ 0x18
  1007   000074                     	ds	1
  1008   000075                     KPAD_Motor@currCol:
  1009                           	callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x19
  1012   000075                     	ds	1
  1013   000076                     MENU_Motor@aux:
  1014                           	callstack 0
  1015   000076                     MRCD_Motor@aux:
  1016                           	callstack 0
  1017                           
  1018                           ; 1 bytes @ 0x1A
  1019   000076                     	ds	1
  1020   000077                     
  1021                           ; 1 bytes @ 0x1B
  1022 ;;
  1023 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1024 ;;
  1025 ;; *************** function _main *****************
  1026 ;; Defined at:
  1027 ;;		line 50 in file "main.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMRAM   BANK0   BANK1
  1041 ;;      Params:         0       0       0
  1042 ;;      Locals:         0       0       0
  1043 ;;      Temps:          0       0       0
  1044 ;;      Totals:         0       0       0
  1045 ;;Total ram usage:        0 bytes
  1046 ;; Hardware stack levels required when called: 7
  1047 ;; This function calls:
  1048 ;;		_BUZZ_Init
  1049 ;;		_BUZZ_Motor
  1050 ;;		_CNT_Init
  1051 ;;		_CNT_Motor
  1052 ;;		_JOY_Init
  1053 ;;		_JOY_Motor
  1054 ;;		_KPAD_Init
  1055 ;;		_KPAD_Motor
  1056 ;;		_LCD_Init
  1057 ;;		_LCD_Motor
  1058 ;;		_MENU_Init
  1059 ;;		_MENU_Motor
  1060 ;;		_MICRO_Init
  1061 ;;		_MICRO_Motor
  1062 ;;		_MQ_Init
  1063 ;;		_MQ_Motor
  1064 ;;		_MRCD_Init
  1065 ;;		_MRCD_Motor
  1066 ;;		_PORT_Init
  1067 ;;		_PORT_Mostrar
  1068 ;;		_PORT_Motor
  1069 ;;		_SAVE_Init
  1070 ;;		_SAVE_Motor
  1071 ;;		_SIO_Init
  1072 ;;		_TI_Init
  1073 ;;		_TI_Wait40ms
  1074 ;;		_configADC
  1075 ;;		_configInterrupts
  1076 ;; This function is called by:
  1077 ;;		Startup code after reset
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text0
  1082   000DA2                     __ptext0:
  1083                           	callstack 0
  1084   000DA2                     _main:
  1085                           	callstack 24
  1086                           
  1087                           ;main.c: 51:         JOY_Motor();
  1088                           
  1089                           ;incstack = 0
  1090   000DA2  EC49  F00B         	call	_configInterrupts	;wreg free
  1091                           
  1092                           ;main.c: 52:         MICRO_Motor();
  1093   000DA6  EC12  F00B         	call	_configADC	;wreg free
  1094                           
  1095                           ;main.c: 55:         SAVE_Motor();
  1096   000DAA  EC16  F00A         	call	_TI_Init	;wreg free
  1097                           
  1098                           ;main.c: 56:         MRCD_Motor();
  1099   000DAE  ECB4  F009         	call	_TI_Wait40ms	;wreg free
  1100                           
  1101                           ;main.c: 57:  }
  1102   000DB2  ECB2  F00A         	call	_CNT_Init	;wreg free
  1103                           
  1104                           ;main.c: 58: }
  1105   000DB6  EC92  F00A         	call	_SIO_Init	;wreg free
  1106   000DBA  EC4C  F00B         	call	_PORT_Init	;wreg free
  1107   000DBE  ECDC  F009         	call	_KPAD_Init	;wreg free
  1108   000DC2  EC2B  F00B         	call	_MENU_Init	;wreg free
  1109   000DC6  EC00  F00B         	call	_MQ_Init	;wreg free
  1110   000DCA  EC3D  F00B         	call	_JOY_Init	;wreg free
  1111   000DCE  EC06  F00B         	call	_MICRO_Init	;wreg free
  1112   000DD2  EC36  F00A         	call	_BUZZ_Init	;wreg free
  1113   000DD6  EC5E  F00B         	call	_MRCD_Init	;wreg free
  1114   000DDA  EC35  F00B         	call	_SAVE_Init	;wreg free
  1115   000DDE  0E10               	movlw	16
  1116   000DE0  6E6F               	movwf	LCD_Init@columns^0,c
  1117   000DE2  0E02               	movlw	2
  1118   000DE4  ECF4  F005         	call	_LCD_Init
  1119   000DE8  EC66  F00B         	call	_PORT_Mostrar	;wreg free
  1120   000DEC                     l4857:
  1121   000DEC  ECA9  F002         	call	_CNT_Motor	;wreg free
  1122   000DF0  EC83  F007         	call	_LCD_Motor	;wreg free
  1123   000DF4  ECFC  F000         	call	_KPAD_Motor	;wreg free
  1124   000DF8  EC14  F004         	call	_PORT_Motor	;wreg free
  1125   000DFC  EC0C  F000         	call	_MENU_Motor	;wreg free
  1126   000E00  EC25  F008         	call	_JOY_Motor	;wreg free
  1127   000E04  EC89  F005         	call	_MICRO_Motor	;wreg free
  1128   000E08  EC6A  F003         	call	_MQ_Motor	;wreg free
  1129   000E0C  EC18  F005         	call	_BUZZ_Motor	;wreg free
  1130   000E10  ECA2  F004         	call	_SAVE_Motor	;wreg free
  1131   000E14  ECDF  F001         	call	_MRCD_Motor	;wreg free
  1132   000E18  D7E9               	goto	l4857
  1133   000E1A                     __end_of_main:
  1134                           	callstack 0
  1135                           
  1136 ;; *************** function _configInterrupts *****************
  1137 ;; Defined at:
  1138 ;;		line 43 in file "main.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		None
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1
  1152 ;;      Params:         0       0       0
  1153 ;;      Locals:         0       0       0
  1154 ;;      Temps:          0       0       0
  1155 ;;      Totals:         0       0       0
  1156 ;;Total ram usage:        0 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; Hardware stack levels required when called: 2
  1159 ;; This function calls:
  1160 ;;		Nothing
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text1
  1167   001692                     __ptext1:
  1168                           	callstack 0
  1169   001692                     _configInterrupts:
  1170                           	callstack 28
  1171                           
  1172                           ;main.c: 45:  while(1){
  1173                           
  1174                           ;incstack = 0
  1175   001692  9ED0               	bcf	208,7,c	;volatile
  1176                           
  1177                           ;main.c: 46:         CNT_Motor();
  1178   001694  8EF2               	bsf	242,7,c	;volatile
  1179   001696  0012               	return		;funcret
  1180   001698                     __end_of_configInterrupts:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _configADC *****************
  1184 ;; Defined at:
  1185 ;;		line 38 in file "main.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1
  1199 ;;      Params:         0       0       0
  1200 ;;      Locals:         0       0       0
  1201 ;;      Temps:          0       0       0
  1202 ;;      Totals:         0       0       0
  1203 ;;Total ram usage:        0 bytes
  1204 ;; Hardware stack levels used: 1
  1205 ;; Hardware stack levels required when called: 2
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text2
  1214   001624                     __ptext2:
  1215                           	callstack 0
  1216   001624                     _configADC:
  1217                           	callstack 28
  1218                           
  1219                           ;main.c: 39:     LCD_Init(2, 16);
  1220                           
  1221                           ;incstack = 0
  1222   001624  0E0D               	movlw	13
  1223   001626  6EC1               	movwf	193,c	;volatile
  1224                           
  1225                           ;main.c: 40: 
  1226   001628  0E12               	movlw	18
  1227   00162A  6EC0               	movwf	192,c	;volatile
  1228   00162C  0C12               	retlw	18	;funcret
  1229   00162E                     __end_of_configADC:
  1230                           	callstack 0
  1231                           
  1232 ;; *************** function _TI_Wait40ms *****************
  1233 ;; Defined at:
  1234 ;;		line 66 in file "TAD_TIMER.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;  Timer           1   13[COMRAM] unsigned char 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1
  1248 ;;      Params:         0       0       0
  1249 ;;      Locals:         1       0       0
  1250 ;;      Temps:          0       0       0
  1251 ;;      Totals:         1       0       0
  1252 ;;Total ram usage:        1 bytes
  1253 ;; Hardware stack levels used: 1
  1254 ;; Hardware stack levels required when called: 3
  1255 ;; This function calls:
  1256 ;;		_TI_CloseTimer
  1257 ;;		_TI_GetTics
  1258 ;;		_TI_NewTimer
  1259 ;;		_TI_ResetTics
  1260 ;; This function is called by:
  1261 ;;		_main
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text3
  1266   001368                     __ptext3:
  1267                           	callstack 0
  1268   001368                     _TI_Wait40ms:
  1269                           	callstack 27
  1270                           
  1271                           ;TAD_TIMER.c: 67:     unsigned char Timer;;TAD_TIMER.c: 68:     TI_NewTimer(&Timer);
  1272                           
  1273                           ;incstack = 0
  1274   001368  0E69               	movlw	low TI_Wait40ms@Timer
  1275   00136A  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  1276   00136C  EC21  F009         	call	_TI_NewTimer	;wreg free
  1277                           
  1278                           ;TAD_TIMER.c: 69:     TI_ResetTics(Timer);
  1279   001370  5069               	movf	TI_Wait40ms@Timer^0,w,c
  1280   001372  EC27  F00A         	call	_TI_ResetTics
  1281   001376                     l3829:
  1282   001376  5069               	movf	TI_Wait40ms@Timer^0,w,c
  1283   001378  EC84  F008         	call	_TI_GetTics
  1284   00137C  505F               	movf	(?_TI_GetTics+3)^0,w,c
  1285   00137E  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  1286   001380  105D               	iorwf	(?_TI_GetTics+1)^0,w,c
  1287   001382  E103               	bnz	u2400
  1288   001384  0EA0               	movlw	160
  1289   001386  5C5C               	subwf	?_TI_GetTics^0,w,c
  1290   001388  E3F6               	bnc	l3829
  1291   00138A                     u2400:
  1292                           
  1293                           ;TAD_TIMER.c: 71:     TI_CloseTimer(Timer);
  1294   00138A  5069               	movf	TI_Wait40ms@Timer^0,w,c
  1295   00138C  EFFA  F00A         	goto	_TI_CloseTimer
  1296   001390                     __end_of_TI_Wait40ms:
  1297                           	callstack 0
  1298                           
  1299 ;; *************** function _TI_CloseTimer *****************
  1300 ;; Defined at:
  1301 ;;		line 62 in file "TAD_TIMER.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  TimerHandle     1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  TimerHandle     1    0[COMRAM] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1
  1315 ;;      Params:         0       0       0
  1316 ;;      Locals:         1       0       0
  1317 ;;      Temps:          0       0       0
  1318 ;;      Totals:         1       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used: 1
  1321 ;; Hardware stack levels required when called: 2
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_TI_Wait40ms
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text4
  1330   0015F4                     __ptext4:
  1331                           	callstack 0
  1332   0015F4                     _TI_CloseTimer:
  1333                           	callstack 27
  1334                           
  1335                           ;incstack = 0
  1336                           ;TI_CloseTimer@TimerHandle stored from wreg
  1337   0015F4  6E5C               	movwf	TI_CloseTimer@TimerHandle^0,c
  1338                           
  1339                           ;TAD_TIMER.c: 63:  Timers[TimerHandle].Busy=0;
  1340   0015F6  505C               	movf	TI_CloseTimer@TimerHandle^0,w,c
  1341   0015F8  EC36  F009         	call	PL2	;call to abstracted procedure
  1342   0015FC  6ADF               	clrf	indf2,c
  1343   0015FE  0012               	return		;funcret
  1344   001600                     __end_of_TI_CloseTimer:
  1345                           	callstack 0
  1346                           
  1347 ;; *************** function _TI_Init *****************
  1348 ;; Defined at:
  1349 ;;		line 31 in file "TAD_TIMER.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  counter         1    0[COMRAM] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1
  1363 ;;      Params:         0       0       0
  1364 ;;      Locals:         1       0       0
  1365 ;;      Temps:          0       0       0
  1366 ;;      Totals:         1       0       0
  1367 ;;Total ram usage:        1 bytes
  1368 ;; Hardware stack levels used: 1
  1369 ;; Hardware stack levels required when called: 2
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text5
  1378   00142C                     __ptext5:
  1379                           	callstack 0
  1380   00142C                     _TI_Init:
  1381                           	callstack 28
  1382                           
  1383                           ;TAD_TIMER.c: 32:  for (unsigned char counter=0; counter<16; counter++) {
  1384                           
  1385                           ;incstack = 0
  1386   00142C  6A5C               	clrf	TI_Init@counter^0,c
  1387   00142E                     l3815:
  1388                           
  1389                           ;TAD_TIMER.c: 33:   Timers[counter].Busy=0;
  1390   00142E  505C               	movf	TI_Init@counter^0,w,c
  1391   001430  EC36  F009         	call	PL2	;call to abstracted procedure
  1392   001434  6ADF               	clrf	indf2,c
  1393                           
  1394                           ;TAD_TIMER.c: 34:  }
  1395   001436  2A5C               	incf	TI_Init@counter^0,f,c
  1396   001438  0E0F               	movlw	15
  1397   00143A  645C               	cpfsgt	TI_Init@counter^0,c
  1398   00143C  D7F8               	goto	l3815
  1399                           
  1400                           ;TAD_TIMER.c: 35:  T0CON=0xC3;
  1401   00143E  0EC3               	movlw	195
  1402   001440  6ED5               	movwf	213,c	;volatile
  1403                           
  1404                           ;TAD_TIMER.c: 36:     TMR0=100;
  1405   001442  6AD7               	clrf	215,c	;volatile
  1406   001444  0E64               	movlw	100
  1407   001446  6ED6               	movwf	214,c	;volatile
  1408                           
  1409                           ;TAD_TIMER.c: 37:  INTCONbits.TMR0IF = 0;
  1410   001448  94F2               	bcf	242,2,c	;volatile
  1411                           
  1412                           ;TAD_TIMER.c: 38:  INTCONbits.TMR0IE = 1;
  1413   00144A  8AF2               	bsf	242,5,c	;volatile
  1414   00144C  0C64               	retlw	100	;funcret
  1415   00144E                     __end_of_TI_Init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _SIO_Init *****************
  1419 ;; Defined at:
  1420 ;;		line 9 in file "TAD_SIO.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1
  1434 ;;      Params:         0       0       0
  1435 ;;      Locals:         0       0       0
  1436 ;;      Temps:          0       0       0
  1437 ;;      Totals:         0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used: 1
  1440 ;; Hardware stack levels required when called: 2
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text6
  1449   001524                     __ptext6:
  1450                           	callstack 0
  1451   001524                     _SIO_Init:
  1452                           	callstack 28
  1453                           
  1454                           ;TAD_SIO.c: 11:     TRISCbits.TRISC6 = 1;
  1455                           
  1456                           ;incstack = 0
  1457   001524  8C94               	bsf	148,6,c	;volatile
  1458                           
  1459                           ;TAD_SIO.c: 12:     TRISCbits.TRISC7 = 1;
  1460   001526  8E94               	bsf	148,7,c	;volatile
  1461                           
  1462                           ;TAD_SIO.c: 14:     BAUDCONbits.BRG16 = 1;
  1463   001528  86B8               	bsf	184,3,c	;volatile
  1464                           
  1465                           ;TAD_SIO.c: 15:     TXSTA = 0x20;
  1466   00152A  0E20               	movlw	32
  1467   00152C  6EAC               	movwf	172,c	;volatile
  1468                           
  1469                           ;TAD_SIO.c: 16:  RCSTA = 0x90;
  1470   00152E  0E90               	movlw	144
  1471   001530  6EAB               	movwf	171,c	;volatile
  1472                           
  1473                           ;TAD_SIO.c: 17:     SPBRG = 42;
  1474   001532  0E2A               	movlw	42
  1475   001534  6EAF               	movwf	175,c	;volatile
  1476                           
  1477                           ;TAD_SIO.c: 18:     SPBRGH = 0;
  1478   001536  6AB0               	clrf	176,c	;volatile
  1479   001538  0012               	return		;funcret
  1480   00153A                     __end_of_SIO_Init:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _SAVE_Motor *****************
  1484 ;; Defined at:
  1485 ;;		line 36 in file "TAD_SAVERECORDINGS.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1
  1499 ;;      Params:         0       0       0
  1500 ;;      Locals:         0       0       0
  1501 ;;      Temps:          2       0       0
  1502 ;;      Totals:         2       0       0
  1503 ;;Total ram usage:        2 bytes
  1504 ;; Hardware stack levels used: 1
  1505 ;; Hardware stack levels required when called: 2
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text7
  1514   000944                     __ptext7:
  1515                           	callstack 0
  1516   000944                     _SAVE_Motor:
  1517                           	callstack 28
  1518                           
  1519                           ;TAD_SAVERECORDINGS.c: 39:     switch(state){
  1520                           
  1521                           ;incstack = 0
  1522   000944  D058               	goto	l4709
  1523   000946                     l4619:
  1524                           
  1525                           ;TAD_SAVERECORDINGS.c: 43:             EEADR = 120;
  1526   000946  0E78               	movlw	120
  1527   000948  6EA9               	movwf	169,c	;volatile
  1528                           
  1529                           ;TAD_SAVERECORDINGS.c: 44:             EECON1bits.EEPGD = 0;
  1530   00094A  9EA6               	bcf	166,7,c	;volsfr
  1531                           
  1532                           ;TAD_SAVERECORDINGS.c: 45:             EECON1bits.CFGS = 0;
  1533   00094C  9CA6               	bcf	166,6,c	;volsfr
  1534                           
  1535                           ;TAD_SAVERECORDINGS.c: 46:             EECON1bits.RD = 1;
  1536   00094E  80A6               	bsf	166,0,c	;volsfr
  1537   000950                     l4627:
  1538                           
  1539                           ;TAD_SAVERECORDINGS.c: 47:             state++;
  1540   000950  2A18               	incf	_state@TAD_SAVERECORDINGS$F1534^0,f,c
  1541                           
  1542                           ;TAD_SAVERECORDINGS.c: 48:             break;
  1543   000952  0012               	return	
  1544   000954                     l987:
  1545                           
  1546                           ;TAD_SAVERECORDINGS.c: 50:             if(EECON1bits.RD) break;
  1547   000954  A0A6               	btfss	166,0,c	;volsfr
  1548   000956  D001               	goto	l988
  1549   000958  0012               	return	
  1550   00095A                     l988:
  1551                           
  1552                           ;TAD_SAVERECORDINGS.c: 51:             numRecordings = EEDATA;
  1553   00095A  CFA8 F041          	movff	4008,_numRecordings	;volatile
  1554                           
  1555                           ;TAD_SAVERECORDINGS.c: 52:             if(numRecordings > 10) numRecordings = 0;
  1556   00095E  0E0A               	movlw	10
  1557   000960  6441               	cpfsgt	_numRecordings^0,c
  1558   000962  D001               	goto	l989
  1559   000964  6A41               	clrf	_numRecordings^0,c
  1560   000966                     l989:
  1561                           
  1562                           ;TAD_SAVERECORDINGS.c: 53:             index = recordingField = 0;
  1563   000966  6A16               	clrf	_recordingField^0,c
  1564   000968  6A17               	clrf	_index@TAD_SAVERECORDINGS$F1535^0,c
  1565   00096A  D7F2               	goto	l4627
  1566   00096C                     l4637:
  1567                           
  1568                           ;TAD_SAVERECORDINGS.c: 57:             if(index == numRecordings){
  1569   00096C  5041               	movf	_numRecordings^0,w,c
  1570   00096E  1817               	xorwf	_index@TAD_SAVERECORDINGS$F1535^0,w,c
  1571   000970  E102               	bnz	l4641
  1572   000972                     u3500:
  1573                           
  1574                           ;TAD_SAVERECORDINGS.c: 58:                 state = 0;
  1575   000972  6A18               	clrf	_state@TAD_SAVERECORDINGS$F1534^0,c
  1576                           
  1577                           ;TAD_SAVERECORDINGS.c: 59:                 break;
  1578   000974  0012               	return	
  1579   000976                     l4641:
  1580                           
  1581                           ;TAD_SAVERECORDINGS.c: 61:             EEADR = (index*6) + recordingField;
  1582   000976  5017               	movf	_index@TAD_SAVERECORDINGS$F1535^0,w,c
  1583   000978  0D06               	mullw	6
  1584   00097A  50F3               	movf	243,w,c
  1585   00097C  2416               	addwf	_recordingField^0,w,c
  1586   00097E  D7E4               	goto	L6
  1587   000980                     l992:
  1588                           
  1589                           ;TAD_SAVERECORDINGS.c: 68:             if(EECON1bits.RD) break;
  1590   000980  A0A6               	btfss	166,0,c	;volsfr
  1591   000982  D001               	goto	l4653
  1592   000984  0012               	return	
  1593   000986                     l4653:
  1594                           
  1595                           ;TAD_SAVERECORDINGS.c: 70:                 recordings[index].id[recordingField] = EEDATA
      +                          ;
  1596   000986  5017               	movf	_index@TAD_SAVERECORDINGS$F1535^0,w,c
  1597   000988  D84C               	call	PL28	;call to abstracted procedure
  1598   00098A  CFA8 FFDF          	movff	4008,indf2	;volatile
  1599                           
  1600                           ;TAD_SAVERECORDINGS.c: 74:             if(recordingField == 5){
  1601   00098E  0E05               	movlw	5
  1602   000990  1816               	xorwf	_recordingField^0,w,c
  1603   000992  E103               	bnz	l4665
  1604                           
  1605                           ;TAD_SAVERECORDINGS.c: 75:                 index++;
  1606   000994  2A17               	incf	_index@TAD_SAVERECORDINGS$F1535^0,f,c
  1607                           
  1608                           ;TAD_SAVERECORDINGS.c: 76:                 recordingField = 0;
  1609   000996  6A16               	clrf	_recordingField^0,c
  1610                           
  1611                           ;TAD_SAVERECORDINGS.c: 77:             }
  1612   000998  D001               	goto	l997
  1613   00099A                     l4665:
  1614   00099A  2A16               	incf	_recordingField^0,f,c
  1615   00099C                     l997:
  1616                           
  1617                           ;TAD_SAVERECORDINGS.c: 80:             state--;
  1618   00099C  0618               	decf	_state@TAD_SAVERECORDINGS$F1534^0,f,c
  1619                           
  1620                           ;TAD_SAVERECORDINGS.c: 81:             break;
  1621   00099E  0012               	return	
  1622   0009A0                     l4667:
  1623                           
  1624                           ;TAD_SAVERECORDINGS.c: 83:             if(recordingField >= 7){
  1625   0009A0  0E06               	movlw	6
  1626   0009A2  6416               	cpfsgt	_recordingField^0,c
  1627   0009A4  D001               	goto	l4671
  1628   0009A6  D7E5               	goto	u3500
  1629   0009A8                     l4671:
  1630                           
  1631                           ;TAD_SAVERECORDINGS.c: 89:             EEADR = (numRecordings*6) + recordingField;
  1632   0009A8  5041               	movf	_numRecordings^0,w,c
  1633   0009AA  0D06               	mullw	6
  1634   0009AC  50F3               	movf	243,w,c
  1635   0009AE  2416               	addwf	_recordingField^0,w,c
  1636   0009B0  6EA9               	movwf	169,c	;volatile
  1637                           
  1638                           ;TAD_SAVERECORDINGS.c: 92:             if(recordingField < 2)
  1639   0009B2  0E02               	movlw	2
  1640   0009B4  6016               	cpfslt	_recordingField^0,c
  1641   0009B6  D005               	goto	l4677
  1642   0009B8                     u3540:
  1643                           
  1644                           ;TAD_SAVERECORDINGS.c: 93:                 EEDATA = recordings[numRecordings].id[recordi
      +                          ngField];
  1645   0009B8  5041               	movf	_numRecordings^0,w,c
  1646   0009BA  D833               	call	PL28	;call to abstracted procedure
  1647   0009BC  50DF               	movf	indf2,w,c
  1648   0009BE  6EA8               	movwf	168,c	;volatile
  1649   0009C0  D008               	goto	l4687
  1650   0009C2                     l4677:
  1651   0009C2  0E05               	movlw	5
  1652   0009C4  6416               	cpfsgt	_recordingField^0,c
  1653   0009C6  D7F8               	goto	u3540
  1654                           
  1655                           ;TAD_SAVERECORDINGS.c: 95:                 numRecordings++;
  1656   0009C8  2A41               	incf	_numRecordings^0,f,c
  1657                           
  1658                           ;TAD_SAVERECORDINGS.c: 96:                 EEDATA = numRecordings;
  1659   0009CA  C041  FFA8         	movff	_numRecordings,4008	;volatile
  1660                           
  1661                           ;TAD_SAVERECORDINGS.c: 97:                 EEADR = 120;
  1662   0009CE  0E78               	movlw	120
  1663   0009D0  6EA9               	movwf	169,c	;volatile
  1664   0009D2                     l4687:
  1665                           
  1666                           ;TAD_SAVERECORDINGS.c: 103:             EECON1bits.EEPGD = 0;
  1667   0009D2  9EA6               	bcf	166,7,c	;volsfr
  1668                           
  1669                           ;TAD_SAVERECORDINGS.c: 104:             EECON1bits.CFGS = 0;
  1670   0009D4  9CA6               	bcf	166,6,c	;volsfr
  1671                           
  1672                           ;TAD_SAVERECORDINGS.c: 105:             EECON1bits.WREN = 1;
  1673   0009D6  84A6               	bsf	166,2,c	;volsfr
  1674                           
  1675                           ;TAD_SAVERECORDINGS.c: 108:             INTCONbits.GIE = 0;
  1676   0009D8  9EF2               	bcf	242,7,c	;volatile
  1677                           
  1678                           ;TAD_SAVERECORDINGS.c: 109:             EECON2 = 0x55;
  1679   0009DA  0E55               	movlw	85
  1680   0009DC  6EA7               	movwf	167,c	;volsfr
  1681                           
  1682                           ;TAD_SAVERECORDINGS.c: 110:             EECON2 = 0xAA;
  1683   0009DE  0EAA               	movlw	170
  1684   0009E0  6EA7               	movwf	167,c	;volsfr
  1685                           
  1686                           ;TAD_SAVERECORDINGS.c: 111:             EECON1bits.WR = 1;
  1687   0009E2  82A6               	bsf	166,1,c	;volsfr
  1688   0009E4  D7B5               	goto	l4627
  1689   0009E6                     l1004:
  1690                           
  1691                           ;TAD_SAVERECORDINGS.c: 115:             if(EECON1bits.WR) break;
  1692   0009E6  A2A6               	btfss	166,1,c	;volsfr
  1693   0009E8  D001               	goto	l1005
  1694   0009EA  0012               	return	
  1695   0009EC                     l1005:
  1696                           
  1697                           ;TAD_SAVERECORDINGS.c: 116:             INTCONbits.GIE = 1;
  1698   0009EC  8EF2               	bsf	242,7,c	;volatile
  1699                           
  1700                           ;TAD_SAVERECORDINGS.c: 117:             EECON1bits.WREN = 0;
  1701   0009EE  94A6               	bcf	166,2,c	;volsfr
  1702                           
  1703                           ;TAD_SAVERECORDINGS.c: 118:             recordingField++;
  1704   0009F0  2A16               	incf	_recordingField^0,f,c
  1705                           
  1706                           ;TAD_SAVERECORDINGS.c: 119:             state--;
  1707   0009F2  0618               	decf	_state@TAD_SAVERECORDINGS$F1534^0,f,c
  1708                           
  1709                           ;TAD_SAVERECORDINGS.c: 120:             break;
  1710   0009F4  0012               	return	
  1711   0009F6                     l4709:
  1712   0009F6  5018               	movf	_state@TAD_SAVERECORDINGS$F1534^0,w,c
  1713   0009F8  6E5C               	movwf	??_SAVE_Motor^0,c
  1714   0009FA  6A5D               	clrf	(??_SAVE_Motor+1)^0,c
  1715                           
  1716                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1717                           ; Switch size 1, requested type "space"
  1718                           ; Number of cases is 1, Range of values is 0 to 0
  1719                           ; switch strategies available:
  1720                           ; Name         Instructions Cycles
  1721                           ; simple_byte            4     3 (average)
  1722                           ;	Chosen strategy is simple_byte
  1723   0009FC  505D               	movf	(??_SAVE_Motor+1)^0,w,c
  1724   0009FE  A4D8               	btfss	status,2,c
  1725   000A00  0012               	return	
  1726                           
  1727                           ; Switch size 1, requested type "space"
  1728                           ; Number of cases is 7, Range of values is 0 to 6
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte           22    12 (average)
  1732                           ;	Chosen strategy is simple_byte
  1733   000A02  505C               	movf	??_SAVE_Motor^0,w,c
  1734   000A04  B4D8               	btfsc	status,2,c
  1735   000A06  0012               	return	
  1736   000A08  0A01               	xorlw	1	; case 1
  1737   000A0A  E09D               	bz	l4619
  1738   000A0C  0A03               	xorlw	3	; case 2
  1739   000A0E  E0A2               	bz	l987
  1740   000A10  0A01               	xorlw	1	; case 3
  1741   000A12  E0AC               	bz	l4637
  1742   000A14  0A07               	xorlw	7	; case 4
  1743   000A16  E0B4               	bz	l992
  1744   000A18  0A01               	xorlw	1	; case 5
  1745   000A1A  E0C2               	bz	l4667
  1746   000A1C  0A03               	xorlw	3	; case 6
  1747   000A1E  E0E3               	bz	l1004
  1748   000A20  0012               	return		;funcret
  1749   000A22                     __end_of_SAVE_Motor:
  1750                           	callstack 0
  1751   000A22                     PL28:
  1752                           	callstack 28
  1753   000A22  0D06               	mullw	6
  1754   000A24  50F3               	movf	243,w,c
  1755   000A26  0F80               	addlw	low _recordings
  1756   000A28  2416               	addwf	_recordingField^0,w,c
  1757   000A2A  6ED9               	movwf	fsr2l,c
  1758   000A2C  6ADA               	clrf	fsr2h,c
  1759   000A2E  0012               	return	
  1760   000A30                     __end_ofPL28:
  1761                           	callstack 0
  1762                           
  1763 ;; *************** function _SAVE_Init *****************
  1764 ;; Defined at:
  1765 ;;		line 9 in file "TAD_SAVERECORDINGS.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1
  1779 ;;      Params:         0       0       0
  1780 ;;      Locals:         0       0       0
  1781 ;;      Temps:          0       0       0
  1782 ;;      Totals:         0       0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used: 1
  1785 ;; Hardware stack levels required when called: 2
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text8
  1794   00166A                     __ptext8:
  1795                           	callstack 0
  1796   00166A                     _SAVE_Init:
  1797                           	callstack 28
  1798                           
  1799                           ;TAD_SAVERECORDINGS.c: 13:     numRecordings = 0;
  1800                           
  1801                           ;incstack = 0
  1802   00166A  6A41               	clrf	_numRecordings^0,c
  1803                           
  1804                           ;TAD_SAVERECORDINGS.c: 14:     state = 1;
  1805   00166C  0E01               	movlw	1
  1806   00166E  6E18               	movwf	_state@TAD_SAVERECORDINGS$F1534^0,c
  1807   001670  0C01               	retlw	1	;funcret
  1808   001672                     __end_of_SAVE_Init:
  1809                           	callstack 0
  1810                           
  1811 ;; *************** function _PORT_Motor *****************
  1812 ;; Defined at:
  1813 ;;		line 27 in file "TAD_PORT.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  aux             1   24[COMRAM] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1
  1827 ;;      Params:         0       0       0
  1828 ;;      Locals:         1       0       0
  1829 ;;      Temps:          2       0       0
  1830 ;;      Totals:         3       0       0
  1831 ;;Total ram usage:        3 bytes
  1832 ;; Hardware stack levels used: 1
  1833 ;; Hardware stack levels required when called: 6
  1834 ;; This function calls:
  1835 ;;		_CNT_ResetTime
  1836 ;;		_KPAD_GetChar
  1837 ;;		_KPAD_SetSMS
  1838 ;;		_KPAD_StartInput
  1839 ;;		_KPAD_StopInput
  1840 ;;		_KPAD_UnsetSMS
  1841 ;;		_LCD_Clear
  1842 ;;		_LCD_CursorOff
  1843 ;;		_LCD_CursorOn
  1844 ;;		_LCD_GotoXY
  1845 ;;		_LCD_IsAvailable
  1846 ;;		_LCD_PutChar
  1847 ;;		_LCD_PutString
  1848 ;;		_MENU_Mostrar
  1849 ;;		_SIO_GetChar
  1850 ;;		_SIO_PutChar
  1851 ;;		_SIO_RXAvailable
  1852 ;;		_SIO_TXAvailable
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text9
  1859   000828                     __ptext9:
  1860                           	callstack 0
  1861   000828                     _PORT_Motor:
  1862                           	callstack 24
  1863                           
  1864                           ;TAD_PORT.c: 28:     unsigned char aux;;TAD_PORT.c: 29:     switch(state) {
  1865                           
  1866                           ;incstack = 0
  1867   000828  D070               	goto	l4263
  1868   00082A                     l4173:
  1869                           
  1870                           ;TAD_PORT.c: 33:             LCD_Clear();
  1871   00082A  EC86  F00A         	call	_LCD_Clear	;wreg free
  1872                           
  1873                           ;TAD_PORT.c: 34:             LCD_PutString("PORT NAME:");
  1874   00082E  0EB8               	movlw	low STR_13
  1875   000830  6E5E               	movwf	LCD_PutString@s^0,c
  1876   000832  0E1F               	movlw	high STR_13
  1877   000834  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  1878   000836  ECD6  F00A         	call	_LCD_PutString	;wreg free
  1879   00083A                     l4177:
  1880                           
  1881                           ;TAD_PORT.c: 35:             state++;
  1882   00083A  2A32               	incf	_state@TAD_PORT$F865^0,f,c
  1883                           
  1884                           ;TAD_PORT.c: 36:             numChars = 0;
  1885   00083C  6A31               	clrf	_numChars^0,c
  1886                           
  1887                           ;TAD_PORT.c: 37:             break;
  1888   00083E  0012               	return	
  1889   000840                     l4181:
  1890                           
  1891                           ;TAD_PORT.c: 39:             if(!LCD_IsAvailable()) break;
  1892   000840  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  1893   000844  0900               	iorlw	0
  1894   000846  E101               	bnz	l4185
  1895   000848  0012               	return	
  1896   00084A                     l4185:
  1897                           
  1898                           ;TAD_PORT.c: 40:             LCD_GotoXY(0, 1);
  1899   00084A  EC67  F003         	call	PL40	;call to abstracted procedure
  1900   00084E  EC48  F007         	call	_LCD_GotoXY
  1901                           
  1902                           ;TAD_PORT.c: 41:             LCD_CursorOn();
  1903   000852  EC26  F00B         	call	_LCD_CursorOn	;wreg free
  1904                           
  1905                           ;TAD_PORT.c: 42:             KPAD_StartInput();
  1906   000856  EC41  F00B         	call	_KPAD_StartInput	;wreg free
  1907                           
  1908                           ;TAD_PORT.c: 43:             KPAD_SetSMS();
  1909   00085A  EC17  F00B         	call	_KPAD_SetSMS	;wreg free
  1910   00085E                     l4191:
  1911                           
  1912                           ;TAD_PORT.c: 44:             state++;
  1913   00085E  2A32               	incf	_state@TAD_PORT$F865^0,f,c
  1914                           
  1915                           ;TAD_PORT.c: 45:             break;
  1916   000860  0012               	return	
  1917   000862                     l4193:
  1918                           
  1919                           ;TAD_PORT.c: 47:             if(!LCD_IsAvailable()) break;
  1920   000862  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  1921   000866  0900               	iorlw	0
  1922   000868  E101               	bnz	l4197
  1923   00086A  0012               	return	
  1924   00086C                     l4197:
  1925                           
  1926                           ;TAD_PORT.c: 48:             if((portName[numChars] = KPAD_GetChar()) == 0xFF) break;
  1927   00086C  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  1928   000870  6E72               	movwf	??_PORT_Motor^0,c
  1929   000872  D863               	call	PL20	;call to abstracted procedure
  1930   000874  C072  FFDF         	movff	??_PORT_Motor,indf2
  1931   000878  28DE               	incf	postinc2,w,c
  1932   00087A  E101               	bnz	l4201
  1933   00087C  0012               	return	
  1934   00087E                     l4201:
  1935                           
  1936                           ;TAD_PORT.c: 49:             if(portName[numChars] == '*'){
  1937   00087E  D85D               	call	PL20	;call to abstracted procedure
  1938   000880  0E2A               	movlw	42
  1939   000882  18DE               	xorwf	postinc2,w,c
  1940   000884  E103               	bnz	l4205
  1941   000886                     u2930:
  1942                           
  1943                           ;TAD_PORT.c: 50:                 state = 1;
  1944   000886  0E01               	movlw	1
  1945   000888  6E32               	movwf	_state@TAD_PORT$F865^0,c
  1946                           
  1947                           ;TAD_PORT.c: 51:                 break;
  1948   00088A  0C01               	retlw	1
  1949   00088C                     l4205:
  1950                           
  1951                           ;TAD_PORT.c: 53:             LCD_PutChar(portName[numChars]);
  1952   00088C  D856               	call	PL20	;call to abstracted procedure
  1953   00088E  50DF               	movf	indf2,w,c
  1954   000890  ECF0  F009         	call	_LCD_PutChar
  1955                           
  1956                           ;TAD_PORT.c: 54:             if(numChars == 2){
  1957   000894  0E02               	movlw	2
  1958   000896  1831               	xorwf	_numChars^0,w,c
  1959   000898  E105               	bnz	l4215
  1960                           
  1961                           ;TAD_PORT.c: 55:                 LCD_CursorOff();
  1962   00089A  EC30  F00B         	call	_LCD_CursorOff	;wreg free
  1963                           
  1964                           ;TAD_PORT.c: 56:                 KPAD_UnsetSMS();
  1965   00089E  EC55  F00B         	call	_KPAD_UnsetSMS	;wreg free
  1966   0008A2  D7DD               	goto	l4191
  1967   0008A4                     l4215:
  1968   0008A4  2A31               	incf	_numChars^0,f,c
  1969   0008A6  0012               	return	
  1970   0008A8                     l4217:
  1971                           
  1972                           ;TAD_PORT.c: 62:             if((aux = KPAD_GetChar()) == 0xFF) break;
  1973   0008A8  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  1974   0008AC  6E74               	movwf	PORT_Motor@aux^0,c
  1975   0008AE  2874               	incf	PORT_Motor@aux^0,w,c
  1976   0008B0  E101               	bnz	l4221
  1977   0008B2  0012               	return	
  1978   0008B4                     l4221:
  1979                           
  1980                           ;TAD_PORT.c: 63:             if(aux == '*'){
  1981   0008B4  0E2A               	movlw	42
  1982   0008B6  1874               	xorwf	PORT_Motor@aux^0,w,c
  1983   0008B8  E0E6               	bz	u2930
  1984   0008BA  0E23               	movlw	35
  1985   0008BC  1874               	xorwf	PORT_Motor@aux^0,w,c
  1986   0008BE  A4D8               	btfss	status,2,c
  1987   0008C0  0012               	return	
  1988                           
  1989                           ;TAD_PORT.c: 67:                 SIO_PutChar('T');
  1990   0008C2  0E54               	movlw	84
  1991   0008C4  EC39  F00B         	call	_SIO_PutChar
  1992   0008C8  D7B8               	goto	l4177
  1993   0008CA                     l4233:
  1994                           
  1995                           ;TAD_PORT.c: 73:             KPAD_StopInput();
  1996   0008CA  EC5B  F00B         	call	_KPAD_StopInput	;wreg free
  1997                           
  1998                           ;TAD_PORT.c: 74:             if(SIO_RXAvailable() && SIO_GetChar() == 'K')
  1999   0008CE  EC52  F00B         	call	_SIO_RXAvailable	;wreg free
  2000   0008D2  0900               	iorlw	0
  2001   0008D4  B4D8               	btfsc	status,2,c
  2002   0008D6  0012               	return	
  2003   0008D8  EC60  F00B         	call	_SIO_GetChar	;wreg free
  2004   0008DC  0A4B               	xorlw	75
  2005   0008DE  E0BF               	bz	l4191
  2006   0008E0  0012               	return	
  2007   0008E2                     l4241:
  2008                           
  2009                           ;TAD_PORT.c: 78:             if(!SIO_TXAvailable()) break;
  2010   0008E2  EC4F  F00B         	call	_SIO_TXAvailable	;wreg free
  2011   0008E6  0900               	iorlw	0
  2012   0008E8  E101               	bnz	l4245
  2013   0008EA  0012               	return	
  2014   0008EC                     l4245:
  2015                           
  2016                           ;TAD_PORT.c: 79:             SIO_PutChar(portName[numChars++]);
  2017   0008EC  D826               	call	PL20	;call to abstracted procedure
  2018   0008EE  50DF               	movf	indf2,w,c
  2019   0008F0  EC39  F00B         	call	_SIO_PutChar
  2020   0008F4  2A31               	incf	_numChars^0,f,c
  2021                           
  2022                           ;TAD_PORT.c: 80:             if(numChars == 4){
  2023   0008F6  0E04               	movlw	4
  2024   0008F8  1831               	xorwf	_numChars^0,w,c
  2025   0008FA  E09F               	bz	l4177
  2026   0008FC  0012               	return	
  2027   0008FE                     l4255:
  2028                           
  2029                           ;TAD_PORT.c: 86:             CNT_ResetTime();
  2030   0008FE  EC1C  F00B         	call	_CNT_ResetTime	;wreg free
  2031                           
  2032                           ;TAD_PORT.c: 87:             MENU_Mostrar();
  2033   000902  ECA8  F00A         	call	_MENU_Mostrar	;wreg free
  2034                           
  2035                           ;TAD_PORT.c: 88:             state = 0;
  2036   000906  6A32               	clrf	_state@TAD_PORT$F865^0,c
  2037                           
  2038                           ;TAD_PORT.c: 89:             break;
  2039   000908  0012               	return	
  2040   00090A                     l4263:
  2041   00090A  5032               	movf	_state@TAD_PORT$F865^0,w,c
  2042   00090C  6E72               	movwf	??_PORT_Motor^0,c
  2043   00090E  6A73               	clrf	(??_PORT_Motor+1)^0,c
  2044                           
  2045                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2046                           ; Switch size 1, requested type "space"
  2047                           ; Number of cases is 1, Range of values is 0 to 0
  2048                           ; switch strategies available:
  2049                           ; Name         Instructions Cycles
  2050                           ; simple_byte            4     3 (average)
  2051                           ;	Chosen strategy is simple_byte
  2052   000910  5073               	movf	(??_PORT_Motor+1)^0,w,c
  2053   000912  A4D8               	btfss	status,2,c
  2054   000914  0012               	return	
  2055                           
  2056                           ; Switch size 1, requested type "space"
  2057                           ; Number of cases is 8, Range of values is 0 to 7
  2058                           ; switch strategies available:
  2059                           ; Name         Instructions Cycles
  2060                           ; simple_byte           25    13 (average)
  2061                           ;	Chosen strategy is simple_byte
  2062   000916  5072               	movf	??_PORT_Motor^0,w,c
  2063   000918  B4D8               	btfsc	status,2,c
  2064   00091A  0012               	return	
  2065   00091C  0A01               	xorlw	1	; case 1
  2066   00091E  E085               	bz	l4173
  2067   000920  0A03               	xorlw	3	; case 2
  2068   000922  E08E               	bz	l4181
  2069   000924  0A01               	xorlw	1	; case 3
  2070   000926  E09D               	bz	l4193
  2071   000928  0A07               	xorlw	7	; case 4
  2072   00092A  E0BE               	bz	l4217
  2073   00092C  0A01               	xorlw	1	; case 5
  2074   00092E  E0CD               	bz	l4233
  2075   000930  0A03               	xorlw	3	; case 6
  2076   000932  E0D7               	bz	l4241
  2077   000934  0A01               	xorlw	1	; case 7
  2078   000936  E0E3               	bz	l4255
  2079   000938  0012               	return		;funcret
  2080   00093A                     __end_of_PORT_Motor:
  2081                           	callstack 0
  2082   00093A                     PL20:
  2083                           	callstack 24
  2084   00093A  5031               	movf	_numChars^0,w,c
  2085   00093C  0F4C               	addlw	low _portName
  2086   00093E  6ED9               	movwf	fsr2l,c
  2087   000940  6ADA               	clrf	fsr2h,c
  2088   000942  0012               	return	
  2089   000944                     __end_ofPL20:
  2090                           	callstack 0
  2091                           
  2092 ;; *************** function _KPAD_SetSMS *****************
  2093 ;; Defined at:
  2094 ;;		line 91 in file "TAD_KEYPAD.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMRAM   BANK0   BANK1
  2108 ;;      Params:         0       0       0
  2109 ;;      Locals:         0       0       0
  2110 ;;      Temps:          0       0       0
  2111 ;;      Totals:         0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used: 1
  2114 ;; Hardware stack levels required when called: 2
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_PORT_Motor
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text10
  2123   00162E                     __ptext10:
  2124                           	callstack 0
  2125   00162E                     _KPAD_SetSMS:
  2126                           	callstack 27
  2127                           
  2128                           ;TAD_KEYPAD.c: 92:     previousValue = 0xFF;
  2129                           
  2130                           ;incstack = 0
  2131   00162E  683C               	setf	_previousValue^0,c
  2132                           
  2133                           ;TAD_KEYPAD.c: 93:     smsMode = 1;
  2134   001630  0E01               	movlw	1
  2135   001632  6E3F               	movwf	_smsMode^0,c
  2136                           
  2137                           ;TAD_KEYPAD.c: 94:     smsPressed = 0;
  2138   001634  6A3A               	clrf	_smsPressed^0,c
  2139   001636  0012               	return		;funcret
  2140   001638                     __end_of_KPAD_SetSMS:
  2141                           	callstack 0
  2142                           
  2143 ;; *************** function _CNT_ResetTime *****************
  2144 ;; Defined at:
  2145 ;;		line 49 in file "TAD_COUNTER.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;		None
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		None
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1
  2159 ;;      Params:         0       0       0
  2160 ;;      Locals:         0       0       0
  2161 ;;      Temps:          0       0       0
  2162 ;;      Totals:         0       0       0
  2163 ;;Total ram usage:        0 bytes
  2164 ;; Hardware stack levels used: 1
  2165 ;; Hardware stack levels required when called: 2
  2166 ;; This function calls:
  2167 ;;		Nothing
  2168 ;; This function is called by:
  2169 ;;		_PORT_Motor
  2170 ;; This function uses a non-reentrant model
  2171 ;;
  2172                           
  2173                           	psect	text11
  2174   001638                     __ptext11:
  2175                           	callstack 0
  2176   001638                     _CNT_ResetTime:
  2177                           	callstack 27
  2178                           
  2179                           ;TAD_COUNTER.c: 50:     time[0] = time[1] = time[2] = time[3] = 0;
  2180                           
  2181                           ;incstack = 0
  2182   001638  6A4B               	clrf	(_time+3)^0,c
  2183   00163A  6A4A               	clrf	(_time+2)^0,c
  2184   00163C  6A49               	clrf	(_time+1)^0,c
  2185   00163E  6A48               	clrf	_time^0,c
  2186   001640  0012               	return		;funcret
  2187   001642                     __end_of_CNT_ResetTime:
  2188                           	callstack 0
  2189                           
  2190 ;; *************** function _PORT_Init *****************
  2191 ;; Defined at:
  2192 ;;		line 14 in file "TAD_PORT.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		None
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1
  2206 ;;      Params:         0       0       0
  2207 ;;      Locals:         0       0       0
  2208 ;;      Temps:          0       0       0
  2209 ;;      Totals:         0       0       0
  2210 ;;Total ram usage:        0 bytes
  2211 ;; Hardware stack levels used: 1
  2212 ;; Hardware stack levels required when called: 2
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	text12
  2221   001698                     __ptext12:
  2222                           	callstack 0
  2223   001698                     _PORT_Init:
  2224                           	callstack 28
  2225                           
  2226                           ;TAD_PORT.c: 15:     state = 0;
  2227                           
  2228                           ;incstack = 0
  2229   001698  6A32               	clrf	_state@TAD_PORT$F865^0,c
  2230                           
  2231                           ;TAD_PORT.c: 16:     portName[3] = '\0';
  2232   00169A  6A4F               	clrf	(_portName+3)^0,c
  2233   00169C  0012               	return		;funcret
  2234   00169E                     __end_of_PORT_Init:
  2235                           	callstack 0
  2236                           
  2237 ;; *************** function _MRCD_Motor *****************
  2238 ;; Defined at:
  2239 ;;		line 64 in file "TAD_MENURECORDINGS.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;		None
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;  aux             1   26[COMRAM] unsigned char 
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMRAM   BANK0   BANK1
  2253 ;;      Params:         0       0       0
  2254 ;;      Locals:         1       0       0
  2255 ;;      Temps:          5       0       0
  2256 ;;      Totals:         6       0       0
  2257 ;;Total ram usage:        6 bytes
  2258 ;; Hardware stack levels used: 1
  2259 ;; Hardware stack levels required when called: 5
  2260 ;; This function calls:
  2261 ;;		_BUZZ_PlayMelody
  2262 ;;		_JOY_Disable
  2263 ;;		_JOY_Enable
  2264 ;;		_JOY_GetMove
  2265 ;;		_KPAD_GetChar
  2266 ;;		_LCD_Clear
  2267 ;;		_LCD_GotoXY
  2268 ;;		_LCD_IsAvailable
  2269 ;;		_LCD_PutString
  2270 ;;		_MENU_Mostrar
  2271 ;;		_MRCD_OptionDown
  2272 ;;		_MRCD_OptionUp
  2273 ;;		_SIO_GetChar
  2274 ;;		_SIO_PutChar
  2275 ;;		_SIO_RXAvailable
  2276 ;;		_SIO_TXAvailable
  2277 ;;		_fillStrAux
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text13
  2284   0003BE                     __ptext13:
  2285                           	callstack 0
  2286   0003BE                     _MRCD_Motor:
  2287                           	callstack 25
  2288                           
  2289                           ;TAD_MENURECORDINGS.c: 67:     unsigned char aux;;TAD_MENURECORDINGS.c: 68:     switch(s
      +                          tate){
  2290                           
  2291                           ;incstack = 0
  2292   0003BE  D0A2               	goto	l4823
  2293   0003C0                     l4717:
  2294                           
  2295                           ;TAD_MENURECORDINGS.c: 72:             if((aux = KPAD_GetChar()) == '*'){
  2296   0003C0  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  2297   0003C4  6E76               	movwf	MRCD_Motor@aux^0,c
  2298   0003C6  0E2A               	movlw	42
  2299   0003C8  1876               	xorwf	MRCD_Motor@aux^0,w,c
  2300   0003CA  A4D8               	btfss	status,2,c
  2301   0003CC  0012               	return	
  2302                           
  2303                           ;TAD_MENURECORDINGS.c: 73:                 state--;
  2304   0003CE  0615               	decf	_state@TAD_MENURECORDINGS$F1579^0,f,c
  2305                           
  2306                           ;TAD_MENURECORDINGS.c: 74:                 MENU_Mostrar();
  2307   0003D0  EFA8  F00A         	goto	_MENU_Mostrar	;wreg free
  2308   0003D4                     l4723:
  2309                           
  2310                           ;TAD_MENURECORDINGS.c: 78:             if((aux = JOY_GetMove()) != 0){
  2311   0003D4  ECBC  F00A         	call	_JOY_GetMove	;wreg free
  2312   0003D8  6E76               	movwf	MRCD_Motor@aux^0,c
  2313   0003DA  5076               	movf	MRCD_Motor@aux^0,w,c
  2314   0003DC  E006               	bz	l4731
  2315                           
  2316                           ;TAD_MENURECORDINGS.c: 79:                 aux == 1 ? MRCD_OptionUp() : MRCD_OptionDown(
      +                          );
  2317   0003DE  0476               	decf	MRCD_Motor@aux^0,w,c
  2318   0003E0  E002 EFDE  F00A    	bnz	_MRCD_OptionDown
  2319   0003E6  EFC8  F009         	goto	_MRCD_OptionUp	;wreg free
  2320   0003EA                     l4731:
  2321   0003EA  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  2322   0003EE  6E76               	movwf	MRCD_Motor@aux^0,c
  2323   0003F0  0E23               	movlw	35
  2324   0003F2  1876               	xorwf	MRCD_Motor@aux^0,w,c
  2325   0003F4  E10C               	bnz	l4741
  2326                           
  2327                           ;TAD_MENURECORDINGS.c: 82:                 JOY_Disable();
  2328   0003F6  EC64  F00B         	call	_JOY_Disable	;wreg free
  2329                           
  2330                           ;TAD_MENURECORDINGS.c: 83:                 LCD_Clear();
  2331   0003FA  EC86  F00A         	call	_LCD_Clear	;wreg free
  2332                           
  2333                           ;TAD_MENURECORDINGS.c: 84:                 LCD_PutString("PLAYING...");
  2334   0003FE  0EAD               	movlw	low STR_25
  2335   000400  6E5E               	movwf	LCD_PutString@s^0,c
  2336   000402  0E1F               	movlw	high STR_25
  2337   000404  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  2338   000406  ECD6  F00A         	call	_LCD_PutString	;wreg free
  2339   00040A                     l4739:
  2340                           
  2341                           ;TAD_MENURECORDINGS.c: 85:                 state++;
  2342   00040A  2A15               	incf	_state@TAD_MENURECORDINGS$F1579^0,f,c
  2343                           
  2344                           ;TAD_MENURECORDINGS.c: 86:             }
  2345   00040C  0012               	return	
  2346   00040E                     l4741:
  2347   00040E  0E2A               	movlw	42
  2348   000410  1876               	xorwf	MRCD_Motor@aux^0,w,c
  2349   000412  A4D8               	btfss	status,2,c
  2350   000414  0012               	return	
  2351                           
  2352                           ;TAD_MENURECORDINGS.c: 88:                 state = 0;
  2353   000416  6A15               	clrf	_state@TAD_MENURECORDINGS$F1579^0,c
  2354                           
  2355                           ;TAD_MENURECORDINGS.c: 89:                 JOY_Disable();
  2356   000418  EC64  F00B         	call	_JOY_Disable	;wreg free
  2357   00041C  EFA8  F00A         	goto	_MENU_Mostrar
  2358   000420                     l4749:
  2359                           
  2360                           ;TAD_MENURECORDINGS.c: 94:             if(!SIO_TXAvailable()) break;
  2361   000420  EC4F  F00B         	call	_SIO_TXAvailable	;wreg free
  2362   000424  0900               	iorlw	0
  2363   000426  E101               	bnz	l4753
  2364   000428  0012               	return	
  2365   00042A                     l4753:
  2366                           
  2367                           ;TAD_MENURECORDINGS.c: 95:             SIO_PutChar('P');
  2368   00042A  0E50               	movlw	80
  2369   00042C  EC39  F00B         	call	_SIO_PutChar
  2370   000430  D7EC               	goto	l4739
  2371   000432                     l4757:
  2372                           
  2373                           ;TAD_MENURECORDINGS.c: 99:             if(!SIO_RXAvailable()) break;
  2374   000432  EC52  F00B         	call	_SIO_RXAvailable	;wreg free
  2375   000436  0900               	iorlw	0
  2376   000438  E101               	bnz	l4761
  2377   00043A  0012               	return	
  2378   00043C                     l4761:
  2379                           
  2380                           ;TAD_MENURECORDINGS.c: 100:             if(SIO_GetChar() == 'K') state++;
  2381   00043C  EC60  F00B         	call	_SIO_GetChar	;wreg free
  2382   000440  0A4B               	xorlw	75
  2383   000442  E0E3               	bz	l4739
  2384   000444  0012               	return	
  2385   000446                     l4765:
  2386                           
  2387                           ;TAD_MENURECORDINGS.c: 103:             if(!SIO_TXAvailable()) break;
  2388   000446  EC4F  F00B         	call	_SIO_TXAvailable	;wreg free
  2389   00044A  0900               	iorlw	0
  2390   00044C  E101               	bnz	l4769
  2391   00044E  0012               	return	
  2392   000450                     l4769:
  2393                           
  2394                           ;TAD_MENURECORDINGS.c: 104:             if(indexSent == 0 && recordings[option].id[index
      +                          Sent] == 0){
  2395   000450  5013               	movf	_indexSent^0,w,c
  2396   000452  E107               	bnz	l4775
  2397   000454  D874               	call	PL16	;call to abstracted procedure
  2398   000456  6ED9               	movwf	fsr2l,c
  2399   000458  6ADA               	clrf	fsr2h,c
  2400   00045A  50DF               	movf	indf2,w,c
  2401   00045C  E102               	bnz	l4775
  2402   00045E                     u3670:
  2403                           
  2404                           ;TAD_MENURECORDINGS.c: 105:                 indexSent++;
  2405   00045E  2A13               	incf	_indexSent^0,f,c
  2406                           
  2407                           ;TAD_MENURECORDINGS.c: 106:             }
  2408   000460  0012               	return	
  2409   000462                     l4775:
  2410   000462  0E02               	movlw	2
  2411   000464  1813               	xorwf	_indexSent^0,w,c
  2412   000466  E104               	bnz	l4781
  2413                           
  2414                           ;TAD_MENURECORDINGS.c: 108:                 SIO_PutChar('\0');
  2415   000468  0E00               	movlw	0
  2416   00046A  EC39  F00B         	call	_SIO_PutChar
  2417   00046E  D7CD               	goto	l4739
  2418   000470                     l4781:
  2419                           
  2420                           ;TAD_MENURECORDINGS.c: 112:                 SIO_PutChar(recordings[option].id[indexSent+
      +                          +] + '0');
  2421   000470  D866               	call	PL16	;call to abstracted procedure
  2422   000472  EC3B  F007         	call	PL10	;call to abstracted procedure
  2423   000476  EC39  F00B         	call	_SIO_PutChar
  2424   00047A  D7F1               	goto	u3670
  2425   00047C                     l4785:
  2426                           
  2427                           ;TAD_MENURECORDINGS.c: 116:             if(SIO_RXAvailable() && SIO_GetChar() == 'F') st
      +                          ate++;
  2428   00047C  EC52  F00B         	call	_SIO_RXAvailable	;wreg free
  2429   000480  0900               	iorlw	0
  2430   000482  E005               	bz	l4791
  2431   000484  EC60  F00B         	call	_SIO_GetChar	;wreg free
  2432   000488  0A46               	xorlw	70
  2433   00048A  E101               	bnz	l4791
  2434   00048C  2A15               	incf	_state@TAD_MENURECORDINGS$F1579^0,f,c
  2435   00048E                     l4791:
  2436                           
  2437                           ;TAD_MENURECORDINGS.c: 117:             indexSent = 0;
  2438   00048E  6A13               	clrf	_indexSent^0,c
  2439                           
  2440                           ;TAD_MENURECORDINGS.c: 118:             BUZZ_PlayMelody();
  2441   000490  EF45  F00A         	goto	_BUZZ_PlayMelody	;wreg free
  2442   000494                     l4795:
  2443                           
  2444                           ;TAD_MENURECORDINGS.c: 121:             if(!LCD_IsAvailable()) break;
  2445   000494  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  2446   000498  0900               	iorlw	0
  2447   00049A  E101               	bnz	l4799
  2448   00049C  0012               	return	
  2449   00049E                     l4799:
  2450                           
  2451                           ;TAD_MENURECORDINGS.c: 122:             LCD_Clear();
  2452   00049E  EC86  F00A         	call	_LCD_Clear	;wreg free
  2453                           
  2454                           ;TAD_MENURECORDINGS.c: 123:             LCD_GotoXY(0, 0);
  2455   0004A2  0E00               	movlw	0
  2456   0004A4  6A6A               	clrf	LCD_GotoXY@Row^0,c
  2457   0004A6  EC48  F007         	call	_LCD_GotoXY
  2458                           
  2459                           ;TAD_MENURECORDINGS.c: 124:             fillStrAux(option);
  2460   0004AA  5014               	movf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2461   0004AC  EC0D  F007         	call	_fillStrAux
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;TAD_MENURECORDINGS.c: 125:             LCD_PutString(strAux);
  2465   0004B0  D84C               	call	PL60	;call to abstracted procedure
  2466   0004B2  ECD6  F00A         	call	_LCD_PutString	;wreg free
  2467                           
  2468                           ;TAD_MENURECORDINGS.c: 126:             JOY_Enable();
  2469   0004B6  EC58  F00B         	call	_JOY_Enable	;wreg free
  2470   0004BA  D7A7               	goto	l4739
  2471   0004BC                     l4807:
  2472                           
  2473                           ;TAD_MENURECORDINGS.c: 130:             if(!LCD_IsAvailable()) break;
  2474   0004BC  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  2475   0004C0  0900               	iorlw	0
  2476   0004C2  E101               	bnz	l4811
  2477   0004C4  0012               	return	
  2478   0004C6                     l4811:
  2479                           
  2480                           ;TAD_MENURECORDINGS.c: 131:             LCD_GotoXY(0, 1);
  2481   0004C6  EC67  F003         	call	PL40	;call to abstracted procedure
  2482   0004CA  EC48  F007         	call	_LCD_GotoXY
  2483                           
  2484                           ;TAD_MENURECORDINGS.c: 132:             if(option < numRecordings-1){
  2485   0004CE  0EFF               	movlw	255
  2486   0004D0  2441               	addwf	_numRecordings^0,w,c
  2487   0004D2  6E71               	movwf	??_MRCD_Motor^0,c
  2488   0004D4  6A72               	clrf	(??_MRCD_Motor+1)^0,c
  2489   0004D6  0EFF               	movlw	255
  2490   0004D8  2272               	addwfc	(??_MRCD_Motor+1)^0,f,c
  2491   0004DA  5014               	movf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2492   0004DC  6E73               	movwf	(??_MRCD_Motor+2)^0,c
  2493   0004DE  6A74               	clrf	(??_MRCD_Motor+3)^0,c
  2494   0004E0  5071               	movf	??_MRCD_Motor^0,w,c
  2495   0004E2  5C73               	subwf	(??_MRCD_Motor+2)^0,w,c
  2496   0004E4  5074               	movf	(??_MRCD_Motor+3)^0,w,c
  2497   0004E6  0A80               	xorlw	128
  2498   0004E8  6E75               	movwf	(??_MRCD_Motor+4)^0,c
  2499   0004EA  5072               	movf	(??_MRCD_Motor+1)^0,w,c
  2500   0004EC  0A80               	xorlw	128
  2501   0004EE  5875               	subwfb	(??_MRCD_Motor+4)^0,w,c
  2502   0004F0  E206               	bc	l4819
  2503                           
  2504                           ;TAD_MENURECORDINGS.c: 133:                 fillStrAux(option+1);
  2505   0004F2  2814               	incf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2506   0004F4  EC0D  F007         	call	_fillStrAux
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;TAD_MENURECORDINGS.c: 134:                 LCD_PutString(strAux);
  2510   0004F8  D828               	call	PL60	;call to abstracted procedure
  2511   0004FA  ECD6  F00A         	call	_LCD_PutString	;wreg free
  2512   0004FE                     l4819:
  2513                           
  2514                           ;TAD_MENURECORDINGS.c: 136:             state = 2;
  2515   0004FE  0E02               	movlw	2
  2516   000500  6E15               	movwf	_state@TAD_MENURECORDINGS$F1579^0,c
  2517                           
  2518                           ;TAD_MENURECORDINGS.c: 137:             break;
  2519   000502  0C02               	retlw	2
  2520   000504                     l4823:
  2521   000504  5015               	movf	_state@TAD_MENURECORDINGS$F1579^0,w,c
  2522   000506  6E71               	movwf	??_MRCD_Motor^0,c
  2523   000508  6A72               	clrf	(??_MRCD_Motor+1)^0,c
  2524                           
  2525                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2526                           ; Switch size 1, requested type "space"
  2527                           ; Number of cases is 1, Range of values is 0 to 0
  2528                           ; switch strategies available:
  2529                           ; Name         Instructions Cycles
  2530                           ; simple_byte            4     3 (average)
  2531                           ;	Chosen strategy is simple_byte
  2532   00050A  5072               	movf	(??_MRCD_Motor+1)^0,w,c
  2533   00050C  A4D8               	btfss	status,2,c
  2534   00050E  0012               	return	
  2535                           
  2536                           ; Switch size 1, requested type "space"
  2537                           ; Number of cases is 9, Range of values is 0 to 8
  2538                           ; switch strategies available:
  2539                           ; Name         Instructions Cycles
  2540                           ; simple_byte           28    15 (average)
  2541                           ;	Chosen strategy is simple_byte
  2542   000510  5071               	movf	??_MRCD_Motor^0,w,c
  2543   000512  B4D8               	btfsc	status,2,c
  2544   000514  0012               	return	
  2545   000516  0A01               	xorlw	1	; case 1
  2546   000518  E101 D752          	bz	l4717
  2547   00051C  0A03               	xorlw	3	; case 2
  2548   00051E  E101 D759          	bz	l4723
  2549   000522  0A01               	xorlw	1	; case 3
  2550   000524  E101 D77C          	bz	l4749
  2551   000528  0A07               	xorlw	7	; case 4
  2552   00052A  E083               	bz	l4757
  2553   00052C  0A01               	xorlw	1	; case 5
  2554   00052E  E08B               	bz	l4765
  2555   000530  0A03               	xorlw	3	; case 6
  2556   000532  E0A4               	bz	l4785
  2557   000534  0A01               	xorlw	1	; case 7
  2558   000536  E0AE               	bz	l4795
  2559   000538  0A0F               	xorlw	15	; case 8
  2560   00053A  E0C0               	bz	l4807
  2561   00053C  0012               	return		;funcret
  2562   00053E                     __end_of_MRCD_Motor:
  2563                           	callstack 0
  2564   00053E                     PL16:
  2565                           	callstack 25
  2566   00053E  5014               	movf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2567   000540  0D06               	mullw	6
  2568   000542  50F3               	movf	243,w,c
  2569   000544  0F80               	addlw	low _recordings
  2570   000546  2413               	addwf	_indexSent^0,w,c
  2571   000548  0012               	return	
  2572   00054A                     __end_ofPL16:
  2573                           	callstack 0
  2574   00054A                     PL60:
  2575                           	callstack 25
  2576   00054A  0EBC               	movlw	low _strAux
  2577   00054C  6E5E               	movwf	LCD_PutString@s^0,c
  2578   00054E  6A5F               	clrf	(LCD_PutString@s+1)^0,c
  2579   000550  0012               	return	
  2580   000552                     __end_ofPL60:
  2581                           	callstack 0
  2582                           
  2583 ;; *************** function _fillStrAux *****************
  2584 ;; Defined at:
  2585 ;;		line 142 in file "TAD_MENURECORDINGS.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  opt             1    wreg     unsigned char 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;  opt             1    0[COMRAM] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 3F/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1
  2599 ;;      Params:         0       0       0
  2600 ;;      Locals:         1       0       0
  2601 ;;      Temps:          0       0       0
  2602 ;;      Totals:         1       0       0
  2603 ;;Total ram usage:        1 bytes
  2604 ;; Hardware stack levels used: 1
  2605 ;; Hardware stack levels required when called: 2
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_MRCD_Motor
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text14
  2614   000E1A                     __ptext14:
  2615                           	callstack 0
  2616   000E1A                     _fillStrAux:
  2617                           	callstack 27
  2618                           
  2619                           ;incstack = 0
  2620                           ;fillStrAux@opt stored from wreg
  2621   000E1A  6E5C               	movwf	fillStrAux@opt^0,c
  2622                           
  2623                           ;TAD_MENURECORDINGS.c: 143:     strAux[0] = 'I';
  2624   000E1C  0E49               	movlw	73
  2625   000E1E  0100               	movlb	0	; () banked
  2626   000E20  6FBC               	movwf	_strAux& (0+255),b
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;TAD_MENURECORDINGS.c: 144:     strAux[1] = recordings[opt].id[0] + '0';
  2630   000E22  505C               	movf	fillStrAux@opt^0,w,c
  2631   000E24  D831               	call	PL36	;call to abstracted procedure
  2632   000E26  D827               	call	PL10	;call to abstracted procedure
  2633   000E28  6FBD               	movwf	(_strAux+1)& (0+255),b
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;TAD_MENURECORDINGS.c: 145:     strAux[2] = recordings[opt].id[1] + '0';
  2637   000E2A  505C               	movf	fillStrAux@opt^0,w,c
  2638   000E2C  D829               	call	PL34	;call to abstracted procedure
  2639   000E2E  D823               	call	PL10	;call to abstracted procedure
  2640   000E30  6FBE               	movwf	(_strAux+2)& (0+255),b
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;TAD_MENURECORDINGS.c: 146:     strAux[3] = ' ';
  2644   000E32  0E20               	movlw	32
  2645   000E34  6FBF               	movwf	(_strAux+3)& (0+255),b
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;TAD_MENURECORDINGS.c: 147:     strAux[4] = '-';
  2649   000E36  0E2D               	movlw	45
  2650   000E38  6FC0               	movwf	(_strAux+4)& (0+255),b
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;TAD_MENURECORDINGS.c: 148:     strAux[5] = ' ';
  2654   000E3A  0E20               	movlw	32
  2655   000E3C  6FC1               	movwf	(_strAux+5)& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;TAD_MENURECORDINGS.c: 149:     strAux[6] = recordings[opt].timestamp[0] + '0';
  2659   000E3E  505C               	movf	fillStrAux@opt^0,w,c
  2660   000E40  0D06               	mullw	6
  2661   000E42  50F3               	movf	243,w,c
  2662   000E44  0F82               	addlw	low (_recordings+2)
  2663   000E46  D817               	call	PL10	;call to abstracted procedure
  2664   000E48  6FC2               	movwf	(_strAux+6)& (0+255),b
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;TAD_MENURECORDINGS.c: 150:     strAux[7] = recordings[opt].timestamp[1] + '0';
  2668   000E4A  505C               	movf	fillStrAux@opt^0,w,c
  2669   000E4C  0D06               	mullw	6
  2670   000E4E  50F3               	movf	243,w,c
  2671   000E50  0F83               	addlw	low (_recordings+3)
  2672   000E52  D811               	call	PL10	;call to abstracted procedure
  2673   000E54  6FC3               	movwf	(_strAux+7)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;TAD_MENURECORDINGS.c: 151:     strAux[8] = ':';
  2677   000E56  0E3A               	movlw	58
  2678   000E58  6FC4               	movwf	(_strAux+8)& (0+255),b
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;TAD_MENURECORDINGS.c: 152:     strAux[9] = recordings[opt].timestamp[2] + '0';
  2682   000E5A  505C               	movf	fillStrAux@opt^0,w,c
  2683   000E5C  0D06               	mullw	6
  2684   000E5E  50F3               	movf	243,w,c
  2685   000E60  0F84               	addlw	low (_recordings+4)
  2686   000E62  D809               	call	PL10	;call to abstracted procedure
  2687   000E64  6FC5               	movwf	(_strAux+9)& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;TAD_MENURECORDINGS.c: 153:     strAux[10] = recordings[opt].timestamp[3] + '0';
  2691   000E66  505C               	movf	fillStrAux@opt^0,w,c
  2692   000E68  0D06               	mullw	6
  2693   000E6A  50F3               	movf	243,w,c
  2694   000E6C  0F85               	addlw	low (_recordings+5)
  2695   000E6E  D803               	call	PL10	;call to abstracted procedure
  2696   000E70  6FC6               	movwf	(_strAux+10)& (0+255),b
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;TAD_MENURECORDINGS.c: 154:     strAux[11] = '\0';
  2700   000E72  6BC7               	clrf	(_strAux+11)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703   000E74  0012               	return		;funcret
  2704   000E76                     __end_of_fillStrAux:
  2705                           	callstack 0
  2706   000E76                     PL10:
  2707                           	callstack 25
  2708   000E76  6ED9               	movwf	fsr2l,c
  2709   000E78  6ADA               	clrf	fsr2h,c
  2710   000E7A  50DF               	movf	indf2,w,c
  2711   000E7C  0F30               	addlw	48
  2712   000E7E  0012               	return	
  2713   000E80                     __end_ofPL10:
  2714                           	callstack 0
  2715   000E80                     PL34:
  2716                           	callstack 27
  2717   000E80  0D06               	mullw	6
  2718   000E82  50F3               	movf	243,w,c
  2719   000E84  0F81               	addlw	low (_recordings+1)
  2720   000E86  0012               	return	
  2721   000E88                     __end_ofPL34:
  2722                           	callstack 0
  2723   000E88                     PL36:
  2724                           	callstack 27
  2725   000E88  0D06               	mullw	6
  2726   000E8A  50F3               	movf	243,w,c
  2727   000E8C  0F80               	addlw	low _recordings
  2728   000E8E  0012               	return	
  2729   000E90                     __end_ofPL36:
  2730                           	callstack 0
  2731                           
  2732 ;; *************** function _MRCD_OptionUp *****************
  2733 ;; Defined at:
  2734 ;;		line 48 in file "TAD_MENURECORDINGS.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1
  2748 ;;      Params:         0       0       0
  2749 ;;      Locals:         0       0       0
  2750 ;;      Temps:          4       0       0
  2751 ;;      Totals:         4       0       0
  2752 ;;Total ram usage:        4 bytes
  2753 ;; Hardware stack levels used: 1
  2754 ;; Hardware stack levels required when called: 2
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_MRCD_Motor
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text15
  2763   001390                     __ptext15:
  2764                           	callstack 0
  2765   001390                     _MRCD_OptionUp:
  2766                           	callstack 27
  2767                           
  2768                           ;TAD_MENURECORDINGS.c: 51:     if(option == numRecordings-1) return;
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;incstack = 0
  2772   001390  5014               	movf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2773   001392  6E5C               	movwf	??_MRCD_OptionUp^0,c
  2774   001394  6A5D               	clrf	(??_MRCD_OptionUp+1)^0,c
  2775   001396  0EFF               	movlw	255
  2776   001398  2441               	addwf	_numRecordings^0,w,c
  2777   00139A  6E5E               	movwf	(??_MRCD_OptionUp+2)^0,c
  2778   00139C  6A5F               	clrf	(??_MRCD_OptionUp+3)^0,c
  2779   00139E  0EFF               	movlw	255
  2780   0013A0  225F               	addwfc	(??_MRCD_OptionUp+3)^0,f,c
  2781   0013A2  505C               	movf	??_MRCD_OptionUp^0,w,c
  2782   0013A4  185E               	xorwf	(??_MRCD_OptionUp+2)^0,w,c
  2783   0013A6  E104               	bnz	l3773
  2784   0013A8  505D               	movf	(??_MRCD_OptionUp+1)^0,w,c
  2785   0013AA  185F               	xorwf	(??_MRCD_OptionUp+3)^0,w,c
  2786   0013AC  E101               	bnz	l3773
  2787   0013AE  0012               	return	
  2788   0013B0                     l3773:
  2789                           
  2790                           ;TAD_MENURECORDINGS.c: 52:     state = 7;
  2791   0013B0  0E07               	movlw	7
  2792   0013B2  6E15               	movwf	_state@TAD_MENURECORDINGS$F1579^0,c
  2793                           
  2794                           ;TAD_MENURECORDINGS.c: 53:     option++;
  2795   0013B4  2A14               	incf	_option@TAD_MENURECORDINGS$F1580^0,f,c
  2796   0013B6  0C07               	retlw	7	;funcret
  2797   0013B8                     __end_of_MRCD_OptionUp:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function _MRCD_OptionDown *****************
  2801 ;; Defined at:
  2802 ;;		line 56 in file "TAD_MENURECORDINGS.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2, status,0
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1
  2816 ;;      Params:         0       0       0
  2817 ;;      Locals:         0       0       0
  2818 ;;      Temps:          0       0       0
  2819 ;;      Totals:         0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used: 1
  2822 ;; Hardware stack levels required when called: 2
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_MRCD_Motor
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text16
  2831   0015BC                     __ptext16:
  2832                           	callstack 0
  2833   0015BC                     _MRCD_OptionDown:
  2834                           	callstack 27
  2835                           
  2836                           ;TAD_MENURECORDINGS.c: 59:     if(option == 0) return;
  2837                           
  2838                           ;incstack = 0
  2839   0015BC  5014               	movf	_option@TAD_MENURECORDINGS$F1580^0,w,c
  2840   0015BE  E101               	bnz	l3781
  2841   0015C0  0012               	return	
  2842   0015C2                     l3781:
  2843                           
  2844                           ;TAD_MENURECORDINGS.c: 60:     state = 7;
  2845   0015C2  0E07               	movlw	7
  2846   0015C4  6E15               	movwf	_state@TAD_MENURECORDINGS$F1579^0,c
  2847                           
  2848                           ;TAD_MENURECORDINGS.c: 61:     option--;
  2849   0015C6  0614               	decf	_option@TAD_MENURECORDINGS$F1580^0,f,c
  2850   0015C8  0C07               	retlw	7	;funcret
  2851   0015CA                     __end_of_MRCD_OptionDown:
  2852                           	callstack 0
  2853                           
  2854 ;; *************** function _MRCD_Init *****************
  2855 ;; Defined at:
  2856 ;;		line 23 in file "TAD_MENURECORDINGS.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;		None
  2859 ;; Auto vars:     Size  Location     Type
  2860 ;;		None
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      void 
  2863 ;; Registers used:
  2864 ;;		None
  2865 ;; Tracked objects:
  2866 ;;		On entry : 0/0
  2867 ;;		On exit  : 0/0
  2868 ;;		Unchanged: 0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1
  2870 ;;      Params:         0       0       0
  2871 ;;      Locals:         0       0       0
  2872 ;;      Temps:          0       0       0
  2873 ;;      Totals:         0       0       0
  2874 ;;Total ram usage:        0 bytes
  2875 ;; Hardware stack levels used: 1
  2876 ;; Hardware stack levels required when called: 2
  2877 ;; This function calls:
  2878 ;;		Nothing
  2879 ;; This function is called by:
  2880 ;;		_main
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	text17
  2885   0016BC                     __ptext17:
  2886                           	callstack 0
  2887   0016BC                     _MRCD_Init:
  2888                           	callstack 28
  2889                           
  2890                           ;TAD_MENURECORDINGS.c: 26:     state = 0;
  2891                           
  2892                           ;incstack = 0
  2893   0016BC  6A15               	clrf	_state@TAD_MENURECORDINGS$F1579^0,c
  2894   0016BE  0012               	return		;funcret
  2895   0016C0                     __end_of_MRCD_Init:
  2896                           	callstack 0
  2897                           
  2898 ;; *************** function _MQ_Motor *****************
  2899 ;; Defined at:
  2900 ;;		line 48 in file "TAD_MARQUESINA.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;		None
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1
  2914 ;;      Params:         0       0       0
  2915 ;;      Locals:         0       0       0
  2916 ;;      Temps:          2       0       0
  2917 ;;      Totals:         2       0       0
  2918 ;;Total ram usage:        2 bytes
  2919 ;; Hardware stack levels used: 1
  2920 ;; Hardware stack levels required when called: 5
  2921 ;; This function calls:
  2922 ;;		_LCD_Clear
  2923 ;;		_LCD_GotoXY
  2924 ;;		_LCD_IsAvailable
  2925 ;;		_LCD_PutString
  2926 ;;		_TI_GetTics
  2927 ;;		_TI_ResetTics
  2928 ;; This function is called by:
  2929 ;;		_main
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text18
  2934   0006D4                     __ptext18:
  2935                           	callstack 0
  2936   0006D4                     _MQ_Motor:
  2937                           	callstack 25
  2938                           
  2939                           ;TAD_MARQUESINA.c: 51:     switch(state){
  2940                           
  2941                           ;incstack = 0
  2942   0006D4  D08E               	goto	l4563
  2943   0006D6                     l4487:
  2944                           
  2945                           ;TAD_MARQUESINA.c: 55:             if(TI_GetTics(timer) >= 4000){
  2946   0006D6  5055               	movf	_timer^0,w,c
  2947   0006D8  EC84  F008         	call	_TI_GetTics
  2948   0006DC  505F               	movf	(?_TI_GetTics+3)^0,w,c
  2949   0006DE  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  2950   0006E0  E104               	bnz	u3270
  2951   0006E2  ECDA  F001         	call	PL44	;call to abstracted procedure
  2952   0006E6  A0D8               	btfss	status,0,c
  2953   0006E8  0012               	return	
  2954   0006EA                     u3270:
  2955                           
  2956                           ;TAD_MARQUESINA.c: 56:                 TI_ResetTics(timer);
  2957   0006EA  5055               	movf	_timer^0,w,c
  2958   0006EC  EC27  F00A         	call	_TI_ResetTics
  2959                           
  2960                           ;TAD_MARQUESINA.c: 57:                 LCD_Clear();
  2961   0006F0  EC86  F00A         	call	_LCD_Clear	;wreg free
  2962   0006F4                     l4491:
  2963                           
  2964                           ;TAD_MARQUESINA.c: 58:                 state++;
  2965   0006F4  2A27               	incf	_state@TAD_MARQUESINA$F1253^0,f,c
  2966   0006F6  0012               	return	
  2967   0006F8                     l4493:
  2968                           
  2969                           ;TAD_MARQUESINA.c: 62:             if(!LCD_IsAvailable()) break;
  2970   0006F8  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  2971   0006FC  0900               	iorlw	0
  2972   0006FE  E101               	bnz	l4497
  2973   000700  0012               	return	
  2974   000702                     l4497:
  2975                           
  2976                           ;TAD_MARQUESINA.c: 63:             if(strL1 != ((void*)0)){
  2977   000702  500D               	movf	_strL1^0,w,c
  2978   000704  100E               	iorwf	(_strL1+1)^0,w,c
  2979   000706  E0F6               	bz	l4491
  2980                           
  2981                           ;TAD_MARQUESINA.c: 64:                 if(indexL1 > biggerSize) indexL1 = 0;
  2982   000708  5026               	movf	_indexL1^0,w,c
  2983   00070A  5C22               	subwf	_biggerSize^0,w,c
  2984   00070C  E201               	bc	l4503
  2985   00070E  6A26               	clrf	_indexL1^0,c
  2986   000710                     l4503:
  2987                           
  2988                           ;TAD_MARQUESINA.c: 65:                 LCD_GotoXY(0, 0);
  2989   000710  0E00               	movlw	0
  2990   000712  6A6A               	clrf	LCD_GotoXY@Row^0,c
  2991   000714  EC48  F007         	call	_LCD_GotoXY
  2992                           
  2993                           ;TAD_MARQUESINA.c: 66:                 if(indexL1 <= sizeL1) LCD_PutString(strL1 + index
      +                          L1);
  2994   000718  5026               	movf	_indexL1^0,w,c
  2995   00071A  5C24               	subwf	_sizeL1^0,w,c
  2996   00071C  E308               	bnc	l4509
  2997   00071E  5026               	movf	_indexL1^0,w,c
  2998   000720  240D               	addwf	_strL1^0,w,c
  2999   000722  6E5E               	movwf	LCD_PutString@s^0,c
  3000   000724  0E00               	movlw	0
  3001   000726  200E               	addwfc	(_strL1+1)^0,w,c
  3002   000728  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  3003   00072A  ECD6  F00A         	call	_LCD_PutString	;wreg free
  3004   00072E                     l4509:
  3005                           
  3006                           ;TAD_MARQUESINA.c: 67:                 indexL1++;
  3007   00072E  2A26               	incf	_indexL1^0,f,c
  3008   000730  D7E1               	goto	l4491
  3009   000732                     l4513:
  3010                           
  3011                           ;TAD_MARQUESINA.c: 72:             if(!LCD_IsAvailable()) break;
  3012   000732  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  3013   000736  0900               	iorlw	0
  3014   000738  E101               	bnz	l4517
  3015   00073A  0012               	return	
  3016   00073C                     l4517:
  3017                           
  3018                           ;TAD_MARQUESINA.c: 73:             if(strL1 != ((void*)0) && sizeL1 - indexL1 < 16){
  3019   00073C  500D               	movf	_strL1^0,w,c
  3020   00073E  100E               	iorwf	(_strL1+1)^0,w,c
  3021   000740  E0D9               	bz	l4491
  3022   000742  5026               	movf	_indexL1^0,w,c
  3023   000744  C024  F071         	movff	_sizeL1,??_MQ_Motor
  3024   000748  D86A               	call	PL48	;call to abstracted procedure
  3025   00074A  BE72               	btfsc	(??_MQ_Motor+1)^0,7,c
  3026   00074C  D005               	goto	u3340
  3027   00074E  5072               	movf	(??_MQ_Motor+1)^0,w,c
  3028   000750  E1D1               	bnz	l4491
  3029   000752  0E10               	movlw	16
  3030   000754  5C71               	subwf	??_MQ_Motor^0,w,c
  3031   000756  E2CE               	bc	l4491
  3032   000758                     u3340:
  3033                           
  3034                           ;TAD_MARQUESINA.c: 74:                 LCD_GotoXY((biggerSize-indexL1) + 2, 0);
  3035   000758  6A6A               	clrf	LCD_GotoXY@Row^0,c
  3036   00075A  5026               	movf	_indexL1^0,w,c
  3037   00075C  5C22               	subwf	_biggerSize^0,w,c
  3038   00075E  0F02               	addlw	2
  3039   000760  EC48  F007         	call	_LCD_GotoXY
  3040                           
  3041                           ;TAD_MARQUESINA.c: 75:                 LCD_PutString(strL1);
  3042   000764  C00D  F05E         	movff	_strL1,LCD_PutString@s
  3043   000768  C00E  F05F         	movff	_strL1+1,LCD_PutString@s+1
  3044   00076C  ECD6  F00A         	call	_LCD_PutString	;wreg free
  3045   000770  D7C1               	goto	l4491
  3046   000772                     l4527:
  3047                           
  3048                           ;TAD_MARQUESINA.c: 80:             if(!LCD_IsAvailable()) break;
  3049   000772  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  3050   000776  0900               	iorlw	0
  3051   000778  E101               	bnz	l4531
  3052   00077A  0012               	return	
  3053   00077C                     l4531:
  3054                           
  3055                           ;TAD_MARQUESINA.c: 81:             if(strL2 != ((void*)0)){
  3056   00077C  500B               	movf	_strL2^0,w,c
  3057   00077E  100C               	iorwf	(_strL2+1)^0,w,c
  3058   000780  E0B9               	bz	l4491
  3059                           
  3060                           ;TAD_MARQUESINA.c: 82:                 if(indexL2 > biggerSize) indexL2 = 0;
  3061   000782  5025               	movf	_indexL2^0,w,c
  3062   000784  5C22               	subwf	_biggerSize^0,w,c
  3063   000786  E201               	bc	l4537
  3064   000788  6A25               	clrf	_indexL2^0,c
  3065   00078A                     l4537:
  3066                           
  3067                           ;TAD_MARQUESINA.c: 83:                 LCD_GotoXY(0, 1);
  3068   00078A  EC67  F003         	call	PL40	;call to abstracted procedure
  3069   00078E  EC48  F007         	call	_LCD_GotoXY
  3070                           
  3071                           ;TAD_MARQUESINA.c: 84:                 if(indexL2 <= sizeL2) LCD_PutString(strL2 + index
      +                          L2);
  3072   000792  5025               	movf	_indexL2^0,w,c
  3073   000794  5C23               	subwf	_sizeL2^0,w,c
  3074   000796  E308               	bnc	l4543
  3075   000798  5025               	movf	_indexL2^0,w,c
  3076   00079A  240B               	addwf	_strL2^0,w,c
  3077   00079C  6E5E               	movwf	LCD_PutString@s^0,c
  3078   00079E  0E00               	movlw	0
  3079   0007A0  200C               	addwfc	(_strL2+1)^0,w,c
  3080   0007A2  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  3081   0007A4  ECD6  F00A         	call	_LCD_PutString	;wreg free
  3082   0007A8                     l4543:
  3083                           
  3084                           ;TAD_MARQUESINA.c: 85:                 indexL2++;
  3085   0007A8  2A25               	incf	_indexL2^0,f,c
  3086   0007AA  D7A4               	goto	l4491
  3087   0007AC                     l4547:
  3088                           
  3089                           ;TAD_MARQUESINA.c: 90:             if(!LCD_IsAvailable()) break;
  3090   0007AC  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  3091   0007B0  0900               	iorlw	0
  3092   0007B2  E101               	bnz	l4551
  3093   0007B4  0012               	return	
  3094   0007B6                     l4551:
  3095                           
  3096                           ;TAD_MARQUESINA.c: 91:             if(strL2 != ((void*)0) && sizeL2 - indexL2 < 16){
  3097   0007B6  500B               	movf	_strL2^0,w,c
  3098   0007B8  100C               	iorwf	(_strL2+1)^0,w,c
  3099   0007BA  E018               	bz	l4559
  3100   0007BC  5025               	movf	_indexL2^0,w,c
  3101   0007BE  C023  F071         	movff	_sizeL2,??_MQ_Motor
  3102   0007C2  D82D               	call	PL48	;call to abstracted procedure
  3103   0007C4  BE72               	btfsc	(??_MQ_Motor+1)^0,7,c
  3104   0007C6  D005               	goto	u3410
  3105   0007C8  5072               	movf	(??_MQ_Motor+1)^0,w,c
  3106   0007CA  E110               	bnz	l4559
  3107   0007CC  0E10               	movlw	16
  3108   0007CE  5C71               	subwf	??_MQ_Motor^0,w,c
  3109   0007D0  E20D               	bc	l4559
  3110   0007D2                     u3410:
  3111                           
  3112                           ;TAD_MARQUESINA.c: 92:                 LCD_GotoXY((biggerSize-indexL2) + 2, 1);
  3113   0007D2  0E01               	movlw	1
  3114   0007D4  6E6A               	movwf	LCD_GotoXY@Row^0,c
  3115   0007D6  5025               	movf	_indexL2^0,w,c
  3116   0007D8  5C22               	subwf	_biggerSize^0,w,c
  3117   0007DA  0F02               	addlw	2
  3118   0007DC  EC48  F007         	call	_LCD_GotoXY
  3119                           
  3120                           ;TAD_MARQUESINA.c: 93:                 LCD_PutString(strL2);
  3121   0007E0  C00B  F05E         	movff	_strL2,LCD_PutString@s
  3122   0007E4  C00C  F05F         	movff	_strL2+1,LCD_PutString@s+1
  3123   0007E8  ECD6  F00A         	call	_LCD_PutString	;wreg free
  3124   0007EC                     l4559:
  3125                           
  3126                           ;TAD_MARQUESINA.c: 95:             state = 1;
  3127   0007EC  0E01               	movlw	1
  3128   0007EE  6E27               	movwf	_state@TAD_MARQUESINA$F1253^0,c
  3129                           
  3130                           ;TAD_MARQUESINA.c: 96:             break;
  3131   0007F0  0C01               	retlw	1
  3132   0007F2                     l4563:
  3133   0007F2  5027               	movf	_state@TAD_MARQUESINA$F1253^0,w,c
  3134   0007F4  6E71               	movwf	??_MQ_Motor^0,c
  3135   0007F6  6A72               	clrf	(??_MQ_Motor+1)^0,c
  3136                           
  3137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3138                           ; Switch size 1, requested type "space"
  3139                           ; Number of cases is 1, Range of values is 0 to 0
  3140                           ; switch strategies available:
  3141                           ; Name         Instructions Cycles
  3142                           ; simple_byte            4     3 (average)
  3143                           ;	Chosen strategy is simple_byte
  3144   0007F8  5072               	movf	(??_MQ_Motor+1)^0,w,c
  3145   0007FA  A4D8               	btfss	status,2,c
  3146   0007FC  0012               	return	
  3147                           
  3148                           ; Switch size 1, requested type "space"
  3149                           ; Number of cases is 6, Range of values is 0 to 5
  3150                           ; switch strategies available:
  3151                           ; Name         Instructions Cycles
  3152                           ; simple_byte           19    10 (average)
  3153                           ;	Chosen strategy is simple_byte
  3154   0007FE  5071               	movf	??_MQ_Motor^0,w,c
  3155   000800  B4D8               	btfsc	status,2,c
  3156   000802  0012               	return	
  3157   000804  0A01               	xorlw	1	; case 1
  3158   000806  E101 D766          	bz	l4487
  3159   00080A  0A03               	xorlw	3	; case 2
  3160   00080C  E101 D774          	bz	l4493
  3161   000810  0A01               	xorlw	1	; case 3
  3162   000812  E08F               	bz	l4513
  3163   000814  0A07               	xorlw	7	; case 4
  3164   000816  E0AD               	bz	l4527
  3165   000818  0A01               	xorlw	1	; case 5
  3166   00081A  E0C8               	bz	l4547
  3167   00081C  0012               	return		;funcret
  3168   00081E                     __end_of_MQ_Motor:
  3169                           	callstack 0
  3170   00081E                     PL48:
  3171                           	callstack 25
  3172   00081E  6A72               	clrf	(??_MQ_Motor+1)^0,c
  3173   000820  5E71               	subwf	??_MQ_Motor^0,f,c
  3174   000822  0E00               	movlw	0
  3175   000824  5A72               	subwfb	(??_MQ_Motor+1)^0,f,c
  3176   000826  0C00               	retlw	0
  3177   000828                     __end_ofPL48:
  3178                           	callstack 0
  3179                           
  3180 ;; *************** function _MQ_Init *****************
  3181 ;; Defined at:
  3182 ;;		line 18 in file "TAD_MARQUESINA.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1
  3196 ;;      Params:         0       0       0
  3197 ;;      Locals:         0       0       0
  3198 ;;      Temps:          0       0       0
  3199 ;;      Totals:         0       0       0
  3200 ;;Total ram usage:        0 bytes
  3201 ;; Hardware stack levels used: 1
  3202 ;; Hardware stack levels required when called: 3
  3203 ;; This function calls:
  3204 ;;		_MQ_Clear
  3205 ;;		_TI_NewTimer
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text19
  3212   001600                     __ptext19:
  3213                           	callstack 0
  3214   001600                     _MQ_Init:
  3215                           	callstack 27
  3216                           
  3217                           ;TAD_MARQUESINA.c: 19:     TI_NewTimer(&timer);
  3218                           
  3219                           ;incstack = 0
  3220   001600  0E55               	movlw	low _timer
  3221   001602  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  3222   001604  EC21  F009         	call	_TI_NewTimer	;wreg free
  3223                           
  3224                           ;TAD_MARQUESINA.c: 20:     MQ_Clear();
  3225   001608  EF0C  F00B         	goto	_MQ_Clear	;wreg free
  3226   00160C                     __end_of_MQ_Init:
  3227                           	callstack 0
  3228                           
  3229 ;; *************** function _MICRO_Motor *****************
  3230 ;; Defined at:
  3231 ;;		line 37 in file "TAD_MICRO.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;		None
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1
  3245 ;;      Params:         0       0       0
  3246 ;;      Locals:         0       0       0
  3247 ;;      Temps:          2       0       0
  3248 ;;      Totals:         2       0       0
  3249 ;;Total ram usage:        2 bytes
  3250 ;; Hardware stack levels used: 1
  3251 ;; Hardware stack levels required when called: 5
  3252 ;; This function calls:
  3253 ;;		_BUZZ_PlayMelody
  3254 ;;		_CNT_GetTime
  3255 ;;		_CNT_GetTimeArr
  3256 ;;		_MENU_Mostrar
  3257 ;;		_SAVE_PutRecording
  3258 ;;		_SIO_GetChar
  3259 ;;		_SIO_PutChar
  3260 ;;		_SIO_RXAvailable
  3261 ;;		_SIO_TXAvailable
  3262 ;;		_TI_GetTics
  3263 ;;		_TI_ResetTics
  3264 ;; This function is called by:
  3265 ;;		_main
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text20
  3270   000B12                     __ptext20:
  3271                           	callstack 0
  3272   000B12                     _MICRO_Motor:
  3273                           	callstack 25
  3274                           
  3275                           ;TAD_MICRO.c: 40:     switch(state){
  3276                           
  3277                           ;incstack = 0
  3278   000B12  D056               	goto	l4479
  3279   000B14                     l4413:
  3280                           
  3281                           ;TAD_MICRO.c: 44:             if(!SIO_RXAvailable()) break;
  3282   000B14  EC52  F00B         	call	_SIO_RXAvailable	;wreg free
  3283   000B18  0900               	iorlw	0
  3284   000B1A  E101               	bnz	l4417
  3285   000B1C  0012               	return	
  3286   000B1E                     l4417:
  3287                           
  3288                           ;TAD_MICRO.c: 45:             newID[indexAux++] = SIO_GetChar();
  3289   000B1E  5019               	movf	_indexAux^0,w,c
  3290   000B20  0F50               	addlw	low _newID
  3291   000B22  6ED9               	movwf	fsr2l,c
  3292   000B24  6ADA               	clrf	fsr2h,c
  3293   000B26  EC60  F00B         	call	_SIO_GetChar	;wreg free
  3294   000B2A  6EDF               	movwf	indf2,c
  3295   000B2C  2A19               	incf	_indexAux^0,f,c
  3296                           
  3297                           ;TAD_MICRO.c: 46:             if(indexAux == 2){
  3298   000B2E  0E02               	movlw	2
  3299   000B30  1819               	xorwf	_indexAux^0,w,c
  3300   000B32  A4D8               	btfss	status,2,c
  3301   000B34  0012               	return	
  3302                           
  3303                           ;TAD_MICRO.c: 47:                 indexAux = 0;
  3304   000B36  6A19               	clrf	_indexAux^0,c
  3305                           
  3306                           ;TAD_MICRO.c: 48:                 state++;
  3307   000B38  2A1A               	incf	_state@TAD_MICRO$F1460^0,f,c
  3308                           
  3309                           ;TAD_MICRO.c: 49:                 SAVE_PutRecording(newID, CNT_GetTimeArr());
  3310   000B3A  0E50               	movlw	low _newID
  3311   000B3C  6E5E               	movwf	SAVE_PutRecording@id^0,c
  3312   000B3E  EC62  F00B         	call	_CNT_GetTimeArr	;wreg free
  3313   000B42  6E5F               	movwf	SAVE_PutRecording@timestamp^0,c
  3314   000B44  EF4D  F006         	goto	_SAVE_PutRecording	;wreg free
  3315   000B48                     l4429:
  3316                           
  3317                           ;TAD_MICRO.c: 53:             if(!SIO_TXAvailable()) break;
  3318   000B48  EC4F  F00B         	call	_SIO_TXAvailable	;wreg free
  3319   000B4C  0900               	iorlw	0
  3320   000B4E  E101               	bnz	l4433
  3321   000B50  0012               	return	
  3322   000B52                     l4433:
  3323                           
  3324                           ;TAD_MICRO.c: 54:             SIO_PutChar(CNT_GetTime(indexAux) + '0');
  3325   000B52  5019               	movf	_indexAux^0,w,c
  3326   000B54  ECE5  F00A         	call	_CNT_GetTime
  3327   000B58  0F30               	addlw	48
  3328   000B5A  EC39  F00B         	call	_SIO_PutChar
  3329                           
  3330                           ;TAD_MICRO.c: 55:             indexAux++;
  3331   000B5E  2A19               	incf	_indexAux^0,f,c
  3332                           
  3333                           ;TAD_MICRO.c: 56:             if(indexAux == 4) state++;
  3334   000B60  0E04               	movlw	4
  3335   000B62  1819               	xorwf	_indexAux^0,w,c
  3336   000B64  A4D8               	btfss	status,2,c
  3337   000B66  0012               	return	
  3338   000B68                     u3220:
  3339   000B68  2A1A               	incf	_state@TAD_MICRO$F1460^0,f,c
  3340   000B6A  0012               	return	
  3341   000B6C                     l4441:
  3342                           
  3343                           ;TAD_MICRO.c: 59:             if(!SIO_TXAvailable()) break;
  3344   000B6C  EC4F  F00B         	call	_SIO_TXAvailable	;wreg free
  3345   000B70  0900               	iorlw	0
  3346   000B72  E1FA               	bnz	u3220
  3347   000B74  0012               	return	
  3348   000B76                     l4447:
  3349                           
  3350                           ;TAD_MICRO.c: 63:             ADCON0bits.CHS = 1;
  3351   000B76  50C2               	movf	194,w,c	;volatile
  3352   000B78  0BC3               	andlw	-61
  3353   000B7A  0904               	iorlw	4
  3354   000B7C  6EC2               	movwf	194,c	;volatile
  3355                           
  3356                           ;TAD_MICRO.c: 64:             ADCON0bits.ADON = 1;
  3357   000B7E  80C2               	bsf	194,0,c	;volatile
  3358                           
  3359                           ;TAD_MICRO.c: 65:             ADCON0bits.GO = 1;
  3360   000B80  82C2               	bsf	194,1,c	;volatile
  3361                           
  3362                           ;TAD_MICRO.c: 66:             state++;
  3363   000B82  2A1A               	incf	_state@TAD_MICRO$F1460^0,f,c
  3364                           
  3365                           ;TAD_MICRO.c: 67:             TI_ResetTics(txTimer);
  3366   000B84  5052               	movf	_txTimer^0,w,c
  3367   000B86  EF27  F00A         	goto	_TI_ResetTics
  3368   000B8A                     l949:
  3369                           
  3370                           ;TAD_MICRO.c: 70:             if(ADCON0bits.GO) break;
  3371   000B8A  B2C2               	btfsc	194,1,c	;volatile
  3372   000B8C  0012               	return	
  3373                           
  3374                           ;TAD_MICRO.c: 71:             ADCON0bits.ADON = 0;
  3375   000B8E  90C2               	bcf	194,0,c	;volatile
  3376                           
  3377                           ;TAD_MICRO.c: 72:             if(TI_GetTics(txTimer) < 1) break;
  3378   000B90  5052               	movf	_txTimer^0,w,c
  3379   000B92  EC84  F008         	call	_TI_GetTics
  3380   000B96  EC1C  F009         	call	PL50	;call to abstracted procedure
  3381   000B9A  E101               	bnz	l4463
  3382   000B9C  0012               	return	
  3383   000B9E                     l4463:
  3384                           
  3385                           ;TAD_MICRO.c: 73:             SIO_PutChar(ADRESH);
  3386   000B9E  50C4               	movf	196,w,c	;volatile
  3387   000BA0  EC39  F00B         	call	_SIO_PutChar
  3388                           
  3389                           ;TAD_MICRO.c: 74:             sentSamples++;
  3390   000BA4  4A09               	infsnz	_sentSamples^0,f,c
  3391   000BA6  2A0A               	incf	(_sentSamples+1)^0,f,c
  3392                           
  3393                           ;TAD_MICRO.c: 75:             if(sentSamples >= 32770){
  3394   000BA8  0E02               	movlw	2
  3395   000BAA  5C09               	subwf	_sentSamples^0,w,c
  3396   000BAC  0E80               	movlw	128
  3397   000BAE  580A               	subwfb	(_sentSamples+1)^0,w,c
  3398   000BB0  E305               	bnc	l4475
  3399                           
  3400                           ;TAD_MICRO.c: 76:                 state = 0;
  3401   000BB2  6A1A               	clrf	_state@TAD_MICRO$F1460^0,c
  3402                           
  3403                           ;TAD_MICRO.c: 77:                 BUZZ_PlayMelody();
  3404   000BB4  EC45  F00A         	call	_BUZZ_PlayMelody	;wreg free
  3405                           
  3406                           ;TAD_MICRO.c: 78:                 MENU_Mostrar();
  3407   000BB8  EFA8  F00A         	goto	_MENU_Mostrar	;wreg free
  3408   000BBC                     l4475:
  3409                           
  3410                           ;TAD_MICRO.c: 81:             state--;
  3411   000BBC  061A               	decf	_state@TAD_MICRO$F1460^0,f,c
  3412                           
  3413                           ;TAD_MICRO.c: 82:             break;
  3414   000BBE  0012               	return	
  3415   000BC0                     l4479:
  3416   000BC0  501A               	movf	_state@TAD_MICRO$F1460^0,w,c
  3417   000BC2  6E69               	movwf	??_MICRO_Motor^0,c
  3418   000BC4  6A6A               	clrf	(??_MICRO_Motor+1)^0,c
  3419                           
  3420                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3421                           ; Switch size 1, requested type "space"
  3422                           ; Number of cases is 1, Range of values is 0 to 0
  3423                           ; switch strategies available:
  3424                           ; Name         Instructions Cycles
  3425                           ; simple_byte            4     3 (average)
  3426                           ;	Chosen strategy is simple_byte
  3427   000BC6  506A               	movf	(??_MICRO_Motor+1)^0,w,c
  3428   000BC8  A4D8               	btfss	status,2,c
  3429   000BCA  0012               	return	
  3430                           
  3431                           ; Switch size 1, requested type "space"
  3432                           ; Number of cases is 6, Range of values is 0 to 5
  3433                           ; switch strategies available:
  3434                           ; Name         Instructions Cycles
  3435                           ; simple_byte           19    10 (average)
  3436                           ;	Chosen strategy is simple_byte
  3437   000BCC  5069               	movf	??_MICRO_Motor^0,w,c
  3438   000BCE  B4D8               	btfsc	status,2,c
  3439   000BD0  0012               	return	
  3440   000BD2  0A01               	xorlw	1	; case 1
  3441   000BD4  E09F               	bz	l4413
  3442   000BD6  0A03               	xorlw	3	; case 2
  3443   000BD8  E0B7               	bz	l4429
  3444   000BDA  0A01               	xorlw	1	; case 3
  3445   000BDC  E0C7               	bz	l4441
  3446   000BDE  0A07               	xorlw	7	; case 4
  3447   000BE0  E0CA               	bz	l4447
  3448   000BE2  0A01               	xorlw	1	; case 5
  3449   000BE4  E0D2               	bz	l949
  3450   000BE6  0012               	return		;funcret
  3451   000BE8                     __end_of_MICRO_Motor:
  3452                           	callstack 0
  3453                           
  3454 ;; *************** function _SIO_TXAvailable *****************
  3455 ;; Defined at:
  3456 ;;		line 32 in file "TAD_SIO.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;		None
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      unsigned char 
  3463 ;; Registers used:
  3464 ;;		wreg
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1
  3470 ;;      Params:         0       0       0
  3471 ;;      Locals:         0       0       0
  3472 ;;      Temps:          0       0       0
  3473 ;;      Totals:         0       0       0
  3474 ;;Total ram usage:        0 bytes
  3475 ;; Hardware stack levels used: 1
  3476 ;; Hardware stack levels required when called: 2
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_PORT_Motor
  3481 ;;		_MICRO_Motor
  3482 ;;		_MRCD_Motor
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text21
  3487   00169E                     __ptext21:
  3488                           	callstack 0
  3489   00169E                     _SIO_TXAvailable:
  3490                           	callstack 27
  3491                           
  3492                           ;TAD_SIO.c: 34:     return PIR1bits.TXIF == 1;
  3493                           
  3494                           ;incstack = 0
  3495   00169E  B89E               	btfsc	158,4,c	;volatile
  3496   0016A0  0C01               	retlw	1
  3497   0016A2  0C00               	retlw	0	;funcret
  3498   0016A4                     __end_of_SIO_TXAvailable:
  3499                           	callstack 0
  3500                           
  3501 ;; *************** function _SIO_RXAvailable *****************
  3502 ;; Defined at:
  3503 ;;		line 21 in file "TAD_SIO.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;		None
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;		None
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  1    wreg      unsigned char 
  3510 ;; Registers used:
  3511 ;;		wreg
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1
  3517 ;;      Params:         0       0       0
  3518 ;;      Locals:         0       0       0
  3519 ;;      Temps:          0       0       0
  3520 ;;      Totals:         0       0       0
  3521 ;;Total ram usage:        0 bytes
  3522 ;; Hardware stack levels used: 1
  3523 ;; Hardware stack levels required when called: 2
  3524 ;; This function calls:
  3525 ;;		Nothing
  3526 ;; This function is called by:
  3527 ;;		_PORT_Motor
  3528 ;;		_MICRO_Motor
  3529 ;;		_MRCD_Motor
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text22
  3534   0016A4                     __ptext22:
  3535                           	callstack 0
  3536   0016A4                     _SIO_RXAvailable:
  3537                           	callstack 27
  3538                           
  3539                           ;TAD_SIO.c: 23:     return PIR1bits.RCIF == 1;
  3540                           
  3541                           ;incstack = 0
  3542   0016A4  BA9E               	btfsc	158,5,c	;volatile
  3543   0016A6  0C01               	retlw	1
  3544   0016A8  0C00               	retlw	0	;funcret
  3545   0016AA                     __end_of_SIO_RXAvailable:
  3546                           	callstack 0
  3547                           
  3548 ;; *************** function _SIO_GetChar *****************
  3549 ;; Defined at:
  3550 ;;		line 26 in file "TAD_SIO.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      unsigned char 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1
  3564 ;;      Params:         0       0       0
  3565 ;;      Locals:         0       0       0
  3566 ;;      Temps:          0       0       0
  3567 ;;      Totals:         0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used: 1
  3570 ;; Hardware stack levels required when called: 2
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_PORT_Motor
  3575 ;;		_MICRO_Motor
  3576 ;;		_MRCD_Motor
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text23
  3581   0016C0                     __ptext23:
  3582                           	callstack 0
  3583   0016C0                     _SIO_GetChar:
  3584                           	callstack 27
  3585                           
  3586                           ;TAD_SIO.c: 29:     return RCREG;
  3587                           
  3588                           ;incstack = 0
  3589   0016C0  50AE               	movf	174,w,c	;volatile
  3590   0016C2  0012               	return		;funcret
  3591   0016C4                     __end_of_SIO_GetChar:
  3592                           	callstack 0
  3593                           
  3594 ;; *************** function _SAVE_PutRecording *****************
  3595 ;; Defined at:
  3596 ;;		line 20 in file "TAD_SAVERECORDINGS.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  id              1    2[COMRAM] PTR unsigned char 
  3599 ;;		 -> newID(2), 
  3600 ;;  timestamp       1    3[COMRAM] PTR unsigned char 
  3601 ;;		 -> time(4), 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;		None
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1
  3613 ;;      Params:         2       0       0
  3614 ;;      Locals:         0       0       0
  3615 ;;      Temps:          0       0       0
  3616 ;;      Totals:         2       0       0
  3617 ;;Total ram usage:        2 bytes
  3618 ;; Hardware stack levels used: 1
  3619 ;; Hardware stack levels required when called: 2
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_MICRO_Motor
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text24
  3628   000C9A                     __ptext24:
  3629                           	callstack 0
  3630   000C9A                     _SAVE_PutRecording:
  3631                           	callstack 27
  3632                           
  3633                           ;TAD_SAVERECORDINGS.c: 23:     if(numRecordings >= 10) return;
  3634                           
  3635                           ;incstack = 0
  3636   000C9A  0E09               	movlw	9
  3637   000C9C  6441               	cpfsgt	_numRecordings^0,c
  3638   000C9E  D001               	goto	l3763
  3639   000CA0  0C09               	retlw	9
  3640   000CA2                     l3763:
  3641                           
  3642                           ;TAD_SAVERECORDINGS.c: 26:     recordings[numRecordings].id[0] = id[0] - '0';
  3643   000CA2  5041               	movf	_numRecordings^0,w,c
  3644   000CA4  EC44  F007         	call	PL36	;call to abstracted procedure
  3645   000CA8  D830               	call	PL38	;call to abstracted procedure
  3646   000CAA  50E7               	movf	indf1,w,c
  3647   000CAC  0FD0               	addlw	208
  3648   000CAE  6EDF               	movwf	indf2,c
  3649                           
  3650                           ;TAD_SAVERECORDINGS.c: 27:     recordings[numRecordings].id[1] = id[1] - '0';
  3651   000CB0  5041               	movf	_numRecordings^0,w,c
  3652   000CB2  EC40  F007         	call	PL34	;call to abstracted procedure
  3653   000CB6  D829               	call	PL38	;call to abstracted procedure
  3654   000CB8  2AE1               	incf	fsr1l,f,c
  3655   000CBA  50E7               	movf	indf1,w,c
  3656   000CBC  0FD0               	addlw	208
  3657   000CBE  6EDF               	movwf	indf2,c
  3658                           
  3659                           ;TAD_SAVERECORDINGS.c: 28:     recordings[numRecordings].timestamp[0] = timestamp[0];
  3660   000CC0  505F               	movf	SAVE_PutRecording@timestamp^0,w,c
  3661   000CC2  6ED9               	movwf	fsr2l,c
  3662   000CC4  6ADA               	clrf	fsr2h,c
  3663   000CC6  5041               	movf	_numRecordings^0,w,c
  3664   000CC8  0D06               	mullw	6
  3665   000CCA  50F3               	movf	243,w,c
  3666   000CCC  0F82               	addlw	low (_recordings+2)
  3667                           
  3668                           ;TAD_SAVERECORDINGS.c: 29:     recordings[numRecordings].timestamp[1] = timestamp[1];
  3669   000CCE  D815               	call	PL8	;call to abstracted procedure
  3670   000CD0  2AD9               	incf	fsr2l,f,c
  3671   000CD2  5041               	movf	_numRecordings^0,w,c
  3672   000CD4  0D06               	mullw	6
  3673   000CD6  50F3               	movf	243,w,c
  3674   000CD8  0F83               	addlw	low (_recordings+3)
  3675                           
  3676                           ;TAD_SAVERECORDINGS.c: 30:     recordings[numRecordings].timestamp[2] = timestamp[2];
  3677   000CDA  D80F               	call	PL8	;call to abstracted procedure
  3678   000CDC  0E02               	movlw	2
  3679   000CDE  D81B               	call	PL54	;call to abstracted procedure
  3680   000CE0  0F84               	addlw	low (_recordings+4)
  3681                           
  3682                           ;TAD_SAVERECORDINGS.c: 31:     recordings[numRecordings].timestamp[3] = timestamp[3];
  3683   000CE2  D80B               	call	PL8	;call to abstracted procedure
  3684   000CE4  0E03               	movlw	3
  3685   000CE6  D817               	call	PL54	;call to abstracted procedure
  3686   000CE8  0F85               	addlw	low (_recordings+5)
  3687   000CEA  6EE1               	movwf	fsr1l,c
  3688   000CEC  6AE2               	clrf	fsr1h,c
  3689   000CEE  CFDF FFE7          	movff	indf2,indf1
  3690                           
  3691                           ;TAD_SAVERECORDINGS.c: 32:     state = 5;
  3692   000CF2  0E05               	movlw	5
  3693   000CF4  6E18               	movwf	_state@TAD_SAVERECORDINGS$F1534^0,c
  3694                           
  3695                           ;TAD_SAVERECORDINGS.c: 33:     recordingField = 0;
  3696   000CF6  6A16               	clrf	_recordingField^0,c
  3697   000CF8  0012               	return		;funcret
  3698   000CFA                     __end_of_SAVE_PutRecording:
  3699                           	callstack 0
  3700   000CFA                     PL8:
  3701                           	callstack 27
  3702   000CFA  6EE1               	movwf	fsr1l,c
  3703   000CFC  6AE2               	clrf	fsr1h,c
  3704   000CFE  CFDF FFE7          	movff	indf2,indf1
  3705   000D02  505F               	movf	SAVE_PutRecording@timestamp^0,w,c
  3706   000D04  6ED9               	movwf	fsr2l,c
  3707   000D06  6ADA               	clrf	fsr2h,c
  3708   000D08  0012               	return	
  3709   000D0A                     __end_ofPL8:
  3710                           	callstack 0
  3711   000D0A                     PL38:
  3712                           	callstack 27
  3713   000D0A  6ED9               	movwf	fsr2l,c
  3714   000D0C  6ADA               	clrf	fsr2h,c
  3715   000D0E  505E               	movf	SAVE_PutRecording@id^0,w,c
  3716   000D10  6EE1               	movwf	fsr1l,c
  3717   000D12  6AE2               	clrf	fsr1h,c
  3718   000D14  0012               	return	
  3719   000D16                     __end_ofPL38:
  3720                           	callstack 0
  3721   000D16                     PL54:
  3722                           	callstack 27
  3723   000D16  26D9               	addwf	fsr2l,f,c
  3724   000D18  5041               	movf	_numRecordings^0,w,c
  3725   000D1A  0D06               	mullw	6
  3726   000D1C  50F3               	movf	243,w,c
  3727   000D1E  0012               	return	
  3728   000D20                     __end_ofPL54:
  3729                           	callstack 0
  3730                           
  3731 ;; *************** function _CNT_GetTimeArr *****************
  3732 ;; Defined at:
  3733 ;;		line 148 in file "TAD_COUNTER.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      PTR unsigned char 
  3740 ;; Registers used:
  3741 ;;		wreg
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1
  3747 ;;      Params:         2       0       0
  3748 ;;      Locals:         0       0       0
  3749 ;;      Temps:          0       0       0
  3750 ;;      Totals:         2       0       0
  3751 ;;Total ram usage:        2 bytes
  3752 ;; Hardware stack levels used: 1
  3753 ;; Hardware stack levels required when called: 2
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_MICRO_Motor
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text25
  3762   0016C4                     __ptext25:
  3763                           	callstack 0
  3764   0016C4                     _CNT_GetTimeArr:
  3765                           	callstack 27
  3766                           
  3767                           ;TAD_COUNTER.c: 149:     return time;
  3768                           
  3769                           ;incstack = 0
  3770   0016C4  0E48               	movlw	_time& (0+255)
  3771   0016C6  0012               	return		;funcret
  3772   0016C8                     __end_of_CNT_GetTimeArr:
  3773                           	callstack 0
  3774                           
  3775 ;; *************** function _CNT_GetTime *****************
  3776 ;; Defined at:
  3777 ;;		line 144 in file "TAD_COUNTER.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  index           1    wreg     unsigned char 
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  index           1    0[COMRAM] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      unsigned char 
  3784 ;; Registers used:
  3785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1
  3791 ;;      Params:         0       0       0
  3792 ;;      Locals:         1       0       0
  3793 ;;      Temps:          0       0       0
  3794 ;;      Totals:         1       0       0
  3795 ;;Total ram usage:        1 bytes
  3796 ;; Hardware stack levels used: 1
  3797 ;; Hardware stack levels required when called: 2
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_MICRO_Motor
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text26
  3806   0015CA                     __ptext26:
  3807                           	callstack 0
  3808   0015CA                     _CNT_GetTime:
  3809                           	callstack 27
  3810                           
  3811                           ;incstack = 0
  3812                           ;CNT_GetTime@index stored from wreg
  3813   0015CA  6E5C               	movwf	CNT_GetTime@index^0,c
  3814                           
  3815                           ;TAD_COUNTER.c: 145:     return time[index];
  3816   0015CC  505C               	movf	CNT_GetTime@index^0,w,c
  3817   0015CE  0F48               	addlw	low _time
  3818   0015D0  6ED9               	movwf	fsr2l,c
  3819   0015D2  6ADA               	clrf	fsr2h,c
  3820   0015D4  50DF               	movf	indf2,w,c
  3821   0015D6  0012               	return		;funcret
  3822   0015D8                     __end_of_CNT_GetTime:
  3823                           	callstack 0
  3824                           
  3825 ;; *************** function _BUZZ_PlayMelody *****************
  3826 ;; Defined at:
  3827 ;;		line 37 in file "TAD_BUZZER.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1
  3841 ;;      Params:         0       0       0
  3842 ;;      Locals:         0       0       0
  3843 ;;      Temps:          0       0       0
  3844 ;;      Totals:         0       0       0
  3845 ;;Total ram usage:        0 bytes
  3846 ;; Hardware stack levels used: 1
  3847 ;; Hardware stack levels required when called: 4
  3848 ;; This function calls:
  3849 ;;		_BUZZ_Play
  3850 ;;		_TI_ResetTics
  3851 ;; This function is called by:
  3852 ;;		_MICRO_Motor
  3853 ;;		_MRCD_Motor
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text27
  3858   00148A                     __ptext27:
  3859                           	callstack 0
  3860   00148A                     _BUZZ_PlayMelody:
  3861                           	callstack 25
  3862                           
  3863                           ;TAD_BUZZER.c: 38:     playingMelody = 1;
  3864                           
  3865                           ;incstack = 0
  3866   00148A  0E01               	movlw	1
  3867   00148C  6E29               	movwf	_playingMelody^0,c
  3868                           
  3869                           ;TAD_BUZZER.c: 39:     melodyIndex = 0;
  3870   00148E  6A28               	clrf	_melodyIndex^0,c
  3871                           
  3872                           ;TAD_BUZZER.c: 40:     melodyPause = 20000/12;
  3873   001490  0E06               	movlw	6
  3874   001492  6E10               	movwf	(_melodyPause+1)^0,c
  3875   001494  0E82               	movlw	130
  3876   001496  6E0F               	movwf	_melodyPause^0,c
  3877                           
  3878                           ;TAD_BUZZER.c: 41:     TI_ResetTics(timerMelody);
  3879   001498  5056               	movf	_timerMelody^0,w,c
  3880   00149A  EC27  F00A         	call	_TI_ResetTics
  3881                           
  3882                           ;TAD_BUZZER.c: 42:     BUZZ_Play(MELODY[melodyIndex]);
  3883   00149E  EC7B  F005         	call	PL14	;call to abstracted procedure
  3884   0014A2  EF9D  F00A         	goto	_BUZZ_Play
  3885   0014A6                     __end_of_BUZZ_PlayMelody:
  3886                           	callstack 0
  3887                           
  3888 ;; *************** function _MICRO_Init *****************
  3889 ;; Defined at:
  3890 ;;		line 18 in file "TAD_MICRO.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1
  3904 ;;      Params:         0       0       0
  3905 ;;      Locals:         0       0       0
  3906 ;;      Temps:          0       0       0
  3907 ;;      Totals:         0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used: 1
  3910 ;; Hardware stack levels required when called: 3
  3911 ;; This function calls:
  3912 ;;		_TI_NewTimer
  3913 ;; This function is called by:
  3914 ;;		_main
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text28
  3919   00160C                     __ptext28:
  3920                           	callstack 0
  3921   00160C                     _MICRO_Init:
  3922                           	callstack 27
  3923                           
  3924                           ;TAD_MICRO.c: 21:     TRISAbits.TRISA1 = 1;
  3925                           
  3926                           ;incstack = 0
  3927   00160C  8292               	bsf	146,1,c	;volatile
  3928                           
  3929                           ;TAD_MICRO.c: 22:     state = 0;
  3930   00160E  6A1A               	clrf	_state@TAD_MICRO$F1460^0,c
  3931                           
  3932                           ;TAD_MICRO.c: 23:     TI_NewTimer(&txTimer);
  3933   001610  0E52               	movlw	low _txTimer
  3934   001612  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  3935   001614  EF21  F009         	goto	_TI_NewTimer	;wreg free
  3936   001618                     __end_of_MICRO_Init:
  3937                           	callstack 0
  3938                           
  3939 ;; *************** function _MENU_Motor *****************
  3940 ;; Defined at:
  3941 ;;		line 59 in file "TAD_MENU.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;		None
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  aux             1   26[COMRAM] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1
  3955 ;;      Params:         0       0       0
  3956 ;;      Locals:         1       0       0
  3957 ;;      Temps:          2       0       0
  3958 ;;      Totals:         3       0       0
  3959 ;;Total ram usage:        3 bytes
  3960 ;; Hardware stack levels used: 1
  3961 ;; Hardware stack levels required when called: 6
  3962 ;; This function calls:
  3963 ;;		_CNT_ModifyTime
  3964 ;;		_CNT_ShowTime
  3965 ;;		_JOY_GetMove
  3966 ;;		_KPAD_GetChar
  3967 ;;		_LCD_Clear
  3968 ;;		_LCD_GotoXY
  3969 ;;		_LCD_IsAvailable
  3970 ;;		_LCD_PutChar
  3971 ;;		_LCD_PutString
  3972 ;;		_MENU_OptionDown
  3973 ;;		_MENU_OptionUp
  3974 ;;		_MICRO_ListenAndSend
  3975 ;;		_MQ_PutString
  3976 ;;		_MRCD_Mostrar
  3977 ;;		_PORT_GetName
  3978 ;;		_PORT_Mostrar
  3979 ;;		_TI_GetTics
  3980 ;;		_TI_ResetTics
  3981 ;;		_exitMenu
  3982 ;; This function is called by:
  3983 ;;		_main
  3984 ;; This function uses a non-reentrant model
  3985 ;;
  3986                           
  3987                           	psect	text29
  3988   000018                     __ptext29:
  3989                           	callstack 0
  3990   000018                     _MENU_Motor:
  3991                           	callstack 24
  3992                           
  3993                           ;TAD_MENU.c: 60:     unsigned char aux;;TAD_MENU.c: 61:     switch(state){
  3994                           
  3995                           ;incstack = 0
  3996   000018  D0C2               	goto	l4401
  3997   00001A                     l4271:
  3998                           
  3999                           ;TAD_MENU.c: 65:             if((aux = JOY_GetMove()) != 0){
  4000   00001A  ECBC  F00A         	call	_JOY_GetMove	;wreg free
  4001   00001E  6E76               	movwf	MENU_Motor@aux^0,c
  4002   000020  5076               	movf	MENU_Motor@aux^0,w,c
  4003   000022  E006               	bz	l4279
  4004                           
  4005                           ;TAD_MENU.c: 66:                 aux == 1 ? MENU_OptionUp() : MENU_OptionDown();
  4006   000024  0476               	decf	MENU_Motor@aux^0,w,c
  4007   000026  E002 EFEC  F00A    	bnz	_MENU_OptionDown
  4008   00002C  EFCE  F00A         	goto	_MENU_OptionUp	;wreg free
  4009   000030                     l4279:
  4010   000030  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  4011   000034  0A23               	xorlw	35
  4012   000036  A4D8               	btfss	status,2,c
  4013   000038  0012               	return	
  4014                           
  4015                           ;TAD_MENU.c: 69:                 exitMenu();
  4016   00003A  EC21  F00B         	call	_exitMenu	;wreg free
  4017                           
  4018                           ;TAD_MENU.c: 70:                 switch(option){
  4019   00003E  D003               	goto	l4295
  4020   000040                     l4291:
  4021                           
  4022                           ;TAD_MENU.c: 84:                         state = 9;
  4023   000040  0E09               	movlw	9
  4024   000042  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  4025                           
  4026                           ;TAD_MENU.c: 85:                         break;
  4027   000044  0C09               	retlw	9
  4028   000046                     l4295:
  4029   000046  5020               	movf	_option^0,w,c
  4030                           
  4031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4032                           ; Switch size 1, requested type "space"
  4033                           ; Number of cases is 1, Range of values is 0 to 0
  4034                           ; switch strategies available:
  4035                           ; Name         Instructions Cycles
  4036                           ; simple_byte            4     3 (average)
  4037                           ;	Chosen strategy is simple_byte
  4038   000048  D8D3               	call	PL64	;call to abstracted procedure
  4039   00004A  A4D8               	btfss	status,2,c
  4040   00004C  0012               	return	
  4041                           
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 5, Range of values is 1 to 5
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte           16     9 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048   00004E  5074               	movf	??_MENU_Motor^0,w,c
  4049   000050  0A01               	xorlw	1	; case 1
  4050   000052  E102 EF9F  F009    	bz	_MICRO_ListenAndSend
  4051   000058  0A03               	xorlw	3	; case 2
  4052   00005A  E102 EF72  F009    	bz	_MRCD_Mostrar
  4053   000060  0A01               	xorlw	1	; case 3
  4054   000062  E102 EF5A  F009    	bz	_CNT_ModifyTime
  4055   000068  0A07               	xorlw	7	; case 4
  4056   00006A  E102 EFF3  F00A    	bz	_CNT_ShowTime
  4057   000070  0A01               	xorlw	1	; case 5
  4058   000072  A4D8               	btfss	status,2,c
  4059   000074  0012               	return	
  4060   000076  D7E4               	goto	l4291
  4061   000078                     l4297:
  4062                           
  4063                           ;TAD_MENU.c: 90:             state = option + 2;
  4064   000078  5020               	movf	_option^0,w,c
  4065   00007A  0F02               	addlw	2
  4066   00007C  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  4067                           
  4068                           ;TAD_MENU.c: 91:             printNext = 0;
  4069   00007E  6A1F               	clrf	_printNext^0,c
  4070                           
  4071                           ;TAD_MENU.c: 92:             break;
  4072   000080  0012               	return	
  4073   000082                     l4301:
  4074                           
  4075                           ;TAD_MENU.c: 94:             if(!LCD_IsAvailable()) break;
  4076   000082  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4077   000086  0900               	iorlw	0
  4078   000088  E101               	bnz	l4305
  4079   00008A  0012               	return	
  4080   00008C                     l4305:
  4081                           
  4082                           ;TAD_MENU.c: 95:             MQ_PutString("1. START RECORDING", printNext);
  4083   00008C  0E4E               	movlw	low STR_14
  4084   00008E  6E6F               	movwf	MQ_PutString@s^0,c
  4085   000090  0E1F               	movlw	high STR_14
  4086   000092  D8AA               	call	PL32	;call to abstracted procedure
  4087   000094  EC57  F008         	call	_MQ_PutString	;wreg free
  4088                           
  4089                           ;TAD_MENU.c: 96:             printNext++;
  4090   000098  2A1F               	incf	_printNext^0,f,c
  4091   00009A                     l4309:
  4092                           
  4093                           ;TAD_MENU.c: 97:             state++;
  4094   00009A  2A21               	incf	_state@TAD_MENU$F1311^0,f,c
  4095                           
  4096                           ;TAD_MENU.c: 98:             break;
  4097   00009C  0012               	return	
  4098   00009E                     l4311:
  4099                           
  4100                           ;TAD_MENU.c: 100:             if(!LCD_IsAvailable()) break;
  4101   00009E  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4102   0000A2  0900               	iorlw	0
  4103   0000A4  E101               	bnz	l4315
  4104   0000A6  0012               	return	
  4105   0000A8                     l4315:
  4106                           
  4107                           ;TAD_MENU.c: 101:             MQ_PutString("2. PLAY RECORDINGS", printNext);
  4108   0000A8  0E61               	movlw	low STR_15
  4109   0000AA  6E6F               	movwf	MQ_PutString@s^0,c
  4110   0000AC  0E1F               	movlw	high STR_15
  4111   0000AE  D89C               	call	PL32	;call to abstracted procedure
  4112   0000B0  EC57  F008         	call	_MQ_PutString	;wreg free
  4113                           
  4114                           ;TAD_MENU.c: 103:             if(!printNext){
  4115   0000B4  501F               	movf	_printNext^0,w,c
  4116   0000B6  E103               	bnz	l4321
  4117   0000B8                     u3070:
  4118                           
  4119                           ;TAD_MENU.c: 104:                 state++;
  4120   0000B8  2A21               	incf	_state@TAD_MENU$F1311^0,f,c
  4121                           
  4122                           ;TAD_MENU.c: 105:                 printNext++;
  4123   0000BA  2A1F               	incf	_printNext^0,f,c
  4124                           
  4125                           ;TAD_MENU.c: 106:             }
  4126   0000BC  0012               	return	
  4127   0000BE                     l4321:
  4128   0000BE  0E01               	movlw	1
  4129   0000C0  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  4130   0000C2  0C01               	retlw	1
  4131   0000C4                     l4323:
  4132                           
  4133                           ;TAD_MENU.c: 110:             if(!LCD_IsAvailable()) break;
  4134   0000C4  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4135   0000C8  0900               	iorlw	0
  4136   0000CA  E101               	bnz	l4327
  4137   0000CC  0012               	return	
  4138   0000CE                     l4327:
  4139                           
  4140                           ;TAD_MENU.c: 111:             MQ_PutString("3. MODIFY CURRENT TIME", printNext);
  4141   0000CE  0E0D               	movlw	low STR_16
  4142   0000D0  6E6F               	movwf	MQ_PutString@s^0,c
  4143   0000D2  0E1F               	movlw	high STR_16
  4144   0000D4  D889               	call	PL32	;call to abstracted procedure
  4145   0000D6  EC57  F008         	call	_MQ_PutString	;wreg free
  4146   0000DA                     l4329:
  4147                           
  4148                           ;TAD_MENU.c: 113:             if(!printNext){
  4149   0000DA  501F               	movf	_printNext^0,w,c
  4150   0000DC  E0ED               	bz	u3070
  4151   0000DE  D7EF               	goto	l4321
  4152   0000E0                     l4335:
  4153                           
  4154                           ;TAD_MENU.c: 120:             if(!LCD_IsAvailable()) break;
  4155   0000E0  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4156   0000E4  0900               	iorlw	0
  4157   0000E6  E101               	bnz	l4339
  4158   0000E8  0012               	return	
  4159   0000EA                     l4339:
  4160                           
  4161                           ;TAD_MENU.c: 121:             MQ_PutString("4. SHOW CURRENT TIME", printNext);
  4162   0000EA  0E24               	movlw	low STR_17
  4163   0000EC  6E6F               	movwf	MQ_PutString@s^0,c
  4164   0000EE  0E1F               	movlw	high STR_17
  4165   0000F0  D87B               	call	PL32	;call to abstracted procedure
  4166   0000F2  EC57  F008         	call	_MQ_PutString	;wreg free
  4167   0000F6  D7F1               	goto	l4329
  4168   0000F8                     l4347:
  4169                           
  4170                           ;TAD_MENU.c: 130:             if(!LCD_IsAvailable()) break;
  4171   0000F8  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4172   0000FC  0900               	iorlw	0
  4173   0000FE  E101               	bnz	l4351
  4174   000100  0012               	return	
  4175   000102                     l4351:
  4176                           
  4177                           ;TAD_MENU.c: 131:             MQ_PutString("5. END COMMUNICATION", printNext);
  4178   000102  0E39               	movlw	low STR_18
  4179   000104  6E6F               	movwf	MQ_PutString@s^0,c
  4180   000106  0E1F               	movlw	high STR_18
  4181   000108  D86F               	call	PL32	;call to abstracted procedure
  4182   00010A  EC57  F008         	call	_MQ_PutString	;wreg free
  4183   00010E  D7E5               	goto	l4329
  4184   000110                     l4359:
  4185                           
  4186                           ;TAD_MENU.c: 140:             if(!LCD_IsAvailable()) break;
  4187   000110  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4188   000114  0900               	iorlw	0
  4189   000116  E101               	bnz	l4363
  4190   000118  0012               	return	
  4191   00011A                     l4363:
  4192                           
  4193                           ;TAD_MENU.c: 141:             MQ_PutString(" ", printNext);
  4194   00011A  0EF7               	movlw	low (STR_11+1)
  4195   00011C  6E6F               	movwf	MQ_PutString@s^0,c
  4196   00011E  0E1F               	movlw	high (STR_11+1)
  4197   000120  D863               	call	PL32	;call to abstracted procedure
  4198   000122  EC57  F008         	call	_MQ_PutString	;wreg free
  4199   000126  D7CB               	goto	l4321
  4200   000128                     l4367:
  4201                           
  4202                           ;TAD_MENU.c: 145:             if(!LCD_IsAvailable()) break;
  4203   000128  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4204   00012C  0900               	iorlw	0
  4205   00012E  E101               	bnz	l4371
  4206   000130  0012               	return	
  4207   000132                     l4371:
  4208                           
  4209                           ;TAD_MENU.c: 146:             LCD_Clear();
  4210   000132  EC86  F00A         	call	_LCD_Clear	;wreg free
  4211                           
  4212                           ;TAD_MENU.c: 147:             LCD_GotoXY(0, 0);
  4213   000136  0E00               	movlw	0
  4214   000138  6A6A               	clrf	LCD_GotoXY@Row^0,c
  4215   00013A  EC48  F007         	call	_LCD_GotoXY
  4216                           
  4217                           ;TAD_MENU.c: 148:             LCD_PutString("bye bye ");
  4218   00013E  0EC3               	movlw	low STR_20
  4219   000140  6E5E               	movwf	LCD_PutString@s^0,c
  4220   000142  0E1F               	movlw	high STR_20
  4221   000144  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  4222   000146  ECD6  F00A         	call	_LCD_PutString	;wreg free
  4223   00014A  D7A7               	goto	l4309
  4224   00014C                     l4377:
  4225                           
  4226                           ;TAD_MENU.c: 152:             if(!LCD_IsAvailable()) break;
  4227   00014C  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4228   000150  0900               	iorlw	0
  4229   000152  E101               	bnz	l4381
  4230   000154  0012               	return	
  4231   000156                     l4381:
  4232                           
  4233                           ;TAD_MENU.c: 153:             LCD_PutString(PORT_GetName());
  4234   000156  EC68  F00B         	call	_PORT_GetName	;wreg free
  4235   00015A  6E74               	movwf	??_MENU_Motor^0,c
  4236   00015C  C074  F05E         	movff	??_MENU_Motor,LCD_PutString@s
  4237   000160  6A5F               	clrf	(LCD_PutString@s+1)^0,c
  4238   000162  ECD6  F00A         	call	_LCD_PutString	;wreg free
  4239   000166  D799               	goto	l4309
  4240   000168                     l4385:
  4241                           
  4242                           ;TAD_MENU.c: 157:             if(!LCD_IsAvailable()) break;
  4243   000168  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  4244   00016C  0900               	iorlw	0
  4245   00016E  E101               	bnz	l4389
  4246   000170  0012               	return	
  4247   000172                     l4389:
  4248                           
  4249                           ;TAD_MENU.c: 158:             LCD_PutChar('!');
  4250   000172  0E21               	movlw	33
  4251   000174  ECF0  F009         	call	_LCD_PutChar
  4252                           
  4253                           ;TAD_MENU.c: 159:             TI_ResetTics(timerByeBye);
  4254   000178  5054               	movf	_timerByeBye^0,w,c
  4255   00017A  EC27  F00A         	call	_TI_ResetTics
  4256   00017E  D78D               	goto	l4309
  4257   000180                     l4393:
  4258                           
  4259                           ;TAD_MENU.c: 163:             if(TI_GetTics(timerByeBye) >= 8000){
  4260   000180  5054               	movf	_timerByeBye^0,w,c
  4261   000182  EC84  F008         	call	_TI_GetTics
  4262   000186  505F               	movf	(?_TI_GetTics+3)^0,w,c
  4263   000188  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  4264   00018A  E106               	bnz	u3180
  4265   00018C  0E40               	movlw	64
  4266   00018E  5C5C               	subwf	?_TI_GetTics^0,w,c
  4267   000190  0E1F               	movlw	31
  4268   000192  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  4269   000194  A0D8               	btfss	status,0,c
  4270   000196  0012               	return	
  4271   000198                     u3180:
  4272                           
  4273                           ;TAD_MENU.c: 164:                 state = 0;
  4274   000198  6A21               	clrf	_state@TAD_MENU$F1311^0,c
  4275                           
  4276                           ;TAD_MENU.c: 165:                 PORT_Mostrar();
  4277   00019A  EF66  F00B         	goto	_PORT_Mostrar	;wreg free
  4278   00019E                     l4401:
  4279   00019E  5021               	movf	_state@TAD_MENU$F1311^0,w,c
  4280                           
  4281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4282                           ; Switch size 1, requested type "space"
  4283                           ; Number of cases is 1, Range of values is 0 to 0
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte            4     3 (average)
  4287                           ;	Chosen strategy is simple_byte
  4288   0001A0  D827               	call	PL64	;call to abstracted procedure
  4289   0001A2  A4D8               	btfss	status,2,c
  4290   0001A4  0012               	return	
  4291                           
  4292                           ; Switch size 1, requested type "space"
  4293                           ; Number of cases is 13, Range of values is 0 to 12
  4294                           ; switch strategies available:
  4295                           ; Name         Instructions Cycles
  4296                           ; simple_byte           40    21 (average)
  4297                           ;	Chosen strategy is simple_byte
  4298   0001A6  5074               	movf	??_MENU_Motor^0,w,c
  4299   0001A8  B4D8               	btfsc	status,2,c
  4300   0001AA  0012               	return	
  4301   0001AC  0A01               	xorlw	1	; case 1
  4302   0001AE  E101 D734          	bz	l4271
  4303   0001B2  0A03               	xorlw	3	; case 2
  4304   0001B4  E101 D760          	bz	l4297
  4305   0001B8  0A01               	xorlw	1	; case 3
  4306   0001BA  E101 D762          	bz	l4301
  4307   0001BE  0A07               	xorlw	7	; case 4
  4308   0001C0  E101 D76D          	bz	l4311
  4309   0001C4  0A01               	xorlw	1	; case 5
  4310   0001C6  E101 D77D          	bz	l4323
  4311   0001CA  0A03               	xorlw	3	; case 6
  4312   0001CC  E089               	bz	l4335
  4313   0001CE  0A01               	xorlw	1	; case 7
  4314   0001D0  E093               	bz	l4347
  4315   0001D2  0A0F               	xorlw	15	; case 8
  4316   0001D4  E09D               	bz	l4359
  4317   0001D6  0A01               	xorlw	1	; case 9
  4318   0001D8  E0A7               	bz	l4367
  4319   0001DA  0A03               	xorlw	3	; case 10
  4320   0001DC  E0B7               	bz	l4377
  4321   0001DE  0A01               	xorlw	1	; case 11
  4322   0001E0  E0C3               	bz	l4385
  4323   0001E2  0A07               	xorlw	7	; case 12
  4324   0001E4  E0CD               	bz	l4393
  4325   0001E6  0012               	return		;funcret
  4326   0001E8                     __end_of_MENU_Motor:
  4327                           	callstack 0
  4328   0001E8                     PL32:
  4329                           	callstack 24
  4330   0001E8  6E70               	movwf	(MQ_PutString@s+1)^0,c
  4331   0001EA  C01F  F071         	movff	_printNext,MQ_PutString@line
  4332   0001EE  0012               	return	
  4333   0001F0                     __end_ofPL32:
  4334                           	callstack 0
  4335   0001F0                     PL64:
  4336                           	callstack 24
  4337   0001F0  6E74               	movwf	??_MENU_Motor^0,c
  4338   0001F2  6A75               	clrf	(??_MENU_Motor+1)^0,c
  4339   0001F4  5075               	movf	(??_MENU_Motor+1)^0,w,c
  4340   0001F6  0012               	return	
  4341   0001F8                     __end_ofPL64:
  4342                           	callstack 0
  4343                           
  4344 ;; *************** function _exitMenu *****************
  4345 ;; Defined at:
  4346 ;;		line 172 in file "TAD_MENU.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;		None
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;		None
  4351 ;; Return value:  Size  Location     Type
  4352 ;;                  1    wreg      void 
  4353 ;; Registers used:
  4354 ;;		cstack
  4355 ;; Tracked objects:
  4356 ;;		On entry : 0/0
  4357 ;;		On exit  : 0/0
  4358 ;;		Unchanged: 0/0
  4359 ;; Data sizes:     COMRAM   BANK0   BANK1
  4360 ;;      Params:         0       0       0
  4361 ;;      Locals:         0       0       0
  4362 ;;      Temps:          0       0       0
  4363 ;;      Totals:         0       0       0
  4364 ;;Total ram usage:        0 bytes
  4365 ;; Hardware stack levels used: 1
  4366 ;; Hardware stack levels required when called: 3
  4367 ;; This function calls:
  4368 ;;		_JOY_Disable
  4369 ;;		_MQ_Clear
  4370 ;; This function is called by:
  4371 ;;		_MENU_Motor
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text30
  4376   001642                     __ptext30:
  4377                           	callstack 0
  4378   001642                     _exitMenu:
  4379                           	callstack 26
  4380                           
  4381                           ;TAD_MENU.c: 173:     state = 0;
  4382                           
  4383                           ;incstack = 0
  4384   001642  6A21               	clrf	_state@TAD_MENU$F1311^0,c
  4385                           
  4386                           ;TAD_MENU.c: 174:     MQ_Clear();
  4387   001644  EC0C  F00B         	call	_MQ_Clear	;wreg free
  4388                           
  4389                           ;TAD_MENU.c: 175:     JOY_Disable();
  4390   001648  EF64  F00B         	goto	_JOY_Disable	;wreg free
  4391   00164C                     __end_of_exitMenu:
  4392                           	callstack 0
  4393                           
  4394 ;; *************** function _MQ_Clear *****************
  4395 ;; Defined at:
  4396 ;;		line 23 in file "TAD_MARQUESINA.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		None
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1
  4410 ;;      Params:         0       0       0
  4411 ;;      Locals:         0       0       0
  4412 ;;      Temps:          0       0       0
  4413 ;;      Totals:         0       0       0
  4414 ;;Total ram usage:        0 bytes
  4415 ;; Hardware stack levels used: 1
  4416 ;; Hardware stack levels required when called: 2
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_MQ_Init
  4421 ;;		_exitMenu
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           	psect	text31
  4426   001618                     __ptext31:
  4427                           	callstack 0
  4428   001618                     _MQ_Clear:
  4429                           	callstack 27
  4430                           
  4431                           ;TAD_MARQUESINA.c: 26:     state = 0;
  4432                           
  4433                           ;incstack = 0
  4434   001618  6A27               	clrf	_state@TAD_MARQUESINA$F1253^0,c
  4435                           
  4436                           ;TAD_MARQUESINA.c: 27:     strL1 = strL2 = ((void*)0);
  4437   00161A  6A0B               	clrf	_strL2^0,c
  4438   00161C  6A0C               	clrf	(_strL2+1)^0,c
  4439   00161E  6A0D               	clrf	_strL1^0,c
  4440   001620  6A0E               	clrf	(_strL1+1)^0,c
  4441   001622  0012               	return		;funcret
  4442   001624                     __end_of_MQ_Clear:
  4443                           	callstack 0
  4444                           
  4445 ;; *************** function _JOY_Disable *****************
  4446 ;; Defined at:
  4447 ;;		line 21 in file "TAD_JOYSTICK.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;		None
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      void 
  4454 ;; Registers used:
  4455 ;;		None
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1
  4461 ;;      Params:         0       0       0
  4462 ;;      Locals:         0       0       0
  4463 ;;      Temps:          0       0       0
  4464 ;;      Totals:         0       0       0
  4465 ;;Total ram usage:        0 bytes
  4466 ;; Hardware stack levels used: 1
  4467 ;; Hardware stack levels required when called: 2
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_exitMenu
  4472 ;;		_MRCD_Motor
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text32
  4477   0016C8                     __ptext32:
  4478                           	callstack 0
  4479   0016C8                     _JOY_Disable:
  4480                           	callstack 27
  4481                           
  4482                           ;TAD_JOYSTICK.c: 22:     enabled = 0;
  4483                           
  4484                           ;incstack = 0
  4485   0016C8  6A30               	clrf	_enabled^0,c
  4486   0016CA  0012               	return		;funcret
  4487   0016CC                     __end_of_JOY_Disable:
  4488                           	callstack 0
  4489                           
  4490 ;; *************** function _PORT_Mostrar *****************
  4491 ;; Defined at:
  4492 ;;		line 19 in file "TAD_PORT.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;		None
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;		None
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  1    wreg      void 
  4499 ;; Registers used:
  4500 ;;		status,2, status,0
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1
  4506 ;;      Params:         0       0       0
  4507 ;;      Locals:         0       0       0
  4508 ;;      Temps:          0       0       0
  4509 ;;      Totals:         0       0       0
  4510 ;;Total ram usage:        0 bytes
  4511 ;; Hardware stack levels used: 1
  4512 ;; Hardware stack levels required when called: 2
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_main
  4517 ;;		_MENU_Motor
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text33
  4522   0016CC                     __ptext33:
  4523                           	callstack 0
  4524   0016CC                     _PORT_Mostrar:
  4525                           	callstack 28
  4526                           
  4527                           ;TAD_PORT.c: 20:     state++;
  4528                           
  4529                           ;incstack = 0
  4530   0016CC  2A32               	incf	_state@TAD_PORT$F865^0,f,c
  4531   0016CE  0012               	return		;funcret
  4532   0016D0                     __end_of_PORT_Mostrar:
  4533                           	callstack 0
  4534                           
  4535 ;; *************** function _PORT_GetName *****************
  4536 ;; Defined at:
  4537 ;;		line 23 in file "TAD_PORT.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      PTR unsigned char 
  4544 ;; Registers used:
  4545 ;;		wreg
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1
  4551 ;;      Params:         2       0       0
  4552 ;;      Locals:         0       0       0
  4553 ;;      Temps:          0       0       0
  4554 ;;      Totals:         2       0       0
  4555 ;;Total ram usage:        2 bytes
  4556 ;; Hardware stack levels used: 1
  4557 ;; Hardware stack levels required when called: 2
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_MENU_Motor
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text34
  4566   0016D0                     __ptext34:
  4567                           	callstack 0
  4568   0016D0                     _PORT_GetName:
  4569                           	callstack 27
  4570                           
  4571                           ;TAD_PORT.c: 24:     return portName;
  4572                           
  4573                           ;incstack = 0
  4574   0016D0  0E4C               	movlw	_portName& (0+255)
  4575   0016D2  0012               	return		;funcret
  4576   0016D4                     __end_of_PORT_GetName:
  4577                           	callstack 0
  4578                           
  4579 ;; *************** function _MRCD_Mostrar *****************
  4580 ;; Defined at:
  4581 ;;		line 29 in file "TAD_MENURECORDINGS.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1
  4595 ;;      Params:         0       0       0
  4596 ;;      Locals:         0       0       0
  4597 ;;      Temps:          0       0       0
  4598 ;;      Totals:         0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used: 1
  4601 ;; Hardware stack levels required when called: 5
  4602 ;; This function calls:
  4603 ;;		_JOY_Enable
  4604 ;;		_KPAD_StartInput
  4605 ;;		_KPAD_UnsetSMS
  4606 ;;		_LCD_Clear
  4607 ;;		_LCD_PutString
  4608 ;; This function is called by:
  4609 ;;		_MENU_Motor
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text35
  4614   0012E4                     __ptext35:
  4615                           	callstack 0
  4616   0012E4                     _MRCD_Mostrar:
  4617                           	callstack 24
  4618                           
  4619                           ;TAD_MENURECORDINGS.c: 32:     if(numRecordings == 0){
  4620                           
  4621                           ;incstack = 0
  4622   0012E4  5041               	movf	_numRecordings^0,w,c
  4623   0012E6  E10B               	bnz	l1060
  4624                           
  4625                           ;TAD_MENURECORDINGS.c: 33:         LCD_Clear();
  4626   0012E8  EC86  F00A         	call	_LCD_Clear	;wreg free
  4627                           
  4628                           ;TAD_MENURECORDINGS.c: 34:         LCD_PutString("NO RECORDINGS...");
  4629   0012EC  0E74               	movlw	low STR_24
  4630   0012EE  6E5E               	movwf	LCD_PutString@s^0,c
  4631   0012F0  0E1F               	movlw	high STR_24
  4632   0012F2  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  4633   0012F4  ECD6  F00A         	call	_LCD_PutString	;wreg free
  4634                           
  4635                           ;TAD_MENURECORDINGS.c: 35:         state = 1;
  4636   0012F8  0E01               	movlw	1
  4637   0012FA  6E15               	movwf	_state@TAD_MENURECORDINGS$F1579^0,c
  4638                           
  4639                           ;TAD_MENURECORDINGS.c: 36:     }
  4640   0012FC  D006               	goto	l1061
  4641   0012FE                     l1060:
  4642                           
  4643                           ;TAD_MENURECORDINGS.c: 38:         option = 0;
  4644   0012FE  6A14               	clrf	_option@TAD_MENURECORDINGS$F1580^0,c
  4645                           
  4646                           ;TAD_MENURECORDINGS.c: 39:         indexSent = 0;
  4647   001300  6A13               	clrf	_indexSent^0,c
  4648                           
  4649                           ;TAD_MENURECORDINGS.c: 40:         state = 7;
  4650   001302  0E07               	movlw	7
  4651   001304  6E15               	movwf	_state@TAD_MENURECORDINGS$F1579^0,c
  4652                           
  4653                           ;TAD_MENURECORDINGS.c: 41:         JOY_Enable();
  4654   001306  EC58  F00B         	call	_JOY_Enable	;wreg free
  4655   00130A                     l1061:
  4656                           
  4657                           ;TAD_MENURECORDINGS.c: 44:     KPAD_UnsetSMS();
  4658   00130A  EC55  F00B         	call	_KPAD_UnsetSMS	;wreg free
  4659                           
  4660                           ;TAD_MENURECORDINGS.c: 45:     KPAD_StartInput();
  4661   00130E  EF41  F00B         	goto	_KPAD_StartInput	;wreg free
  4662   001312                     __end_of_MRCD_Mostrar:
  4663                           	callstack 0
  4664                           
  4665 ;; *************** function _MQ_PutString *****************
  4666 ;; Defined at:
  4667 ;;		line 30 in file "TAD_MARQUESINA.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  s               2   19[COMRAM] PTR unsigned char 
  4670 ;;		 -> STR_19(2), STR_18(21), STR_17(21), STR_16(23), 
  4671 ;;		 -> STR_15(19), STR_14(19), 
  4672 ;;  line            1   21[COMRAM] unsigned char 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1
  4684 ;;      Params:         3       0       0
  4685 ;;      Locals:         2       0       0
  4686 ;;      Temps:          0       0       0
  4687 ;;      Totals:         5       0       0
  4688 ;;Total ram usage:        5 bytes
  4689 ;; Hardware stack levels used: 1
  4690 ;; Hardware stack levels required when called: 5
  4691 ;; This function calls:
  4692 ;;		_LCD_Clear
  4693 ;;		_TI_ResetTics
  4694 ;;		_strlen
  4695 ;; This function is called by:
  4696 ;;		_MENU_Motor
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           	psect	text36
  4701   0010AE                     __ptext36:
  4702                           	callstack 0
  4703   0010AE                     _MQ_PutString:
  4704                           	callstack 24
  4705                           
  4706                           ;TAD_MARQUESINA.c: 33:     if(line){
  4707                           
  4708                           ;incstack = 0
  4709   0010AE  5071               	movf	MQ_PutString@line^0,w,c
  4710   0010B0  E009               	bz	l3695
  4711                           
  4712                           ;TAD_MARQUESINA.c: 34:         strL2 = s;
  4713   0010B2  C06F  F00B         	movff	MQ_PutString@s,_strL2
  4714   0010B6  C070  F00C         	movff	MQ_PutString@s+1,_strL2+1
  4715                           
  4716                           ;TAD_MARQUESINA.c: 35:         sizeL2 = strlen(s);
  4717   0010BA  D821               	call	PL42	;call to abstracted procedure
  4718   0010BC  EC04  F00A         	call	_strlen	;wreg free
  4719   0010C0  6E23               	movwf	_sizeL2^0,c
  4720                           
  4721                           ;TAD_MARQUESINA.c: 36:     }
  4722   0010C2  D00A               	goto	l3701
  4723   0010C4                     l3695:
  4724                           
  4725                           ;TAD_MARQUESINA.c: 38:         LCD_Clear();
  4726   0010C4  EC86  F00A         	call	_LCD_Clear	;wreg free
  4727                           
  4728                           ;TAD_MARQUESINA.c: 39:         strL1 = s;
  4729   0010C8  C06F  F00D         	movff	MQ_PutString@s,_strL1
  4730   0010CC  C070  F00E         	movff	MQ_PutString@s+1,_strL1+1
  4731                           
  4732                           ;TAD_MARQUESINA.c: 40:         sizeL1 = strlen(s);
  4733   0010D0  D816               	call	PL42	;call to abstracted procedure
  4734   0010D2  EC04  F00A         	call	_strlen	;wreg free
  4735   0010D6  6E24               	movwf	_sizeL1^0,c
  4736   0010D8                     l3701:
  4737                           
  4738                           ;TAD_MARQUESINA.c: 42:     biggerSize = (sizeL1 > sizeL2) ? sizeL1 : sizeL2;
  4739   0010D8  5024               	movf	_sizeL1^0,w,c
  4740   0010DA  5C23               	subwf	_sizeL2^0,w,c
  4741   0010DC  E303               	bnc	l627
  4742   0010DE  C023  F072         	movff	_sizeL2,_MQ_PutString$1268
  4743   0010E2  D002               	goto	L1
  4744   0010E4                     l627:
  4745   0010E4  C024  F072         	movff	_sizeL1,_MQ_PutString$1268
  4746   0010E8                     L1:
  4747   0010E8  6A73               	clrf	(_MQ_PutString$1268+1)^0,c
  4748   0010EA  C072  F022         	movff	_MQ_PutString$1268,_biggerSize
  4749                           
  4750                           ;TAD_MARQUESINA.c: 43:     indexL1 = indexL2 = 0;
  4751   0010EE  6A25               	clrf	_indexL2^0,c
  4752   0010F0  6A26               	clrf	_indexL1^0,c
  4753                           
  4754                           ;TAD_MARQUESINA.c: 44:     TI_ResetTics(timer);
  4755   0010F2  5055               	movf	_timer^0,w,c
  4756   0010F4  EC27  F00A         	call	_TI_ResetTics
  4757                           
  4758                           ;TAD_MARQUESINA.c: 45:     state = 2;
  4759   0010F8  0E02               	movlw	2
  4760   0010FA  6E27               	movwf	_state@TAD_MARQUESINA$F1253^0,c
  4761   0010FC  0C02               	retlw	2	;funcret
  4762   0010FE                     __end_of_MQ_PutString:
  4763                           	callstack 0
  4764   0010FE                     PL42:
  4765                           	callstack 24
  4766   0010FE  C06F  F05C         	movff	MQ_PutString@s,strlen@s
  4767   001102  C070  F05D         	movff	MQ_PutString@s+1,strlen@s+1
  4768   001106  0012               	return	
  4769   001108                     __end_ofPL42:
  4770                           	callstack 0
  4771                           
  4772 ;; *************** function _strlen *****************
  4773 ;; Defined at:
  4774 ;;		line 103 in file "TAD_MARQUESINA.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  s               2    0[COMRAM] PTR unsigned char 
  4777 ;;		 -> STR_19(2), STR_18(21), STR_17(21), STR_16(23), 
  4778 ;;		 -> STR_15(19), STR_14(19), 
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;  i               1    4[COMRAM] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      unsigned char 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1
  4790 ;;      Params:         2       0       0
  4791 ;;      Locals:         1       0       0
  4792 ;;      Temps:          2       0       0
  4793 ;;      Totals:         5       0       0
  4794 ;;Total ram usage:        5 bytes
  4795 ;; Hardware stack levels used: 1
  4796 ;; Hardware stack levels required when called: 2
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_MQ_PutString
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text37
  4805   001408                     __ptext37:
  4806                           	callstack 0
  4807   001408                     _strlen:
  4808                           	callstack 26
  4809                           
  4810                           ;TAD_MARQUESINA.c: 104:     unsigned char i = 0;
  4811                           
  4812                           ;incstack = 0
  4813   001408  6A60               	clrf	strlen@i^0,c
  4814                           
  4815                           ;TAD_MARQUESINA.c: 105:     while(s[i] != '\0') i++;
  4816   00140A  D001               	goto	l3575
  4817   00140C                     l3573:
  4818   00140C  2A60               	incf	strlen@i^0,f,c
  4819   00140E                     l3575:
  4820   00140E  5060               	movf	strlen@i^0,w,c
  4821   001410  245C               	addwf	strlen@s^0,w,c
  4822   001412  6E5E               	movwf	??_strlen^0,c
  4823   001414  0E00               	movlw	0
  4824   001416  205D               	addwfc	(strlen@s+1)^0,w,c
  4825   001418  6E5F               	movwf	(??_strlen+1)^0,c
  4826   00141A  C05E  FFF6         	movff	??_strlen,tblptrl
  4827   00141E  C05F  FFF7         	movff	??_strlen+1,tblptrh
  4828   001422                     	if	0	;tblptru may be non-zero
  4829   001422                     	endif
  4830   001422                     	if	0	;tblptru may be non-zero
  4831   001422                     	endif
  4832   001422  0008               	tblrd		*
  4833   001424  50F5               	movf	tablat,w,c
  4834   001426  E1F2               	bnz	l3573
  4835                           
  4836                           ;TAD_MARQUESINA.c: 106:     return i;
  4837   001428  5060               	movf	strlen@i^0,w,c
  4838   00142A  0012               	return		;funcret
  4839   00142C                     __end_of_strlen:
  4840                           	callstack 0
  4841                           
  4842 ;; *************** function _MICRO_ListenAndSend *****************
  4843 ;; Defined at:
  4844 ;;		line 26 in file "TAD_MICRO.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;		None
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1
  4858 ;;      Params:         0       0       0
  4859 ;;      Locals:         0       0       0
  4860 ;;      Temps:          0       0       0
  4861 ;;      Totals:         0       0       0
  4862 ;;Total ram usage:        0 bytes
  4863 ;; Hardware stack levels used: 1
  4864 ;; Hardware stack levels required when called: 5
  4865 ;; This function calls:
  4866 ;;		_LCD_Clear
  4867 ;;		_LCD_GotoXY
  4868 ;;		_LCD_PutString
  4869 ;;		_SIO_PutChar
  4870 ;; This function is called by:
  4871 ;;		_MENU_Motor
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text38
  4876   00133E                     __ptext38:
  4877                           	callstack 0
  4878   00133E                     _MICRO_ListenAndSend:
  4879                           	callstack 24
  4880                           
  4881                           ;TAD_MICRO.c: 29:     LCD_Clear();
  4882                           
  4883                           ;incstack = 0
  4884   00133E  EC86  F00A         	call	_LCD_Clear	;wreg free
  4885                           
  4886                           ;TAD_MICRO.c: 30:     LCD_GotoXY(0, 0);
  4887   001342  0E00               	movlw	0
  4888   001344  6A6A               	clrf	LCD_GotoXY@Row^0,c
  4889   001346  EC48  F007         	call	_LCD_GotoXY
  4890                           
  4891                           ;TAD_MICRO.c: 31:     LCD_PutString("RECORDING...");
  4892   00134A  0E93               	movlw	low STR_23
  4893   00134C  6E5E               	movwf	LCD_PutString@s^0,c
  4894   00134E  0E1F               	movlw	high STR_23
  4895   001350  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  4896   001352  ECD6  F00A         	call	_LCD_PutString	;wreg free
  4897                           
  4898                           ;TAD_MICRO.c: 32:     indexAux = sentSamples = 0;
  4899   001356  6A0A               	clrf	(_sentSamples+1)^0,c
  4900   001358  6A09               	clrf	_sentSamples^0,c
  4901   00135A  C009  F019         	movff	_sentSamples,_indexAux
  4902                           
  4903                           ;TAD_MICRO.c: 33:     state = 1;
  4904   00135E  0E01               	movlw	1
  4905   001360  6E1A               	movwf	_state@TAD_MICRO$F1460^0,c
  4906                           
  4907                           ;TAD_MICRO.c: 34:     SIO_PutChar('D');
  4908   001362  0E44               	movlw	68
  4909   001364  EF39  F00B         	goto	_SIO_PutChar
  4910   001368                     __end_of_MICRO_ListenAndSend:
  4911                           	callstack 0
  4912                           
  4913 ;; *************** function _SIO_PutChar *****************
  4914 ;; Defined at:
  4915 ;;		line 37 in file "TAD_SIO.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  Valor           1    wreg     unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  Valor           1    0[COMRAM] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1
  4929 ;;      Params:         0       0       0
  4930 ;;      Locals:         1       0       0
  4931 ;;      Temps:          0       0       0
  4932 ;;      Totals:         1       0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used: 1
  4935 ;; Hardware stack levels required when called: 2
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_PORT_Motor
  4940 ;;		_MICRO_ListenAndSend
  4941 ;;		_MICRO_Motor
  4942 ;;		_MRCD_Motor
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text39
  4947   001672                     __ptext39:
  4948                           	callstack 0
  4949   001672                     _SIO_PutChar:
  4950                           	callstack 27
  4951                           
  4952                           ;incstack = 0
  4953                           ;SIO_PutChar@Valor stored from wreg
  4954   001672  6E5C               	movwf	SIO_PutChar@Valor^0,c
  4955                           
  4956                           ;TAD_SIO.c: 40:     TXREG = Valor;
  4957   001674  C05C  FFAD         	movff	SIO_PutChar@Valor,4013	;volatile
  4958   001678  0012               	return		;funcret
  4959   00167A                     __end_of_SIO_PutChar:
  4960                           	callstack 0
  4961                           
  4962 ;; *************** function _MENU_OptionUp *****************
  4963 ;; Defined at:
  4964 ;;		line 47 in file "TAD_MENU.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;		None
  4969 ;; Return value:  Size  Location     Type
  4970 ;;                  1    wreg      void 
  4971 ;; Registers used:
  4972 ;;		wreg, status,2, status,0
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMRAM   BANK0   BANK1
  4978 ;;      Params:         0       0       0
  4979 ;;      Locals:         0       0       0
  4980 ;;      Temps:          0       0       0
  4981 ;;      Totals:         0       0       0
  4982 ;;Total ram usage:        0 bytes
  4983 ;; Hardware stack levels used: 1
  4984 ;; Hardware stack levels required when called: 2
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_MENU_Motor
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           	psect	text40
  4993   00159C                     __ptext40:
  4994                           	callstack 0
  4995   00159C                     _MENU_OptionUp:
  4996                           	callstack 27
  4997                           
  4998                           ;TAD_MENU.c: 48:     if(option == 5) return;
  4999                           
  5000                           ;incstack = 0
  5001   00159C  0E05               	movlw	5
  5002   00159E  1820               	xorwf	_option^0,w,c
  5003   0015A0  E101               	bnz	l2103
  5004   0015A2  0012               	return	
  5005   0015A4                     l2103:
  5006                           
  5007                           ;TAD_MENU.c: 49:     state = 2;
  5008   0015A4  0E02               	movlw	2
  5009   0015A6  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  5010                           
  5011                           ;TAD_MENU.c: 50:     option++;
  5012   0015A8  2A20               	incf	_option^0,f,c
  5013   0015AA  0C02               	retlw	2	;funcret
  5014   0015AC                     __end_of_MENU_OptionUp:
  5015                           	callstack 0
  5016                           
  5017 ;; *************** function _MENU_OptionDown *****************
  5018 ;; Defined at:
  5019 ;;		line 53 in file "TAD_MENU.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2, status,0
  5028 ;; Tracked objects:
  5029 ;;		On entry : 0/0
  5030 ;;		On exit  : 0/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1
  5033 ;;      Params:         0       0       0
  5034 ;;      Locals:         0       0       0
  5035 ;;      Temps:          0       0       0
  5036 ;;      Totals:         0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used: 1
  5039 ;; Hardware stack levels required when called: 2
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_MENU_Motor
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text41
  5048   0015D8                     __ptext41:
  5049                           	callstack 0
  5050   0015D8                     _MENU_OptionDown:
  5051                           	callstack 27
  5052                           
  5053                           ;TAD_MENU.c: 54:     if(option == 1) return;
  5054                           
  5055                           ;incstack = 0
  5056   0015D8  0420               	decf	_option^0,w,c
  5057   0015DA  E101               	bnz	l2111
  5058   0015DC  0012               	return	
  5059   0015DE                     l2111:
  5060                           
  5061                           ;TAD_MENU.c: 55:     state = 2;
  5062   0015DE  0E02               	movlw	2
  5063   0015E0  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  5064                           
  5065                           ;TAD_MENU.c: 56:     option--;
  5066   0015E2  0620               	decf	_option^0,f,c
  5067   0015E4  0C02               	retlw	2	;funcret
  5068   0015E6                     __end_of_MENU_OptionDown:
  5069                           	callstack 0
  5070                           
  5071 ;; *************** function _JOY_GetMove *****************
  5072 ;; Defined at:
  5073 ;;		line 25 in file "TAD_JOYSTICK.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;  aux             1    0[COMRAM] unsigned char 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1
  5087 ;;      Params:         0       0       0
  5088 ;;      Locals:         1       0       0
  5089 ;;      Temps:          0       0       0
  5090 ;;      Totals:         1       0       0
  5091 ;;Total ram usage:        1 bytes
  5092 ;; Hardware stack levels used: 1
  5093 ;; Hardware stack levels required when called: 2
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_MENU_Motor
  5098 ;;		_MRCD_Motor
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text42
  5103   001578                     __ptext42:
  5104                           	callstack 0
  5105   001578                     _JOY_GetMove:
  5106                           	callstack 27
  5107                           
  5108                           ;TAD_JOYSTICK.c: 28:     if(!ready) return 0;
  5109                           
  5110                           ;incstack = 0
  5111   001578  502E               	movf	_ready@TAD_JOYSTICK$F1124^0,w,c
  5112   00157A  E101               	bnz	l506
  5113   00157C  0C00               	retlw	0
  5114   00157E                     l506:
  5115                           
  5116                           ;TAD_JOYSTICK.c: 29:     ready = 0;
  5117   00157E  6A2E               	clrf	_ready@TAD_JOYSTICK$F1124^0,c
  5118                           
  5119                           ;TAD_JOYSTICK.c: 30:     unsigned char aux = lastMove;
  5120   001580  C02F  F05C         	movff	_lastMove,JOY_GetMove@aux
  5121                           
  5122                           ;TAD_JOYSTICK.c: 31:     lastMove = 0;
  5123   001584  6A2F               	clrf	_lastMove^0,c
  5124                           
  5125                           ;TAD_JOYSTICK.c: 32:     return aux;
  5126   001586  505C               	movf	JOY_GetMove@aux^0,w,c
  5127   001588  0012               	return		;funcret
  5128   00158A                     __end_of_JOY_GetMove:
  5129                           	callstack 0
  5130                           
  5131 ;; *************** function _CNT_ShowTime *****************
  5132 ;; Defined at:
  5133 ;;		line 30 in file "TAD_COUNTER.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  1    wreg      void 
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, cstack
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMRAM   BANK0   BANK1
  5147 ;;      Params:         0       0       0
  5148 ;;      Locals:         0       0       0
  5149 ;;      Temps:          0       0       0
  5150 ;;      Totals:         0       0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used: 1
  5153 ;; Hardware stack levels required when called: 3
  5154 ;; This function calls:
  5155 ;;		_KPAD_StartInput
  5156 ;;		_KPAD_UnsetSMS
  5157 ;; This function is called by:
  5158 ;;		_MENU_Motor
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text43
  5163   0015E6                     __ptext43:
  5164                           	callstack 0
  5165   0015E6                     _CNT_ShowTime:
  5166                           	callstack 26
  5167                           
  5168                           ;TAD_COUNTER.c: 31:     showTime = 1;
  5169                           
  5170                           ;incstack = 0
  5171   0015E6  0E01               	movlw	1
  5172   0015E8  6E1C               	movwf	_showTime^0,c
  5173                           
  5174                           ;TAD_COUNTER.c: 32:     state = 1;
  5175   0015EA  6E1B               	movwf	_state@TAD_COUNTER$F1357^0,c
  5176                           
  5177                           ;TAD_COUNTER.c: 33:     KPAD_UnsetSMS();
  5178   0015EC  EC55  F00B         	call	_KPAD_UnsetSMS	;wreg free
  5179                           
  5180                           ;TAD_COUNTER.c: 34:     KPAD_StartInput();
  5181   0015F0  EF41  F00B         	goto	_KPAD_StartInput	;wreg free
  5182   0015F4                     __end_of_CNT_ShowTime:
  5183                           	callstack 0
  5184                           
  5185 ;; *************** function _CNT_ModifyTime *****************
  5186 ;; Defined at:
  5187 ;;		line 37 in file "TAD_COUNTER.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;                  1    wreg      void 
  5194 ;; Registers used:
  5195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMRAM   BANK0   BANK1
  5201 ;;      Params:         0       0       0
  5202 ;;      Locals:         0       0       0
  5203 ;;      Temps:          0       0       0
  5204 ;;      Totals:         0       0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used: 1
  5207 ;; Hardware stack levels required when called: 5
  5208 ;; This function calls:
  5209 ;;		_KPAD_StartInput
  5210 ;;		_KPAD_UnsetSMS
  5211 ;;		_LCD_Clear
  5212 ;;		_LCD_CursorOn
  5213 ;;		_LCD_GotoXY
  5214 ;;		_LCD_PutString
  5215 ;; This function is called by:
  5216 ;;		_MENU_Motor
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           	psect	text44
  5221   0012B4                     __ptext44:
  5222                           	callstack 0
  5223   0012B4                     _CNT_ModifyTime:
  5224                           	callstack 24
  5225                           
  5226                           ;TAD_COUNTER.c: 38:     modifyTime = 1;
  5227                           
  5228                           ;incstack = 0
  5229   0012B4  0E01               	movlw	1
  5230   0012B6  6E1D               	movwf	_modifyTime^0,c
  5231                           
  5232                           ;TAD_COUNTER.c: 39:     timeAuxIndex = 0;
  5233   0012B8  6A1E               	clrf	_timeAuxIndex^0,c
  5234                           
  5235                           ;TAD_COUNTER.c: 40:     LCD_CursorOn();
  5236   0012BA  EC26  F00B         	call	_LCD_CursorOn	;wreg free
  5237                           
  5238                           ;TAD_COUNTER.c: 41:     KPAD_UnsetSMS();
  5239   0012BE  EC55  F00B         	call	_KPAD_UnsetSMS	;wreg free
  5240                           
  5241                           ;TAD_COUNTER.c: 42:     KPAD_StartInput();
  5242   0012C2  EC41  F00B         	call	_KPAD_StartInput	;wreg free
  5243                           
  5244                           ;TAD_COUNTER.c: 43:     LCD_Clear();
  5245   0012C6  EC86  F00A         	call	_LCD_Clear	;wreg free
  5246                           
  5247                           ;TAD_COUNTER.c: 44:     LCD_GotoXY(0, 0);
  5248   0012CA  0E00               	movlw	0
  5249   0012CC  6A6A               	clrf	LCD_GotoXY@Row^0,c
  5250   0012CE  EC48  F007         	call	_LCD_GotoXY
  5251                           
  5252                           ;TAD_COUNTER.c: 45:     LCD_PutString("MODIFY TIME:");
  5253   0012D2  0EA0               	movlw	low STR_21
  5254   0012D4  6E5E               	movwf	LCD_PutString@s^0,c
  5255   0012D6  0E1F               	movlw	high STR_21
  5256   0012D8  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  5257   0012DA  ECD6  F00A         	call	_LCD_PutString	;wreg free
  5258                           
  5259                           ;TAD_COUNTER.c: 46:     state = 4;
  5260   0012DE  0E04               	movlw	4
  5261   0012E0  6E1B               	movwf	_state@TAD_COUNTER$F1357^0,c
  5262   0012E2  0C04               	retlw	4	;funcret
  5263   0012E4                     __end_of_CNT_ModifyTime:
  5264                           	callstack 0
  5265                           
  5266 ;; *************** function _LCD_CursorOn *****************
  5267 ;; Defined at:
  5268 ;;		line 119 in file "TAD_LCD.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMRAM   BANK0   BANK1
  5282 ;;      Params:         0       0       0
  5283 ;;      Locals:         0       0       0
  5284 ;;      Temps:          0       0       0
  5285 ;;      Totals:         0       0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used: 1
  5288 ;; Hardware stack levels required when called: 4
  5289 ;; This function calls:
  5290 ;;		_CantaIR
  5291 ;;		_WaitForBusy
  5292 ;; This function is called by:
  5293 ;;		_PORT_Motor
  5294 ;;		_CNT_ModifyTime
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text45
  5299   00164C                     __ptext45:
  5300                           	callstack 0
  5301   00164C                     _LCD_CursorOn:
  5302                           	callstack 25
  5303                           
  5304                           ;TAD_LCD.c: 122:  WaitForBusy();
  5305                           
  5306                           ;incstack = 0
  5307   00164C  ECFE  F008         	call	_WaitForBusy	;wreg free
  5308                           
  5309                           ;TAD_LCD.c: 123:  CantaIR(0x08 | 0x04 | 0x02);
  5310   001650  0E0E               	movlw	14
  5311   001652  EF53  F00A         	goto	_CantaIR
  5312   001656                     __end_of_LCD_CursorOn:
  5313                           	callstack 0
  5314                           
  5315 ;; *************** function _MENU_Init *****************
  5316 ;; Defined at:
  5317 ;;		line 30 in file "TAD_MENU.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;		None
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1
  5331 ;;      Params:         0       0       0
  5332 ;;      Locals:         0       0       0
  5333 ;;      Temps:          0       0       0
  5334 ;;      Totals:         0       0       0
  5335 ;;Total ram usage:        0 bytes
  5336 ;; Hardware stack levels used: 1
  5337 ;; Hardware stack levels required when called: 3
  5338 ;; This function calls:
  5339 ;;		_TI_NewTimer
  5340 ;; This function is called by:
  5341 ;;		_main
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text46
  5346   001656                     __ptext46:
  5347                           	callstack 0
  5348   001656                     _MENU_Init:
  5349                           	callstack 27
  5350                           
  5351                           ;TAD_MENU.c: 33:     state = 0;
  5352                           
  5353                           ;incstack = 0
  5354   001656  6A21               	clrf	_state@TAD_MENU$F1311^0,c
  5355                           
  5356                           ;TAD_MENU.c: 34:     TI_NewTimer(&timerByeBye);
  5357   001658  0E54               	movlw	low _timerByeBye
  5358   00165A  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  5359   00165C  EF21  F009         	goto	_TI_NewTimer	;wreg free
  5360   001660                     __end_of_MENU_Init:
  5361                           	callstack 0
  5362                           
  5363 ;; *************** function _LCD_Motor *****************
  5364 ;; Defined at:
  5365 ;;		line 195 in file "TAD_LCD.c"
  5366 ;; Parameters:    Size  Location     Type
  5367 ;;		None
  5368 ;; Auto vars:     Size  Location     Type
  5369 ;;		None
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      void 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1
  5379 ;;      Params:         0       0       0
  5380 ;;      Locals:         0       0       0
  5381 ;;      Temps:          2       0       0
  5382 ;;      Totals:         2       0       0
  5383 ;;Total ram usage:        2 bytes
  5384 ;; Hardware stack levels used: 1
  5385 ;; Hardware stack levels required when called: 6
  5386 ;; This function calls:
  5387 ;;		_LCD_PutChar
  5388 ;; This function is called by:
  5389 ;;		_main
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           	psect	text47
  5394   000F06                     __ptext47:
  5395                           	callstack 0
  5396   000F06                     _LCD_Motor:
  5397                           	callstack 24
  5398                           
  5399                           ;TAD_LCD.c: 196:     switch(state) {
  5400                           
  5401                           ;incstack = 0
  5402   000F06  D016               	goto	l4055
  5403   000F08                     l4045:
  5404                           
  5405                           ;TAD_LCD.c: 200:             if (str[index] != '\0') LCD_PutChar(str[index++]);
  5406   000F08  D821               	call	PL6	;call to abstracted procedure
  5407   000F0A  64F7               	cpfsgt	tblptrh,c
  5408   000F0C  D003               	bra	u2607
  5409   000F0E  0008               	tblrd		*
  5410   000F10  50F5               	movf	tablat,w,c
  5411   000F12  D001               	bra	u2600
  5412   000F14                     u2607:
  5413   000F14  D828               	call	PL30	;call to abstracted procedure
  5414   000F16                     u2600:
  5415   000F16  0900               	iorlw	0
  5416   000F18  E00B               	bz	l4051
  5417   000F1A  D818               	call	PL6	;call to abstracted procedure
  5418   000F1C  64F7               	cpfsgt	tblptrh,c
  5419   000F1E  D003               	bra	u2627
  5420   000F20  0008               	tblrd		*
  5421   000F22  50F5               	movf	tablat,w,c
  5422   000F24  D001               	bra	u2620
  5423   000F26                     u2627:
  5424   000F26  D81F               	call	PL30	;call to abstracted procedure
  5425   000F28                     u2620:
  5426   000F28  ECF0  F009         	call	_LCD_PutChar
  5427   000F2C  2A34               	incf	_index^0,f,c
  5428   000F2E  0012               	return	
  5429   000F30                     l4051:
  5430   000F30  0633               	decf	_state@TAD_LCD$F764^0,f,c
  5431   000F32  0012               	return	
  5432   000F34                     l4055:
  5433   000F34  5033               	movf	_state@TAD_LCD$F764^0,w,c
  5434   000F36  6E72               	movwf	??_LCD_Motor^0,c
  5435   000F38  6A73               	clrf	(??_LCD_Motor+1)^0,c
  5436                           
  5437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5438                           ; Switch size 1, requested type "space"
  5439                           ; Number of cases is 1, Range of values is 0 to 0
  5440                           ; switch strategies available:
  5441                           ; Name         Instructions Cycles
  5442                           ; simple_byte            4     3 (average)
  5443                           ;	Chosen strategy is simple_byte
  5444   000F3A  5073               	movf	(??_LCD_Motor+1)^0,w,c
  5445   000F3C  A4D8               	btfss	status,2,c
  5446   000F3E  0012               	return	
  5447                           
  5448                           ; Switch size 1, requested type "space"
  5449                           ; Number of cases is 2, Range of values is 0 to 1
  5450                           ; switch strategies available:
  5451                           ; Name         Instructions Cycles
  5452                           ; simple_byte            7     4 (average)
  5453                           ;	Chosen strategy is simple_byte
  5454   000F40  5072               	movf	??_LCD_Motor^0,w,c
  5455   000F42  B4D8               	btfsc	status,2,c
  5456   000F44  0012               	return	
  5457   000F46  0A01               	xorlw	1	; case 1
  5458   000F48  E0DF               	bz	l4045
  5459   000F4A  0012               	return		;funcret
  5460   000F4C                     __end_of_LCD_Motor:
  5461                           	callstack 0
  5462   000F4C                     PL6:
  5463                           	callstack 24
  5464   000F4C  5034               	movf	_index^0,w,c
  5465   000F4E  2411               	addwf	_str^0,w,c
  5466   000F50  6E72               	movwf	??_LCD_Motor^0,c
  5467   000F52  0E00               	movlw	0
  5468   000F54  2012               	addwfc	(_str+1)^0,w,c
  5469   000F56  6E73               	movwf	(??_LCD_Motor+1)^0,c
  5470   000F58  C072  FFF6         	movff	??_LCD_Motor,tblptrl
  5471   000F5C  C073  FFF7         	movff	??_LCD_Motor+1,tblptrh
  5472   000F60  6AF8               	clrf	tblptru,c
  5473   000F62  0E01               	movlw	(high __ramtop+-1)
  5474   000F64  0012               	return	
  5475   000F66                     __end_ofPL6:
  5476                           	callstack 0
  5477   000F66                     PL30:
  5478                           	callstack 24
  5479   000F66  CFF6 FFE1          	movff	tblptrl,fsr1l
  5480   000F6A  CFF7 FFE2          	movff	tblptrh,fsr1h
  5481   000F6E  50E7               	movf	indf1,w,c
  5482   000F70  0012               	return	
  5483   000F72                     __end_ofPL30:
  5484                           	callstack 0
  5485                           
  5486 ;; *************** function _LCD_Init *****************
  5487 ;; Defined at:
  5488 ;;		line 72 in file "TAD_LCD.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  rows            1    wreg     unsigned char 
  5491 ;;  columns         1   19[COMRAM] unsigned char 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  rows            1   20[COMRAM] unsigned char 
  5494 ;;  i               2   21[COMRAM] int 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  1    wreg      void 
  5497 ;; Registers used:
  5498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1
  5504 ;;      Params:         1       0       0
  5505 ;;      Locals:         3       0       0
  5506 ;;      Temps:          0       0       0
  5507 ;;      Totals:         4       0       0
  5508 ;;Total ram usage:        4 bytes
  5509 ;; Hardware stack levels used: 1
  5510 ;; Hardware stack levels required when called: 4
  5511 ;; This function calls:
  5512 ;;		_CantaIR
  5513 ;;		_EscriuPrimeraOrdre
  5514 ;;		_Espera
  5515 ;;		_TI_NewTimer
  5516 ;;		_WaitForBusy
  5517 ;; This function is called by:
  5518 ;;		_main
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text48
  5523   000BE8                     __ptext48:
  5524                           	callstack 0
  5525   000BE8                     _LCD_Init:
  5526                           	callstack 26
  5527                           
  5528                           ;incstack = 0
  5529                           ;LCD_Init@rows stored from wreg
  5530   000BE8  6E70               	movwf	LCD_Init@rows^0,c
  5531                           
  5532                           ;TAD_LCD.c: 78:  int i;;TAD_LCD.c: 79:  TI_NewTimer(&Timer);
  5533   000BEA  0E59               	movlw	low _Timer
  5534   000BEC  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  5535   000BEE  EC21  F009         	call	_TI_NewTimer	;wreg free
  5536                           
  5537                           ;TAD_LCD.c: 80:  Rows = rows; Columns = columns;
  5538   000BF2  C070  F038         	movff	LCD_Init@rows,_Rows
  5539   000BF6  C06F  F037         	movff	LCD_Init@columns,_Columns
  5540                           
  5541                           ;TAD_LCD.c: 81:  RowAct = ColumnAct = 0;
  5542   000BFA  6A35               	clrf	_ColumnAct^0,c
  5543   000BFC  6A36               	clrf	_RowAct^0,c
  5544                           
  5545                           ;TAD_LCD.c: 82:  (TRISDbits.TRISD3 = TRISDbits.TRISD2 = TRISDbits.TRISD1 = 0);
  5546   000BFE  9295               	bcf	149,1,c	;volatile
  5547   000C00  9495               	bcf	149,2,c	;volatile
  5548   000C02  9695               	bcf	149,3,c	;volatile
  5549                           
  5550                           ;TAD_LCD.c: 83:  for (i = 0; i < 2; i++) {
  5551   000C04  6A71               	clrf	LCD_Init@i^0,c
  5552   000C06  6A72               	clrf	(LCD_Init@i+1)^0,c
  5553   000C08                     l3877:
  5554                           
  5555                           ;TAD_LCD.c: 84:   Espera(Timer, 255);
  5556   000C08  6869               	setf	Espera@ms^0,c
  5557   000C0A  5059               	movf	_Timer^0,w,c
  5558   000C0C  EC89  F009         	call	_Espera
  5559                           
  5560                           ;TAD_LCD.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  5561   000C10  0E03               	movlw	3
  5562   000C12  EC90  F006         	call	_EscriuPrimeraOrdre
  5563                           
  5564                           ;TAD_LCD.c: 88:   Espera(Timer, 20);
  5565   000C16  0E14               	movlw	20
  5566   000C18  6E69               	movwf	Espera@ms^0,c
  5567   000C1A  5059               	movf	_Timer^0,w,c
  5568   000C1C  EC89  F009         	call	_Espera
  5569                           
  5570                           ;TAD_LCD.c: 89:   EscriuPrimeraOrdre(0x02 | 0x01);
  5571   000C20  0E03               	movlw	3
  5572   000C22  EC90  F006         	call	_EscriuPrimeraOrdre
  5573                           
  5574                           ;TAD_LCD.c: 90:   Espera(Timer, 4);
  5575   000C26  D835               	call	PL56	;call to abstracted procedure
  5576   000C28  EC89  F009         	call	_Espera
  5577                           
  5578                           ;TAD_LCD.c: 91:   EscriuPrimeraOrdre(0x02 | 0x01);
  5579   000C2C  0E03               	movlw	3
  5580   000C2E  EC90  F006         	call	_EscriuPrimeraOrdre
  5581                           
  5582                           ;TAD_LCD.c: 92:   Espera(Timer, 4);
  5583   000C32  D82F               	call	PL56	;call to abstracted procedure
  5584   000C34  EC89  F009         	call	_Espera
  5585                           
  5586                           ;TAD_LCD.c: 95:   EscriuPrimeraOrdre(0x02);
  5587   000C38  0E02               	movlw	2
  5588   000C3A  EC90  F006         	call	_EscriuPrimeraOrdre
  5589                           
  5590                           ;TAD_LCD.c: 96:   Espera(Timer, 4);
  5591   000C3E  D829               	call	PL56	;call to abstracted procedure
  5592   000C40  EC89  F009         	call	_Espera
  5593                           
  5594                           ;TAD_LCD.c: 97:   CantaIR(0x20 | 0x08);
  5595   000C44  0E28               	movlw	40
  5596   000C46  EC53  F00A         	call	_CantaIR
  5597                           
  5598                           ;TAD_LCD.c: 100:   WaitForBusy(); CantaIR(0x08);
  5599   000C4A  ECFE  F008         	call	_WaitForBusy	;wreg free
  5600   000C4E  0E08               	movlw	8
  5601   000C50  EC53  F00A         	call	_CantaIR
  5602                           
  5603                           ;TAD_LCD.c: 101:   WaitForBusy(); CantaIR(0x01);
  5604   000C54  ECFE  F008         	call	_WaitForBusy	;wreg free
  5605   000C58  0E01               	movlw	1
  5606   000C5A  EC53  F00A         	call	_CantaIR
  5607                           
  5608                           ;TAD_LCD.c: 102:   Espera(Timer,10);
  5609   000C5E  EC8E  F00A         	call	PL62	;call to abstracted procedure
  5610   000C62  EC89  F009         	call	_Espera
  5611                           
  5612                           ;TAD_LCD.c: 103:   WaitForBusy(); CantaIR(0x04 | 0x02);
  5613   000C66  ECFE  F008         	call	_WaitForBusy	;wreg free
  5614   000C6A  0E06               	movlw	6
  5615   000C6C  EC53  F00A         	call	_CantaIR
  5616                           
  5617                           ;TAD_LCD.c: 104:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  5618   000C70  ECFE  F008         	call	_WaitForBusy	;wreg free
  5619   000C74  0E0F               	movlw	15
  5620   000C76  EC53  F00A         	call	_CantaIR
  5621                           
  5622                           ;TAD_LCD.c: 105:  }
  5623   000C7A  4A71               	infsnz	LCD_Init@i^0,f,c
  5624   000C7C  2A72               	incf	(LCD_Init@i+1)^0,f,c
  5625   000C7E  BE72               	btfsc	(LCD_Init@i+1)^0,7,c
  5626   000C80  D7C3               	goto	l3877
  5627   000C82  5072               	movf	(LCD_Init@i+1)^0,w,c
  5628   000C84  E105               	bnz	u2410
  5629   000C86  0E02               	movlw	2
  5630   000C88  5C71               	subwf	LCD_Init@i^0,w,c
  5631   000C8A  B0D8               	btfsc	status,0,c
  5632   000C8C  0012               	return	
  5633   000C8E  D7BC               	goto	l3877
  5634   000C90                     u2410:
  5635   000C90  0012               	return		;funcret
  5636   000C92                     __end_of_LCD_Init:
  5637                           	callstack 0
  5638   000C92                     PL56:
  5639                           	callstack 26
  5640   000C92  0E04               	movlw	4
  5641   000C94  6E69               	movwf	Espera@ms^0,c
  5642   000C96  5059               	movf	_Timer^0,w,c
  5643   000C98  0012               	return	
  5644   000C9A                     __end_ofPL56:
  5645                           	callstack 0
  5646                           
  5647 ;; *************** function _EscriuPrimeraOrdre *****************
  5648 ;; Defined at:
  5649 ;;		line 287 in file "TAD_LCD.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  ordre           1    wreg     unsigned char 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  ordre           1    1[COMRAM] unsigned char 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  1    wreg      void 
  5656 ;; Registers used:
  5657 ;;		wreg, status,2, status,0
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1
  5663 ;;      Params:         0       0       0
  5664 ;;      Locals:         1       0       0
  5665 ;;      Temps:          1       0       0
  5666 ;;      Totals:         2       0       0
  5667 ;;Total ram usage:        2 bytes
  5668 ;; Hardware stack levels used: 1
  5669 ;; Hardware stack levels required when called: 2
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_LCD_Init
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text49
  5678   000D20                     __ptext49:
  5679                           	callstack 0
  5680   000D20                     _EscriuPrimeraOrdre:
  5681                           	callstack 27
  5682                           
  5683                           ;incstack = 0
  5684                           ;EscriuPrimeraOrdre@ordre stored from wreg
  5685   000D20  6E5D               	movwf	EscriuPrimeraOrdre@ordre^0,c
  5686                           
  5687                           ;TAD_LCD.c: 289:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 0); (LATDbits.LATD3 = 0); (LATDbits.LATD2 = 0);
  5688   000D22  9E95               	bcf	149,7,c	;volatile
  5689                           
  5690                           ;TAD_LCD.c: 290:  (LATDbits.LATD1 = 1); (LATDbits.LATD1 = 1);
  5691   000D24  D837               	call	PL24	;call to abstracted procedure
  5692   000D26  828C               	bsf	140,1,c	;volatile
  5693                           
  5694                           ;TAD_LCD.c: 291:   (LATDbits.LATD7 = (ordre & 0x08 ? 1 : 0));
  5695   000D28  A65D               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  5696   000D2A  D003               	goto	u300
  5697   000D2C  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5698   000D2E  2A5C               	incf	??_EscriuPrimeraOrdre^0,f,c
  5699   000D30  D001               	goto	u318
  5700   000D32                     u300:
  5701   000D32  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5702   000D34                     u318:
  5703   000D34  325C               	rrcf	??_EscriuPrimeraOrdre^0,f,c
  5704   000D36  325C               	rrcf	??_EscriuPrimeraOrdre^0,f,c
  5705   000D38  508C               	movf	140,w,c	;volatile
  5706   000D3A  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5707   000D3C  0B7F               	andlw	-129
  5708   000D3E  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5709   000D40  6E8C               	movwf	140,c	;volatile
  5710                           
  5711                           ;TAD_LCD.c: 292:   (LATDbits.LATD6 = (ordre & 0x04 ? 1 : 0));
  5712   000D42  A45D               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  5713   000D44  D003               	goto	u320
  5714   000D46  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5715   000D48  2A5C               	incf	??_EscriuPrimeraOrdre^0,f,c
  5716   000D4A  D001               	goto	u338
  5717   000D4C                     u320:
  5718   000D4C  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5719   000D4E                     u338:
  5720   000D4E  3A5C               	swapf	??_EscriuPrimeraOrdre^0,f,c
  5721   000D50  465C               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5722   000D52  465C               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5723   000D54  508C               	movf	140,w,c	;volatile
  5724   000D56  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5725   000D58  0BBF               	andlw	-65
  5726   000D5A  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5727   000D5C  6E8C               	movwf	140,c	;volatile
  5728                           
  5729                           ;TAD_LCD.c: 293:   (LATDbits.LATD5 = (ordre & 0x02 ? 1 : 0));
  5730   000D5E  A25D               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  5731   000D60  D003               	goto	u340
  5732   000D62  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5733   000D64  2A5C               	incf	??_EscriuPrimeraOrdre^0,f,c
  5734   000D66  D001               	goto	u358
  5735   000D68                     u340:
  5736   000D68  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5737   000D6A                     u358:
  5738   000D6A  3A5C               	swapf	??_EscriuPrimeraOrdre^0,f,c
  5739   000D6C  465C               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  5740   000D6E  508C               	movf	140,w,c	;volatile
  5741   000D70  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5742   000D72  0BDF               	andlw	-33
  5743   000D74  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5744   000D76  6E8C               	movwf	140,c	;volatile
  5745                           
  5746                           ;TAD_LCD.c: 294:   (LATDbits.LATD4 = (ordre & 0x01 ? 1 : 0));
  5747   000D78  A05D               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  5748   000D7A  D003               	goto	u360
  5749   000D7C  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5750   000D7E  2A5C               	incf	??_EscriuPrimeraOrdre^0,f,c
  5751   000D80  D001               	goto	u378
  5752   000D82                     u360:
  5753   000D82  6A5C               	clrf	??_EscriuPrimeraOrdre^0,c
  5754   000D84                     u378:
  5755   000D84  3A5C               	swapf	??_EscriuPrimeraOrdre^0,f,c
  5756   000D86  508C               	movf	140,w,c	;volatile
  5757   000D88  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5758   000D8A  0BEF               	andlw	-17
  5759   000D8C  185C               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  5760   000D8E  6E8C               	movwf	140,c	;volatile
  5761                           
  5762                           ;TAD_LCD.c: 295:  (LATDbits.LATD1 = 0);
  5763   000D90  928C               	bcf	140,1,c	;volatile
  5764   000D92  0012               	return		;funcret
  5765   000D94                     __end_of_EscriuPrimeraOrdre:
  5766                           	callstack 0
  5767   000D94                     PL24:
  5768                           	callstack 24
  5769   000D94  9C95               	bcf	149,6,c	;volatile
  5770   000D96  9A95               	bcf	149,5,c	;volatile
  5771   000D98  9895               	bcf	149,4,c	;volatile
  5772   000D9A  968C               	bcf	140,3,c	;volatile
  5773   000D9C  948C               	bcf	140,2,c	;volatile
  5774   000D9E  828C               	bsf	140,1,c	;volatile
  5775   000DA0  0012               	return	
  5776   000DA2                     __end_ofPL24:
  5777                           	callstack 0
  5778                           
  5779 ;; *************** function _KPAD_Motor *****************
  5780 ;; Defined at:
  5781 ;;		line 101 in file "TAD_KEYPAD.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  currCol         1   25[COMRAM] unsigned char 
  5786 ;;  currRow         1   24[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1
  5796 ;;      Params:         0       0       0
  5797 ;;      Locals:         2       0       0
  5798 ;;      Temps:          2       0       0
  5799 ;;      Totals:         4       0       0
  5800 ;;Total ram usage:        4 bytes
  5801 ;; Hardware stack levels used: 1
  5802 ;; Hardware stack levels required when called: 6
  5803 ;; This function calls:
  5804 ;;		_BUZZ_Play
  5805 ;;		_LCD_PreviewChar
  5806 ;;		_TI_GetTics
  5807 ;;		_TI_ResetTics
  5808 ;;		_escombra
  5809 ;; This function is called by:
  5810 ;;		_main
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text50
  5815   0001F8                     __ptext50:
  5816                           	callstack 0
  5817   0001F8                     _KPAD_Motor:
  5818                           	callstack 24
  5819                           
  5820                           ;TAD_KEYPAD.c: 102:     unsigned char currRow;;TAD_KEYPAD.c: 103:     unsigned char curr
      +                          Col;;TAD_KEYPAD.c: 105:     switch(state){
  5821                           
  5822                           ;incstack = 0
  5823   0001F8  D0B4               	goto	l4165
  5824   0001FA                     l4063:
  5825                           
  5826                           ;TAD_KEYPAD.c: 109:             if(smsPressed && TI_GetTics(timerSms) >= 4000){
  5827   0001FA  503A               	movf	_smsPressed^0,w,c
  5828   0001FC  E00C               	bz	l4071
  5829   0001FE  505B               	movf	_timerSms^0,w,c
  5830   000200  EC84  F008         	call	_TI_GetTics
  5831   000204  505F               	movf	(?_TI_GetTics+3)^0,w,c
  5832   000206  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  5833   000208  E102               	bnz	u2640
  5834   00020A  D8D4               	call	PL44	;call to abstracted procedure
  5835   00020C  E304               	bnc	l4071
  5836   00020E                     u2640:
  5837                           
  5838                           ;TAD_KEYPAD.c: 110:                 smsPressed = 0;
  5839   00020E  6A3A               	clrf	_smsPressed^0,c
  5840                           
  5841                           ;TAD_KEYPAD.c: 111:                 previousValue = 0xFF;
  5842   000210  683C               	setf	_previousValue^0,c
  5843                           
  5844                           ;TAD_KEYPAD.c: 112:                 ready = 1;
  5845   000212  0E01               	movlw	1
  5846   000214  6E3B               	movwf	_ready^0,c
  5847   000216                     l4071:
  5848                           
  5849                           ;TAD_KEYPAD.c: 115:             escombra();
  5850   000216  EC7A  F00A         	call	_escombra	;wreg free
  5851                           
  5852                           ;TAD_KEYPAD.c: 117:             if(PORTCbits.RC0 == 1 || PORTCbits.RC1 == 1 || PORTCbits
      +                          .RC3 == 1){
  5853   00021A  A082               	btfss	130,0,c	;volatile
  5854   00021C  B282               	btfsc	130,1,c	;volatile
  5855   00021E  D002               	goto	u2670
  5856   000220  A682               	btfss	130,3,c	;volatile
  5857   000222  0012               	return	
  5858   000224                     u2670:
  5859                           
  5860                           ;TAD_KEYPAD.c: 118:                 ready = 0;
  5861   000224  6A3B               	clrf	_ready^0,c
  5862   000226  D068               	goto	u2820
  5863   000228                     l4081:
  5864                           
  5865                           ;TAD_KEYPAD.c: 120:                 TI_ResetTics(timerRebots);
  5866   000228  505A               	movf	_timerRebots^0,w,c
  5867   00022A  EF27  F00A         	goto	_TI_ResetTics
  5868   00022E                     l220:
  5869                           
  5870                           ;TAD_KEYPAD.c: 125:             if(!(PORTCbits.RC0 == 1 || PORTCbits.RC1 == 1 || PORTCbi
      +                          ts.RC3 == 1)){
  5871   00022E  A082               	btfss	130,0,c	;volatile
  5872   000230  B282               	btfsc	130,1,c	;volatile
  5873   000232  D005               	goto	l4089
  5874   000234  B682               	btfsc	130,3,c	;volatile
  5875   000236  D003               	goto	l4089
  5876                           
  5877                           ;TAD_KEYPAD.c: 126:                 state = 1;
  5878   000238  0E01               	movlw	1
  5879   00023A  6E40               	movwf	_state^0,c
  5880                           
  5881                           ;TAD_KEYPAD.c: 127:             }
  5882   00023C  0C01               	retlw	1
  5883   00023E                     l4089:
  5884   00023E  505A               	movf	_timerRebots^0,w,c
  5885   000240  EC84  F008         	call	_TI_GetTics
  5886   000244  505F               	movf	(?_TI_GetTics+3)^0,w,c
  5887   000246  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  5888   000248  105D               	iorwf	(?_TI_GetTics+1)^0,w,c
  5889   00024A  E104               	bnz	u2710
  5890   00024C  0E50               	movlw	80
  5891   00024E  5C5C               	subwf	?_TI_GetTics^0,w,c
  5892   000250  A0D8               	btfss	status,0,c
  5893   000252  0012               	return	
  5894   000254                     u2710:
  5895                           
  5896                           ;TAD_KEYPAD.c: 129:                 state++;
  5897   000254  2A40               	incf	_state^0,f,c
  5898                           
  5899                           ;TAD_KEYPAD.c: 130:                 TI_ResetTics(timerSms);
  5900   000256  505B               	movf	_timerSms^0,w,c
  5901   000258  EF27  F00A         	goto	_TI_ResetTics
  5902   00025C                     l4095:
  5903                           
  5904                           ;TAD_KEYPAD.c: 135:             currCol = (PORTC & 0x0B) >> 1;
  5905   00025C  90D8               	bcf	status,0,c
  5906   00025E  3082               	rrcf	130,w,c	;volatile
  5907   000260  0B05               	andlw	5
  5908   000262  6E75               	movwf	KPAD_Motor@currCol^0,c
  5909                           
  5910                           ;TAD_KEYPAD.c: 136:             if(currCol == 4) currCol = 2;
  5911   000264  0E04               	movlw	4
  5912   000266  1875               	xorwf	KPAD_Motor@currCol^0,w,c
  5913   000268  E102               	bnz	l4099
  5914   00026A  0E02               	movlw	2
  5915   00026C  6E75               	movwf	KPAD_Motor@currCol^0,c
  5916   00026E                     l4099:
  5917                           
  5918                           ;TAD_KEYPAD.c: 140:             currRow = (PORTB & 0x0F) >> 1;
  5919   00026E  90D8               	bcf	status,0,c
  5920   000270  3081               	rrcf	129,w,c	;volatile
  5921   000272  0B07               	andlw	7
  5922   000274  6E74               	movwf	KPAD_Motor@currRow^0,c
  5923                           
  5924                           ;TAD_KEYPAD.c: 141:             if(currRow == 4) currRow--;
  5925   000276  0E04               	movlw	4
  5926   000278  1874               	xorwf	KPAD_Motor@currRow^0,w,c
  5927   00027A  E101               	bnz	l4105
  5928   00027C  0674               	decf	KPAD_Motor@currRow^0,f,c
  5929   00027E                     l4105:
  5930                           
  5931                           ;TAD_KEYPAD.c: 144:             currentValue = KPAD_INT_VALUES[currRow][currCol];
  5932   00027E  5074               	movf	KPAD_Motor@currRow^0,w,c
  5933   000280  0D03               	mullw	3
  5934   000282  0EF5               	movlw	low _KPAD_INT_VALUES
  5935   000284  24F3               	addwf	243,w,c
  5936   000286  6E72               	movwf	??_KPAD_Motor^0,c
  5937   000288  0E1E               	movlw	high _KPAD_INT_VALUES
  5938   00028A  20F4               	addwfc	prodh,w,c
  5939   00028C  6E73               	movwf	(??_KPAD_Motor+1)^0,c
  5940   00028E  5075               	movf	KPAD_Motor@currCol^0,w,c
  5941   000290  D881               	call	PL12	;call to abstracted procedure
  5942   000292  CFF5 F03D          	movff	tablat,_currentValue
  5943                           
  5944                           ;TAD_KEYPAD.c: 146:             if(smsMode && currentValue != 9 && currentValue != 11) s
      +                          tate++;
  5945   000296  503F               	movf	_smsMode^0,w,c
  5946   000298  E008               	bz	l4115
  5947   00029A  0E09               	movlw	9
  5948   00029C  183D               	xorwf	_currentValue^0,w,c
  5949   00029E  E005               	bz	l4115
  5950   0002A0  0E0B               	movlw	11
  5951   0002A2  183D               	xorwf	_currentValue^0,w,c
  5952   0002A4  E002               	bz	l4115
  5953   0002A6                     u2760:
  5954   0002A6  2A40               	incf	_state^0,f,c
  5955   0002A8  0012               	return	
  5956   0002AA                     l4115:
  5957   0002AA  0E05               	movlw	5
  5958   0002AC  6E40               	movwf	_state^0,c
  5959   0002AE  0C05               	retlw	5
  5960   0002B0                     l4117:
  5961                           
  5962                           ;TAD_KEYPAD.c: 151:             if(previousValue == currentValue){
  5963   0002B0  503D               	movf	_currentValue^0,w,c
  5964   0002B2  183C               	xorwf	_previousValue^0,w,c
  5965   0002B4  E10D               	bnz	l4123
  5966                           
  5967                           ;TAD_KEYPAD.c: 152:                 if(++pressCount == KPAD_PRESSES[currentValue]) press
      +                          Count = 0;
  5968   0002B6  0EE9               	movlw	low _KPAD_PRESSES
  5969   0002B8  243D               	addwf	_currentValue^0,w,c
  5970   0002BA  6EF6               	movwf	tblptrl,c
  5971   0002BC  6AF7               	clrf	tblptrh,c
  5972   0002BE  0E1E               	movlw	high _KPAD_PRESSES
  5973   0002C0  22F7               	addwfc	tblptrh,f,c
  5974   0002C2                     	if	0	;There are less than 3 active tblptr bytes
  5975   0002C2                     	endif
  5976   0002C2  0008               	tblrd		*
  5977   0002C4  50F5               	movf	tablat,w,c
  5978   0002C6  2A39               	incf	_pressCount^0,f,c
  5979   0002C8  6239               	cpfseq	_pressCount^0,c
  5980   0002CA  D00C               	goto	l4131
  5981   0002CC                     u2780:
  5982   0002CC  6A39               	clrf	_pressCount^0,c
  5983   0002CE  D00A               	goto	l4131
  5984   0002D0                     l4123:
  5985                           
  5986                           ;TAD_KEYPAD.c: 156:                 if(smsPressed){
  5987   0002D0  503A               	movf	_smsPressed^0,w,c
  5988   0002D2  E0FC               	bz	u2780
  5989                           
  5990                           ;TAD_KEYPAD.c: 157:                     currentValue = previousValue;
  5991   0002D4  C03C  F03D         	movff	_previousValue,_currentValue
  5992                           
  5993                           ;TAD_KEYPAD.c: 158:                     state = ready = 1;
  5994   0002D8  0E01               	movlw	1
  5995   0002DA  6E3B               	movwf	_ready^0,c
  5996   0002DC  C03B  F040         	movff	_ready,_state
  5997                           
  5998                           ;TAD_KEYPAD.c: 159:                     smsPressed = 0;
  5999   0002E0  6A3A               	clrf	_smsPressed^0,c
  6000                           
  6001                           ;TAD_KEYPAD.c: 160:                     break;
  6002   0002E2  0012               	return	
  6003   0002E4                     l4131:
  6004                           
  6005                           ;TAD_KEYPAD.c: 165:             smsPressed = 1;
  6006   0002E4  0E01               	movlw	1
  6007   0002E6  6E3A               	movwf	_smsPressed^0,c
  6008                           
  6009                           ;TAD_KEYPAD.c: 166:             previousValue = currentValue;
  6010   0002E8  C03D  F03C         	movff	_currentValue,_previousValue
  6011   0002EC  D7DC               	goto	u2760
  6012   0002EE                     l234:
  6013                           
  6014                           ;TAD_KEYPAD.c: 171:             if(!(PORTCbits.RC0 == 1 || PORTCbits.RC1 == 1 || PORTCbi
      +                          ts.RC3 == 1)){
  6015   0002EE  A082               	btfss	130,0,c	;volatile
  6016   0002F0  B282               	btfsc	130,1,c	;volatile
  6017   0002F2  0012               	return	
  6018   0002F4  B682               	btfsc	130,3,c	;volatile
  6019   0002F6  0012               	return	
  6020   0002F8                     u2820:
  6021                           
  6022                           ;TAD_KEYPAD.c: 172:                 state++;
  6023   0002F8  2A40               	incf	_state^0,f,c
  6024   0002FA  D796               	goto	l4081
  6025   0002FC                     l236:
  6026                           
  6027                           ;TAD_KEYPAD.c: 179:             if(PORTCbits.RC0 == 1 || PORTCbits.RC1 == 1 || PORTCbits
      +                          .RC3 == 1){
  6028   0002FC  A082               	btfss	130,0,c	;volatile
  6029   0002FE  B282               	btfsc	130,1,c	;volatile
  6030   000300  D002               	goto	u2850
  6031   000302  A682               	btfss	130,3,c	;volatile
  6032   000304  D002               	goto	l4151
  6033   000306                     u2850:
  6034                           
  6035                           ;TAD_KEYPAD.c: 180:                 state--;
  6036   000306  0640               	decf	_state^0,f,c
  6037                           
  6038                           ;TAD_KEYPAD.c: 181:             }
  6039   000308  0012               	return	
  6040   00030A                     l4151:
  6041   00030A  505A               	movf	_timerRebots^0,w,c
  6042   00030C  EC84  F008         	call	_TI_GetTics
  6043   000310  505F               	movf	(?_TI_GetTics+3)^0,w,c
  6044   000312  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  6045   000314  105D               	iorwf	(?_TI_GetTics+1)^0,w,c
  6046   000316  E104               	bnz	u2860
  6047   000318  0E50               	movlw	80
  6048   00031A  5C5C               	subwf	?_TI_GetTics^0,w,c
  6049   00031C  A0D8               	btfss	status,0,c
  6050   00031E  0012               	return	
  6051   000320                     u2860:
  6052                           
  6053                           ;TAD_KEYPAD.c: 183:                 state = 1;
  6054   000320  0E01               	movlw	1
  6055   000322  6E40               	movwf	_state^0,c
  6056                           
  6057                           ;TAD_KEYPAD.c: 184:                 if(!smsMode || currentValue == 9 || currentValue == 
      +                          11) ready = 1;
  6058   000324  503F               	movf	_smsMode^0,w,c
  6059   000326  E006               	bz	u2890
  6060   000328  0E09               	movlw	9
  6061   00032A  183D               	xorwf	_currentValue^0,w,c
  6062   00032C  E003               	bz	u2890
  6063   00032E  0E0B               	movlw	11
  6064   000330  183D               	xorwf	_currentValue^0,w,c
  6065   000332  E103               	bnz	l4161
  6066   000334                     u2890:
  6067   000334  0E01               	movlw	1
  6068   000336  6E3B               	movwf	_ready^0,c
  6069   000338  D00A               	goto	l245
  6070   00033A                     l4161:
  6071   00033A  D835               	call	PL26	;call to abstracted procedure
  6072   00033C  CFDE F072          	movff	postinc2,??_KPAD_Motor
  6073   000340  CFDD F073          	movff	postdec2,??_KPAD_Motor+1
  6074   000344  5039               	movf	_pressCount^0,w,c
  6075   000346  D826               	call	PL12	;call to abstracted procedure
  6076   000348  50F5               	movf	tablat,w,c
  6077   00034A  EC61  F00A         	call	_LCD_PreviewChar
  6078   00034E                     l245:
  6079                           
  6080                           ;TAD_KEYPAD.c: 186:                 BUZZ_Play(KPAD_NOTES[currentValue]);
  6081   00034E  0ED1               	movlw	low _KPAD_NOTES
  6082   000350  243D               	addwf	_currentValue^0,w,c
  6083   000352  6EF6               	movwf	tblptrl,c
  6084   000354  6AF7               	clrf	tblptrh,c
  6085   000356  0E1E               	movlw	high _KPAD_NOTES
  6086   000358  22F7               	addwfc	tblptrh,f,c
  6087   00035A                     	if	0	;There are less than 3 active tblptr bytes
  6088   00035A                     	endif
  6089   00035A  0008               	tblrd		*
  6090   00035C  50F5               	movf	tablat,w,c
  6091   00035E  EF9D  F00A         	goto	_BUZZ_Play
  6092   000362                     l4165:
  6093   000362  5040               	movf	_state^0,w,c
  6094   000364  6E72               	movwf	??_KPAD_Motor^0,c
  6095   000366  6A73               	clrf	(??_KPAD_Motor+1)^0,c
  6096                           
  6097                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6098                           ; Switch size 1, requested type "space"
  6099                           ; Number of cases is 1, Range of values is 0 to 0
  6100                           ; switch strategies available:
  6101                           ; Name         Instructions Cycles
  6102                           ; simple_byte            4     3 (average)
  6103                           ;	Chosen strategy is simple_byte
  6104   000368  5073               	movf	(??_KPAD_Motor+1)^0,w,c
  6105   00036A  A4D8               	btfss	status,2,c
  6106   00036C  0012               	return	
  6107                           
  6108                           ; Switch size 1, requested type "space"
  6109                           ; Number of cases is 7, Range of values is 0 to 6
  6110                           ; switch strategies available:
  6111                           ; Name         Instructions Cycles
  6112                           ; simple_byte           22    12 (average)
  6113                           ;	Chosen strategy is simple_byte
  6114   00036E  5072               	movf	??_KPAD_Motor^0,w,c
  6115   000370  B4D8               	btfsc	status,2,c
  6116   000372  0012               	return	
  6117   000374  0A01               	xorlw	1	; case 1
  6118   000376  E101 D740          	bz	l4063
  6119   00037A  0A03               	xorlw	3	; case 2
  6120   00037C  E101 D757          	bz	l220
  6121   000380  0A01               	xorlw	1	; case 3
  6122   000382  E101 D76B          	bz	l4095
  6123   000386  0A07               	xorlw	7	; case 4
  6124   000388  E093               	bz	l4117
  6125   00038A  0A01               	xorlw	1	; case 5
  6126   00038C  E0B0               	bz	l234
  6127   00038E  0A03               	xorlw	3	; case 6
  6128   000390  E0B5               	bz	l236
  6129   000392  0012               	return		;funcret
  6130   000394                     __end_of_KPAD_Motor:
  6131                           	callstack 0
  6132   000394                     PL12:
  6133                           	callstack 24
  6134   000394  2672               	addwf	??_KPAD_Motor^0,f,c
  6135   000396  0E00               	movlw	0
  6136   000398  2273               	addwfc	(??_KPAD_Motor+1)^0,f,c
  6137   00039A  C072  FFF6         	movff	??_KPAD_Motor,tblptrl
  6138   00039E  C073  FFF7         	movff	??_KPAD_Motor+1,tblptrh
  6139   0003A2                     	if	0	;tblptru may be non-zero
  6140   0003A2                     	endif
  6141   0003A2                     	if	0	;tblptru may be non-zero
  6142   0003A2                     	endif
  6143   0003A2  0008               	tblrd		*
  6144   0003A4  0C00               	retlw	0
  6145   0003A6                     __end_ofPL12:
  6146                           	callstack 0
  6147   0003A6                     PL26:
  6148                           	callstack 27
  6149   0003A6  503D               	movf	_currentValue^0,w,c
  6150   0003A8  0D02               	mullw	2
  6151   0003AA  50F3               	movf	243,w,c
  6152   0003AC  0FC8               	addlw	low _KPAD_VALUES
  6153   0003AE  6ED9               	movwf	fsr2l,c
  6154   0003B0  6ADA               	clrf	fsr2h,c
  6155   0003B2  0012               	return	
  6156   0003B4                     __end_ofPL26:
  6157                           	callstack 0
  6158   0003B4                     PL44:
  6159                           	callstack 25
  6160   0003B4  0EA0               	movlw	160
  6161   0003B6  5C5C               	subwf	?_TI_GetTics^0,w,c
  6162   0003B8  0E0F               	movlw	15
  6163   0003BA  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  6164   0003BC  0012               	return	
  6165   0003BE                     __end_ofPL44:
  6166                           	callstack 0
  6167                           
  6168 ;; *************** function _escombra *****************
  6169 ;; Defined at:
  6170 ;;		line 193 in file "TAD_KEYPAD.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;		None
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;		None
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  1    wreg      void 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1
  6184 ;;      Params:         0       0       0
  6185 ;;      Locals:         0       0       0
  6186 ;;      Temps:          0       0       0
  6187 ;;      Totals:         0       0       0
  6188 ;;Total ram usage:        0 bytes
  6189 ;; Hardware stack levels used: 1
  6190 ;; Hardware stack levels required when called: 2
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_KPAD_Motor
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text51
  6199   0014F4                     __ptext51:
  6200                           	callstack 0
  6201   0014F4                     _escombra:
  6202                           	callstack 27
  6203                           
  6204                           ;TAD_KEYPAD.c: 194:     rowValues <<= 1;
  6205                           
  6206                           ;incstack = 0
  6207   0014F4  90D8               	bcf	status,0,c
  6208   0014F6  363E               	rlcf	_rowValues^0,f,c
  6209                           
  6210                           ;TAD_KEYPAD.c: 195:     if(rowValues == 0x10) rowValues = 0x01;
  6211   0014F8  0E10               	movlw	16
  6212   0014FA  183E               	xorwf	_rowValues^0,w,c
  6213   0014FC  E102               	bnz	l3619
  6214   0014FE  0E01               	movlw	1
  6215   001500  6E3E               	movwf	_rowValues^0,c
  6216   001502                     l3619:
  6217                           
  6218                           ;TAD_KEYPAD.c: 196:     PORTB = (PORTB & 0xF0) | rowValues;
  6219   001502  5081               	movf	129,w,c	;volatile
  6220   001504  0BF0               	andlw	240
  6221   001506  103E               	iorwf	_rowValues^0,w,c
  6222   001508  6E81               	movwf	129,c	;volatile
  6223   00150A  0012               	return		;funcret
  6224   00150C                     __end_of_escombra:
  6225                           	callstack 0
  6226                           
  6227 ;; *************** function _LCD_PreviewChar *****************
  6228 ;; Defined at:
  6229 ;;		line 180 in file "TAD_LCD.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  c               1    wreg     unsigned char 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  c               1   21[COMRAM] unsigned char 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      void 
  6236 ;; Registers used:
  6237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1
  6243 ;;      Params:         0       0       0
  6244 ;;      Locals:         1       0       0
  6245 ;;      Temps:          0       0       0
  6246 ;;      Totals:         1       0       0
  6247 ;;Total ram usage:        1 bytes
  6248 ;; Hardware stack levels used: 1
  6249 ;; Hardware stack levels required when called: 5
  6250 ;; This function calls:
  6251 ;;		_CantaData
  6252 ;;		_LCD_GotoXY
  6253 ;;		_WaitForBusy
  6254 ;; This function is called by:
  6255 ;;		_KPAD_Motor
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           	psect	text52
  6260   0014C2                     __ptext52:
  6261                           	callstack 0
  6262   0014C2                     _LCD_PreviewChar:
  6263                           	callstack 24
  6264                           
  6265                           ;incstack = 0
  6266                           ;LCD_PreviewChar@c stored from wreg
  6267   0014C2  6E71               	movwf	LCD_PreviewChar@c^0,c
  6268                           
  6269                           ;TAD_LCD.c: 182:     WaitForBusy(); CantaData(c);
  6270   0014C4  ECFE  F008         	call	_WaitForBusy	;wreg free
  6271   0014C8  5071               	movf	LCD_PreviewChar@c^0,w,c
  6272   0014CA  EC3E  F009         	call	_CantaData
  6273                           
  6274                           ;TAD_LCD.c: 183:     LCD_GotoXY(ColumnAct, RowAct);
  6275   0014CE  D802               	call	PL58	;call to abstracted procedure
  6276   0014D0  EF48  F007         	goto	_LCD_GotoXY
  6277   0014D4                     __end_of_LCD_PreviewChar:
  6278                           	callstack 0
  6279   0014D4                     PL58:
  6280                           	callstack 24
  6281   0014D4  C036  F06A         	movff	_RowAct,LCD_GotoXY@Row
  6282   0014D8  5035               	movf	_ColumnAct^0,w,c
  6283   0014DA  0012               	return	
  6284   0014DC                     __end_ofPL58:
  6285                           	callstack 0
  6286                           
  6287 ;; *************** function _KPAD_Init *****************
  6288 ;; Defined at:
  6289 ;;		line 58 in file "TAD_KEYPAD.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1
  6303 ;;      Params:         0       0       0
  6304 ;;      Locals:         0       0       0
  6305 ;;      Temps:          0       0       0
  6306 ;;      Totals:         0       0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used: 1
  6309 ;; Hardware stack levels required when called: 3
  6310 ;; This function calls:
  6311 ;;		_TI_NewTimer
  6312 ;; This function is called by:
  6313 ;;		_main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text53
  6318   0013B8                     __ptext53:
  6319                           	callstack 0
  6320   0013B8                     _KPAD_Init:
  6321                           	callstack 27
  6322                           
  6323                           ;TAD_KEYPAD.c: 60:     TRISCbits.TRISC0 = 1;
  6324                           
  6325                           ;incstack = 0
  6326   0013B8  8094               	bsf	148,0,c	;volatile
  6327                           
  6328                           ;TAD_KEYPAD.c: 61:     TRISCbits.TRISC1 = 1;
  6329   0013BA  8294               	bsf	148,1,c	;volatile
  6330                           
  6331                           ;TAD_KEYPAD.c: 62:     TRISCbits.TRISC3 = 1;
  6332   0013BC  8694               	bsf	148,3,c	;volatile
  6333                           
  6334                           ;TAD_KEYPAD.c: 63:     TRISBbits.TRISB0 = 0;
  6335   0013BE  9093               	bcf	147,0,c	;volatile
  6336                           
  6337                           ;TAD_KEYPAD.c: 64:     TRISBbits.TRISB1 = 0;
  6338   0013C0  9293               	bcf	147,1,c	;volatile
  6339                           
  6340                           ;TAD_KEYPAD.c: 65:     TRISBbits.TRISB2 = 0;
  6341   0013C2  9493               	bcf	147,2,c	;volatile
  6342                           
  6343                           ;TAD_KEYPAD.c: 66:     TRISBbits.TRISB3 = 0;
  6344   0013C4  9693               	bcf	147,3,c	;volatile
  6345                           
  6346                           ;TAD_KEYPAD.c: 68:     smsMode = ready = 0;
  6347   0013C6  6A3B               	clrf	_ready^0,c
  6348   0013C8  6A3F               	clrf	_smsMode^0,c
  6349                           
  6350                           ;TAD_KEYPAD.c: 69:     state = 0;
  6351   0013CA  6A40               	clrf	_state^0,c
  6352                           
  6353                           ;TAD_KEYPAD.c: 70:     rowValues = 0x01;
  6354   0013CC  0E01               	movlw	1
  6355   0013CE  6E3E               	movwf	_rowValues^0,c
  6356                           
  6357                           ;TAD_KEYPAD.c: 71:     TI_NewTimer(&timerSms);
  6358   0013D0  0E5B               	movlw	low _timerSms
  6359   0013D2  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  6360   0013D4  EC21  F009         	call	_TI_NewTimer	;wreg free
  6361                           
  6362                           ;TAD_KEYPAD.c: 72:     TI_NewTimer(&timerRebots);
  6363   0013D8  0E5A               	movlw	low _timerRebots
  6364   0013DA  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  6365   0013DC  EF21  F009         	goto	_TI_NewTimer	;wreg free
  6366   0013E0                     __end_of_KPAD_Init:
  6367                           	callstack 0
  6368                           
  6369 ;; *************** function _JOY_Motor *****************
  6370 ;; Defined at:
  6371 ;;		line 35 in file "TAD_JOYSTICK.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;		None
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;		None
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1
  6385 ;;      Params:         0       0       0
  6386 ;;      Locals:         0       0       0
  6387 ;;      Temps:          2       0       0
  6388 ;;      Totals:         2       0       0
  6389 ;;Total ram usage:        2 bytes
  6390 ;; Hardware stack levels used: 1
  6391 ;; Hardware stack levels required when called: 2
  6392 ;; This function calls:
  6393 ;;		Nothing
  6394 ;; This function is called by:
  6395 ;;		_main
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text54
  6400   00104A                     __ptext54:
  6401                           	callstack 0
  6402   00104A                     _JOY_Motor:
  6403                           	callstack 28
  6404                           
  6405                           ;TAD_JOYSTICK.c: 38:     switch(state){
  6406                           
  6407                           ;incstack = 0
  6408   00104A  D026               	goto	l2885
  6409   00104C                     l2849:
  6410                           
  6411                           ;TAD_JOYSTICK.c: 40:             if(!enabled) break;
  6412   00104C  5030               	movf	_enabled^0,w,c
  6413   00104E  E101               	bnz	l2853
  6414   001050  0012               	return	
  6415   001052                     l2853:
  6416                           
  6417                           ;TAD_JOYSTICK.c: 41:             ADCON0bits.CHS = 0;
  6418   001052  0EC3               	movlw	-61
  6419   001054  16C2               	andwf	194,f,c	;volatile
  6420                           
  6421                           ;TAD_JOYSTICK.c: 42:             ADCON0bits.ADON = 1;
  6422   001056  80C2               	bsf	194,0,c	;volatile
  6423                           
  6424                           ;TAD_JOYSTICK.c: 43:             ADCON0bits.GO = 1;
  6425   001058  82C2               	bsf	194,1,c	;volatile
  6426                           
  6427                           ;TAD_JOYSTICK.c: 44:             state++;
  6428   00105A  2A2D               	incf	_state@TAD_JOYSTICK$F1125^0,f,c
  6429                           
  6430                           ;TAD_JOYSTICK.c: 45:             break;
  6431   00105C  0CC3               	retlw	195
  6432   00105E                     l514:
  6433                           
  6434                           ;TAD_JOYSTICK.c: 47:             if(ADCON0bits.GO) break;
  6435   00105E  B2C2               	btfsc	194,1,c	;volatile
  6436   001060  0012               	return	
  6437                           
  6438                           ;TAD_JOYSTICK.c: 48:             ADCON0bits.ADON = 0;
  6439   001062  90C2               	bcf	194,0,c	;volatile
  6440                           
  6441                           ;TAD_JOYSTICK.c: 49:             if(ADRESH < 0x10){
  6442   001064  0E10               	movlw	16
  6443   001066  60C4               	cpfslt	196,c	;volatile
  6444   001068  D002               	goto	l2867
  6445                           
  6446                           ;TAD_JOYSTICK.c: 50:                 lastMove = 2;
  6447   00106A  0E02               	movlw	2
  6448   00106C  D004               	goto	L2
  6449   00106E                     l2867:
  6450   00106E  0EF0               	movlw	240
  6451   001070  64C4               	cpfsgt	196,c	;volatile
  6452   001072  D003               	goto	l2871
  6453                           
  6454                           ;TAD_JOYSTICK.c: 53:                 lastMove = 1;
  6455   001074  0E01               	movlw	1
  6456   001076                     L2:
  6457   001076  6E2F               	movwf	_lastMove^0,c
  6458                           
  6459                           ;TAD_JOYSTICK.c: 54:             }
  6460   001078  D00D               	goto	l2881
  6461   00107A                     l2871:
  6462   00107A  0E6F               	movlw	111
  6463   00107C  64C4               	cpfsgt	196,c	;volatile
  6464   00107E  D00A               	goto	l2881
  6465   001080  0E91               	movlw	145
  6466   001082  60C4               	cpfslt	196,c	;volatile
  6467   001084  D007               	goto	l2881
  6468   001086  042F               	decf	_lastMove^0,w,c
  6469   001088  E003               	bz	u1400
  6470   00108A  0E02               	movlw	2
  6471   00108C  182F               	xorwf	_lastMove^0,w,c
  6472   00108E  E102               	bnz	l2881
  6473   001090                     u1400:
  6474                           
  6475                           ;TAD_JOYSTICK.c: 56:                 ready = 1;
  6476   001090  0E01               	movlw	1
  6477   001092  6E2E               	movwf	_ready@TAD_JOYSTICK$F1124^0,c
  6478   001094                     l2881:
  6479                           
  6480                           ;TAD_JOYSTICK.c: 58:             state--;
  6481   001094  062D               	decf	_state@TAD_JOYSTICK$F1125^0,f,c
  6482                           
  6483                           ;TAD_JOYSTICK.c: 59:             break;
  6484   001096  0012               	return	
  6485   001098                     l2885:
  6486   001098  502D               	movf	_state@TAD_JOYSTICK$F1125^0,w,c
  6487   00109A  6E5C               	movwf	??_JOY_Motor^0,c
  6488   00109C  6A5D               	clrf	(??_JOY_Motor+1)^0,c
  6489                           
  6490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6491                           ; Switch size 1, requested type "space"
  6492                           ; Number of cases is 1, Range of values is 0 to 0
  6493                           ; switch strategies available:
  6494                           ; Name         Instructions Cycles
  6495                           ; simple_byte            4     3 (average)
  6496                           ;	Chosen strategy is simple_byte
  6497   00109E  505D               	movf	(??_JOY_Motor+1)^0,w,c
  6498   0010A0  A4D8               	btfss	status,2,c
  6499   0010A2  0012               	return	
  6500                           
  6501                           ; Switch size 1, requested type "space"
  6502                           ; Number of cases is 2, Range of values is 0 to 1
  6503                           ; switch strategies available:
  6504                           ; Name         Instructions Cycles
  6505                           ; simple_byte            7     4 (average)
  6506                           ;	Chosen strategy is simple_byte
  6507   0010A4  505C               	movf	??_JOY_Motor^0,w,c
  6508   0010A6  E0D2               	bz	l2849
  6509   0010A8  0A01               	xorlw	1	; case 1
  6510   0010AA  E0D9               	bz	l514
  6511   0010AC  0012               	return		;funcret
  6512   0010AE                     __end_of_JOY_Motor:
  6513                           	callstack 0
  6514                           
  6515 ;; *************** function _JOY_Init *****************
  6516 ;; Defined at:
  6517 ;;		line 9 in file "TAD_JOYSTICK.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;		None
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		None
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1
  6531 ;;      Params:         0       0       0
  6532 ;;      Locals:         0       0       0
  6533 ;;      Temps:          0       0       0
  6534 ;;      Totals:         0       0       0
  6535 ;;Total ram usage:        0 bytes
  6536 ;; Hardware stack levels used: 1
  6537 ;; Hardware stack levels required when called: 2
  6538 ;; This function calls:
  6539 ;;		Nothing
  6540 ;; This function is called by:
  6541 ;;		_main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           	psect	text55
  6546   00167A                     __ptext55:
  6547                           	callstack 0
  6548   00167A                     _JOY_Init:
  6549                           	callstack 28
  6550                           
  6551                           ;TAD_JOYSTICK.c: 12:     TRISAbits.TRISA0 = 1;
  6552                           
  6553                           ;incstack = 0
  6554   00167A  8092               	bsf	146,0,c	;volatile
  6555                           
  6556                           ;TAD_JOYSTICK.c: 13:     state =
  6557   00167C  6A2F               	clrf	_lastMove^0,c
  6558   00167E  6A2D               	clrf	_state@TAD_JOYSTICK$F1125^0,c
  6559   001680  0012               	return		;funcret
  6560   001682                     __end_of_JOY_Init:
  6561                           	callstack 0
  6562                           
  6563 ;; *************** function _CNT_Motor *****************
  6564 ;; Defined at:
  6565 ;;		line 53 in file "TAD_COUNTER.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  aux             1   24[COMRAM] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1
  6579 ;;      Params:         0       0       0
  6580 ;;      Locals:         1       0       0
  6581 ;;      Temps:          2       0       0
  6582 ;;      Totals:         3       0       0
  6583 ;;Total ram usage:        3 bytes
  6584 ;; Hardware stack levels used: 1
  6585 ;; Hardware stack levels required when called: 6
  6586 ;; This function calls:
  6587 ;;		_KPAD_GetChar
  6588 ;;		_KPAD_StopInput
  6589 ;;		_LCD_Clear
  6590 ;;		_LCD_CursorOff
  6591 ;;		_LCD_GotoXY
  6592 ;;		_LCD_IsAvailable
  6593 ;;		_LCD_PutChar
  6594 ;;		_LCD_PutString
  6595 ;;		_MENU_Mostrar
  6596 ;;		_TI_GetTics
  6597 ;;		_TI_ResetTics
  6598 ;; This function is called by:
  6599 ;;		_main
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	text56
  6604   000552                     __ptext56:
  6605                           	callstack 0
  6606   000552                     _CNT_Motor:
  6607                           	callstack 24
  6608                           
  6609                           ;TAD_COUNTER.c: 54:     unsigned char aux;;TAD_COUNTER.c: 55:     switch (state) {
  6610                           
  6611                           ;incstack = 0
  6612   000552  D0AB               	goto	l4037
  6613   000554                     l3911:
  6614                           
  6615                           ;TAD_COUNTER.c: 57:             if(TI_GetTics(timerHora) >= 3980){
  6616   000554  5053               	movf	_timerHora^0,w,c
  6617   000556  EC84  F008         	call	_TI_GetTics
  6618   00055A  505F               	movf	(?_TI_GetTics+3)^0,w,c
  6619   00055C  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  6620   00055E  E105               	bnz	u2420
  6621   000560  0E8C               	movlw	140
  6622   000562  5C5C               	subwf	?_TI_GetTics^0,w,c
  6623   000564  0E0F               	movlw	15
  6624   000566  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  6625   000568  E319               	bnc	l845
  6626   00056A                     u2420:
  6627                           
  6628                           ;TAD_COUNTER.c: 58:                 aux = 'Z';
  6629   00056A  0E5A               	movlw	90
  6630   00056C  6E74               	movwf	CNT_Motor@aux^0,c
  6631                           
  6632                           ;TAD_COUNTER.c: 59:                 TI_ResetTics(timerHora);
  6633   00056E  5053               	movf	_timerHora^0,w,c
  6634   000570  EC27  F00A         	call	_TI_ResetTics
  6635                           
  6636                           ;TAD_COUNTER.c: 60:                 time[3]++;
  6637   000574  2A4B               	incf	(_time+3)^0,f,c
  6638                           
  6639                           ;TAD_COUNTER.c: 61:                 if(time[3] >= 10){
  6640   000576  0E09               	movlw	9
  6641   000578  644B               	cpfsgt	(_time+3)^0,c
  6642   00057A  D010               	goto	l845
  6643                           
  6644                           ;TAD_COUNTER.c: 62:                     time[3] = 0;
  6645   00057C  6A4B               	clrf	(_time+3)^0,c
  6646                           
  6647                           ;TAD_COUNTER.c: 63:                     time[2]++;
  6648   00057E  2A4A               	incf	(_time+2)^0,f,c
  6649                           
  6650                           ;TAD_COUNTER.c: 64:                     if(time[2] >= 6){
  6651   000580  0E05               	movlw	5
  6652   000582  644A               	cpfsgt	(_time+2)^0,c
  6653   000584  D00B               	goto	l845
  6654                           
  6655                           ;TAD_COUNTER.c: 65:                         time[2] = 0;
  6656   000586  6A4A               	clrf	(_time+2)^0,c
  6657                           
  6658                           ;TAD_COUNTER.c: 66:                         time[1]++;
  6659   000588  2A49               	incf	(_time+1)^0,f,c
  6660                           
  6661                           ;TAD_COUNTER.c: 67:                         if(time[1] >= 10){
  6662   00058A  0E09               	movlw	9
  6663   00058C  6449               	cpfsgt	(_time+1)^0,c
  6664   00058E  D006               	goto	l845
  6665                           
  6666                           ;TAD_COUNTER.c: 68:                             time[1] = 0;
  6667   000590  6A49               	clrf	(_time+1)^0,c
  6668                           
  6669                           ;TAD_COUNTER.c: 69:                             time[0]++;
  6670   000592  2A48               	incf	_time^0,f,c
  6671                           
  6672                           ;TAD_COUNTER.c: 70:                             if(time[0] >= 9){
  6673   000594  0E08               	movlw	8
  6674   000596  6448               	cpfsgt	_time^0,c
  6675   000598  D001               	goto	l845
  6676                           
  6677                           ;TAD_COUNTER.c: 71:                                 time[0] = 0;
  6678   00059A  6A48               	clrf	_time^0,c
  6679   00059C                     l845:
  6680                           
  6681                           ;TAD_COUNTER.c: 77:             if(showTime){
  6682   00059C  501C               	movf	_showTime^0,w,c
  6683   00059E  E010               	bz	l3955
  6684                           
  6685                           ;TAD_COUNTER.c: 78:                 if(aux == 'Z') state++;
  6686   0005A0  0E5A               	movlw	90
  6687   0005A2  1874               	xorwf	CNT_Motor@aux^0,w,c
  6688   0005A4  E101               	bnz	l3947
  6689   0005A6  2A1B               	incf	_state@TAD_COUNTER$F1357^0,f,c
  6690   0005A8                     l3947:
  6691                           
  6692                           ;TAD_COUNTER.c: 79:                 if((aux = KPAD_GetChar()) == '*'){
  6693   0005A8  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  6694   0005AC  6E74               	movwf	CNT_Motor@aux^0,c
  6695   0005AE  0E2A               	movlw	42
  6696   0005B0  1874               	xorwf	CNT_Motor@aux^0,w,c
  6697   0005B2  A4D8               	btfss	status,2,c
  6698   0005B4  0012               	return	
  6699                           
  6700                           ;TAD_COUNTER.c: 80:                     showTime = 0;
  6701   0005B6  6A1C               	clrf	_showTime^0,c
  6702   0005B8                     l3951:
  6703                           
  6704                           ;TAD_COUNTER.c: 81:                     KPAD_StopInput();
  6705   0005B8  EC5B  F00B         	call	_KPAD_StopInput	;wreg free
  6706                           
  6707                           ;TAD_COUNTER.c: 82:                     MENU_Mostrar();
  6708   0005BC  EFA8  F00A         	goto	_MENU_Mostrar	;wreg free
  6709   0005C0                     l3955:
  6710   0005C0  501D               	movf	_modifyTime^0,w,c
  6711   0005C2  B4D8               	btfsc	status,2,c
  6712   0005C4  0012               	return	
  6713                           
  6714                           ;TAD_COUNTER.c: 86:                 state = 5;
  6715   0005C6  0E05               	movlw	5
  6716   0005C8  6E1B               	movwf	_state@TAD_COUNTER$F1357^0,c
  6717                           
  6718                           ;TAD_COUNTER.c: 88:             break;
  6719   0005CA  0C05               	retlw	5
  6720   0005CC                     l3959:
  6721                           
  6722                           ;TAD_COUNTER.c: 90:             LCD_Clear();
  6723   0005CC  EC86  F00A         	call	_LCD_Clear	;wreg free
  6724                           
  6725                           ;TAD_COUNTER.c: 91:             LCD_GotoXY(0, 0);
  6726   0005D0  0E00               	movlw	0
  6727   0005D2  6A6A               	clrf	LCD_GotoXY@Row^0,c
  6728   0005D4  EC48  F007         	call	_LCD_GotoXY
  6729                           
  6730                           ;TAD_COUNTER.c: 92:             LCD_PutString("CURRENT TIME:");
  6731   0005D8  0E85               	movlw	low STR_22
  6732   0005DA  6E5E               	movwf	LCD_PutString@s^0,c
  6733   0005DC  0E1F               	movlw	high STR_22
  6734   0005DE  6E5F               	movwf	(LCD_PutString@s+1)^0,c
  6735   0005E0  ECD6  F00A         	call	_LCD_PutString	;wreg free
  6736   0005E4                     l3963:
  6737                           
  6738                           ;TAD_COUNTER.c: 93:             state++;
  6739   0005E4  2A1B               	incf	_state@TAD_COUNTER$F1357^0,f,c
  6740                           
  6741                           ;TAD_COUNTER.c: 94:             break;
  6742   0005E6  0012               	return	
  6743   0005E8                     l3965:
  6744                           
  6745                           ;TAD_COUNTER.c: 96:             if(!LCD_IsAvailable()) break;
  6746   0005E8  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  6747   0005EC  0900               	iorlw	0
  6748   0005EE  E101               	bnz	l3969
  6749   0005F0  0012               	return	
  6750   0005F2                     l3969:
  6751                           
  6752                           ;TAD_COUNTER.c: 97:             LCD_GotoXY(0, 1);
  6753   0005F2  D86D               	call	PL40	;call to abstracted procedure
  6754   0005F4  EC48  F007         	call	_LCD_GotoXY
  6755                           
  6756                           ;TAD_COUNTER.c: 98:             strAux[0] = time[0] + '0';
  6757   0005F8  5048               	movf	_time^0,w,c
  6758   0005FA  0F30               	addlw	48
  6759   0005FC  6E42               	movwf	_strAux@TAD_COUNTER$F1352^0,c
  6760                           
  6761                           ;TAD_COUNTER.c: 99:             strAux[1] = time[1] + '0';
  6762   0005FE  5049               	movf	(_time+1)^0,w,c
  6763   000600  0F30               	addlw	48
  6764   000602  6E43               	movwf	(_strAux@TAD_COUNTER$F1352+1)^0,c
  6765                           
  6766                           ;TAD_COUNTER.c: 100:             strAux[2] = ':';
  6767   000604  0E3A               	movlw	58
  6768   000606  6E44               	movwf	(_strAux@TAD_COUNTER$F1352+2)^0,c
  6769                           
  6770                           ;TAD_COUNTER.c: 101:             strAux[3] = time[2] + '0';
  6771   000608  504A               	movf	(_time+2)^0,w,c
  6772   00060A  0F30               	addlw	48
  6773   00060C  6E45               	movwf	(_strAux@TAD_COUNTER$F1352+3)^0,c
  6774                           
  6775                           ;TAD_COUNTER.c: 102:             strAux[4] = time[3] + '0';
  6776   00060E  504B               	movf	(_time+3)^0,w,c
  6777   000610  0F30               	addlw	48
  6778   000612  6E46               	movwf	(_strAux@TAD_COUNTER$F1352+4)^0,c
  6779                           
  6780                           ;TAD_COUNTER.c: 103:             strAux[5] = '\0';
  6781   000614  6A47               	clrf	(_strAux@TAD_COUNTER$F1352+5)^0,c
  6782                           
  6783                           ;TAD_COUNTER.c: 104:             LCD_PutString(strAux);
  6784   000616  0E42               	movlw	low _strAux@TAD_COUNTER$F1352
  6785   000618  6E5E               	movwf	LCD_PutString@s^0,c
  6786   00061A  6A5F               	clrf	(LCD_PutString@s+1)^0,c
  6787   00061C  ECD6  F00A         	call	_LCD_PutString	;wreg free
  6788                           
  6789                           ;TAD_COUNTER.c: 105:             state = 0;
  6790   000620  6A1B               	clrf	_state@TAD_COUNTER$F1357^0,c
  6791                           
  6792                           ;TAD_COUNTER.c: 106:             break;
  6793   000622  0012               	return	
  6794   000624                     l3987:
  6795                           
  6796                           ;TAD_COUNTER.c: 108:             if(!LCD_IsAvailable()) break;
  6797   000624  EC45  F00B         	call	_LCD_IsAvailable	;wreg free
  6798   000628  0900               	iorlw	0
  6799   00062A  E101               	bnz	l3991
  6800   00062C  0012               	return	
  6801   00062E                     l3991:
  6802                           
  6803                           ;TAD_COUNTER.c: 109:             LCD_GotoXY(0, 1);
  6804   00062E  D84F               	call	PL40	;call to abstracted procedure
  6805   000630  EC48  F007         	call	_LCD_GotoXY
  6806   000634  D7D7               	goto	l3963
  6807   000636                     l860:
  6808                           
  6809                           ;TAD_COUNTER.c: 113:             state = 0;
  6810   000636  6A1B               	clrf	_state@TAD_COUNTER$F1357^0,c
  6811                           
  6812                           ;TAD_COUNTER.c: 114:             if((aux = KPAD_GetChar()) == 0xFF) break;
  6813   000638  ECD7  F008         	call	_KPAD_GetChar	;wreg free
  6814   00063C  6E74               	movwf	CNT_Motor@aux^0,c
  6815   00063E  2874               	incf	CNT_Motor@aux^0,w,c
  6816   000640  E101               	bnz	l3999
  6817   000642  0012               	return	
  6818   000644                     l3999:
  6819                           
  6820                           ;TAD_COUNTER.c: 115:             if(aux == '*'){
  6821   000644  0E2A               	movlw	42
  6822   000646  1874               	xorwf	CNT_Motor@aux^0,w,c
  6823   000648  E104               	bnz	l4009
  6824                           
  6825                           ;TAD_COUNTER.c: 116:                 modifyTime = 0;
  6826   00064A  6A1D               	clrf	_modifyTime^0,c
  6827                           
  6828                           ;TAD_COUNTER.c: 117:                 LCD_CursorOff();
  6829   00064C  EC30  F00B         	call	_LCD_CursorOff	;wreg free
  6830   000650  D7B3               	goto	l3951
  6831   000652                     l4009:
  6832   000652  0E23               	movlw	35
  6833   000654  1874               	xorwf	CNT_Motor@aux^0,w,c
  6834   000656  E10E               	bnz	l4019
  6835                           
  6836                           ;TAD_COUNTER.c: 122:                 if(timeAuxIndex == 4){
  6837   000658  0E04               	movlw	4
  6838   00065A  181E               	xorwf	_timeAuxIndex^0,w,c
  6839   00065C  A4D8               	btfss	status,2,c
  6840   00065E  0012               	return	
  6841                           
  6842                           ;TAD_COUNTER.c: 123:                     modifyTime = 0;
  6843   000660  6A1D               	clrf	_modifyTime^0,c
  6844                           
  6845                           ;TAD_COUNTER.c: 124:                     time[0] = timeAux[0];
  6846   000662  C001  F048         	movff	_timeAux,_time
  6847                           
  6848                           ;TAD_COUNTER.c: 125:                     time[1] = timeAux[1];
  6849   000666  C002  F049         	movff	_timeAux+1,_time+1
  6850                           
  6851                           ;TAD_COUNTER.c: 126:                     time[2] = timeAux[2];
  6852   00066A  C003  F04A         	movff	_timeAux+2,_time+2
  6853                           
  6854                           ;TAD_COUNTER.c: 127:                     time[3] = timeAux[3];
  6855   00066E  C004  F04B         	movff	_timeAux+3,_time+3
  6856   000672  D7A2               	goto	l3951
  6857   000674                     l4019:
  6858   000674  0E04               	movlw	4
  6859   000676  181E               	xorwf	_timeAuxIndex^0,w,c
  6860   000678  B4D8               	btfsc	status,2,c
  6861   00067A  0012               	return	
  6862                           
  6863                           ;TAD_COUNTER.c: 133:                 timeAux[timeAuxIndex] = aux - '0';
  6864   00067C  501E               	movf	_timeAuxIndex^0,w,c
  6865   00067E  0F01               	addlw	low _timeAux
  6866   000680  6ED9               	movwf	fsr2l,c
  6867   000682  6ADA               	clrf	fsr2h,c
  6868   000684  5074               	movf	CNT_Motor@aux^0,w,c
  6869   000686  0FD0               	addlw	208
  6870   000688  6EDF               	movwf	indf2,c
  6871                           
  6872                           ;TAD_COUNTER.c: 134:                 LCD_PutChar(aux);
  6873   00068A  5074               	movf	CNT_Motor@aux^0,w,c
  6874   00068C  ECF0  F009         	call	_LCD_PutChar
  6875                           
  6876                           ;TAD_COUNTER.c: 135:                 timeAuxIndex++;
  6877   000690  2A1E               	incf	_timeAuxIndex^0,f,c
  6878                           
  6879                           ;TAD_COUNTER.c: 136:                 if(timeAuxIndex == 2) LCD_PutChar(':');
  6880   000692  0E02               	movlw	2
  6881   000694  181E               	xorwf	_timeAuxIndex^0,w,c
  6882   000696  E103               	bnz	l4031
  6883   000698  0E3A               	movlw	58
  6884   00069A  ECF0  F009         	call	_LCD_PutChar
  6885   00069E                     l4031:
  6886                           
  6887                           ;TAD_COUNTER.c: 137:                 if(timeAuxIndex == 4) LCD_CursorOff();
  6888   00069E  0E04               	movlw	4
  6889   0006A0  181E               	xorwf	_timeAuxIndex^0,w,c
  6890   0006A2  A4D8               	btfss	status,2,c
  6891   0006A4  0012               	return	
  6892   0006A6  EF30  F00B         	goto	_LCD_CursorOff	;wreg free
  6893   0006AA                     l4037:
  6894   0006AA  501B               	movf	_state@TAD_COUNTER$F1357^0,w,c
  6895   0006AC  6E72               	movwf	??_CNT_Motor^0,c
  6896   0006AE  6A73               	clrf	(??_CNT_Motor+1)^0,c
  6897                           
  6898                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6899                           ; Switch size 1, requested type "space"
  6900                           ; Number of cases is 1, Range of values is 0 to 0
  6901                           ; switch strategies available:
  6902                           ; Name         Instructions Cycles
  6903                           ; simple_byte            4     3 (average)
  6904                           ;	Chosen strategy is simple_byte
  6905   0006B0  5073               	movf	(??_CNT_Motor+1)^0,w,c
  6906   0006B2  A4D8               	btfss	status,2,c
  6907   0006B4  0012               	return	
  6908                           
  6909                           ; Switch size 1, requested type "space"
  6910                           ; Number of cases is 5, Range of values is 0 to 5
  6911                           ; switch strategies available:
  6912                           ; Name         Instructions Cycles
  6913                           ; simple_byte           16     9 (average)
  6914                           ;	Chosen strategy is simple_byte
  6915   0006B6  5072               	movf	??_CNT_Motor^0,w,c
  6916   0006B8  E101 D74C          	bz	l3911
  6917   0006BC  0A01               	xorlw	1	; case 1
  6918   0006BE  E086               	bz	l3959
  6919   0006C0  0A03               	xorlw	3	; case 2
  6920   0006C2  E092               	bz	l3965
  6921   0006C4  0A06               	xorlw	6	; case 4
  6922   0006C6  E0AE               	bz	l3987
  6923   0006C8  0A01               	xorlw	1	; case 5
  6924   0006CA  E0B5               	bz	l860
  6925   0006CC  0012               	return		;funcret
  6926   0006CE                     __end_of_CNT_Motor:
  6927                           	callstack 0
  6928   0006CE                     PL40:
  6929                           	callstack 24
  6930   0006CE  0E01               	movlw	1
  6931   0006D0  6E6A               	movwf	LCD_GotoXY@Row^0,c
  6932   0006D2  0C00               	retlw	0
  6933   0006D4                     __end_ofPL40:
  6934                           	callstack 0
  6935                           
  6936 ;; *************** function _MENU_Mostrar *****************
  6937 ;; Defined at:
  6938 ;;		line 37 in file "TAD_MENU.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1
  6952 ;;      Params:         0       0       0
  6953 ;;      Locals:         0       0       0
  6954 ;;      Temps:          0       0       0
  6955 ;;      Totals:         0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used: 1
  6958 ;; Hardware stack levels required when called: 3
  6959 ;; This function calls:
  6960 ;;		_JOY_Enable
  6961 ;;		_KPAD_StartInput
  6962 ;;		_KPAD_UnsetSMS
  6963 ;; This function is called by:
  6964 ;;		_PORT_Motor
  6965 ;;		_CNT_Motor
  6966 ;;		_MICRO_Motor
  6967 ;;		_MRCD_Motor
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text57
  6972   001550                     __ptext57:
  6973                           	callstack 0
  6974   001550                     _MENU_Mostrar:
  6975                           	callstack 26
  6976                           
  6977                           ;TAD_MENU.c: 40:     state = 2;
  6978                           
  6979                           ;incstack = 0
  6980   001550  0E02               	movlw	2
  6981   001552  6E21               	movwf	_state@TAD_MENU$F1311^0,c
  6982                           
  6983                           ;TAD_MENU.c: 41:     option = 1;
  6984   001554  0E01               	movlw	1
  6985   001556  6E20               	movwf	_option^0,c
  6986                           
  6987                           ;TAD_MENU.c: 42:     KPAD_UnsetSMS();
  6988   001558  EC55  F00B         	call	_KPAD_UnsetSMS	;wreg free
  6989                           
  6990                           ;TAD_MENU.c: 43:     KPAD_StartInput();
  6991   00155C  EC41  F00B         	call	_KPAD_StartInput	;wreg free
  6992                           
  6993                           ;TAD_MENU.c: 44:     JOY_Enable();
  6994   001560  EF58  F00B         	goto	_JOY_Enable	;wreg free
  6995   001564                     __end_of_MENU_Mostrar:
  6996                           	callstack 0
  6997                           
  6998 ;; *************** function _KPAD_UnsetSMS *****************
  6999 ;; Defined at:
  7000 ;;		line 97 in file "TAD_KEYPAD.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		None
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1
  7014 ;;      Params:         0       0       0
  7015 ;;      Locals:         0       0       0
  7016 ;;      Temps:          0       0       0
  7017 ;;      Totals:         0       0       0
  7018 ;;Total ram usage:        0 bytes
  7019 ;; Hardware stack levels used: 1
  7020 ;; Hardware stack levels required when called: 2
  7021 ;; This function calls:
  7022 ;;		Nothing
  7023 ;; This function is called by:
  7024 ;;		_PORT_Motor
  7025 ;;		_MENU_Mostrar
  7026 ;;		_CNT_ShowTime
  7027 ;;		_CNT_ModifyTime
  7028 ;;		_MRCD_Mostrar
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text58
  7033   0016AA                     __ptext58:
  7034                           	callstack 0
  7035   0016AA                     _KPAD_UnsetSMS:
  7036                           	callstack 26
  7037                           
  7038                           ;TAD_KEYPAD.c: 98:     smsMode = smsPressed = 0;
  7039                           
  7040                           ;incstack = 0
  7041   0016AA  6A3A               	clrf	_smsPressed^0,c
  7042   0016AC  6A3F               	clrf	_smsMode^0,c
  7043   0016AE  0012               	return		;funcret
  7044   0016B0                     __end_of_KPAD_UnsetSMS:
  7045                           	callstack 0
  7046                           
  7047 ;; *************** function _KPAD_StartInput *****************
  7048 ;; Defined at:
  7049 ;;		line 75 in file "TAD_KEYPAD.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;		None
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1
  7063 ;;      Params:         0       0       0
  7064 ;;      Locals:         0       0       0
  7065 ;;      Temps:          0       0       0
  7066 ;;      Totals:         0       0       0
  7067 ;;Total ram usage:        0 bytes
  7068 ;; Hardware stack levels used: 1
  7069 ;; Hardware stack levels required when called: 2
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_PORT_Motor
  7074 ;;		_MENU_Mostrar
  7075 ;;		_CNT_ShowTime
  7076 ;;		_CNT_ModifyTime
  7077 ;;		_MRCD_Mostrar
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text59
  7082   001682                     __ptext59:
  7083                           	callstack 0
  7084   001682                     _KPAD_StartInput:
  7085                           	callstack 26
  7086                           
  7087                           ;TAD_KEYPAD.c: 76:     state = 1;
  7088                           
  7089                           ;incstack = 0
  7090   001682  0E01               	movlw	1
  7091   001684  6E40               	movwf	_state^0,c
  7092                           
  7093                           ;TAD_KEYPAD.c: 77:     ready = 0;
  7094   001686  6A3B               	clrf	_ready^0,c
  7095   001688  0012               	return		;funcret
  7096   00168A                     __end_of_KPAD_StartInput:
  7097                           	callstack 0
  7098                           
  7099 ;; *************** function _JOY_Enable *****************
  7100 ;; Defined at:
  7101 ;;		line 17 in file "TAD_JOYSTICK.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1
  7115 ;;      Params:         0       0       0
  7116 ;;      Locals:         0       0       0
  7117 ;;      Temps:          0       0       0
  7118 ;;      Totals:         0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used: 1
  7121 ;; Hardware stack levels required when called: 2
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_MENU_Mostrar
  7126 ;;		_MRCD_Mostrar
  7127 ;;		_MRCD_Motor
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text60
  7132   0016B0                     __ptext60:
  7133                           	callstack 0
  7134   0016B0                     _JOY_Enable:
  7135                           	callstack 26
  7136                           
  7137                           ;TAD_JOYSTICK.c: 18:     enabled = 1;
  7138                           
  7139                           ;incstack = 0
  7140   0016B0  0E01               	movlw	1
  7141   0016B2  6E30               	movwf	_enabled^0,c
  7142   0016B4  0C01               	retlw	1	;funcret
  7143   0016B6                     __end_of_JOY_Enable:
  7144                           	callstack 0
  7145                           
  7146 ;; *************** function _LCD_PutString *****************
  7147 ;; Defined at:
  7148 ;;		line 186 in file "TAD_LCD.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  s               2    2[COMRAM] PTR unsigned char 
  7151 ;;		 -> strAux(12), STR_25(11), STR_24(17), STR_23(13), 
  7152 ;;		 -> strAux@TAD_COUNTER$F1352(6), STR_22(14), STR_21(13), STR_20(9), 
  7153 ;;		 -> STR_19(2), STR_18(21), STR_17(21), STR_16(23), 
  7154 ;;		 -> STR_15(19), STR_14(19), NULL(0), STR_13(11), 
  7155 ;;		 -> portName(4), 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1
  7167 ;;      Params:         2       0       0
  7168 ;;      Locals:         0       0       0
  7169 ;;      Temps:          0       0       0
  7170 ;;      Totals:         2       0       0
  7171 ;;Total ram usage:        2 bytes
  7172 ;; Hardware stack levels used: 1
  7173 ;; Hardware stack levels required when called: 2
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_PORT_Motor
  7178 ;;		_MQ_Motor
  7179 ;;		_MENU_Motor
  7180 ;;		_CNT_ModifyTime
  7181 ;;		_CNT_Motor
  7182 ;;		_MICRO_ListenAndSend
  7183 ;;		_MRCD_Mostrar
  7184 ;;		_MRCD_Motor
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text61
  7189   0015AC                     __ptext61:
  7190                           	callstack 0
  7191   0015AC                     _LCD_PutString:
  7192                           	callstack 27
  7193                           
  7194                           ;TAD_LCD.c: 190:  str = s;
  7195                           
  7196                           ;incstack = 0
  7197   0015AC  C05E  F011         	movff	LCD_PutString@s,_str
  7198   0015B0  C05F  F012         	movff	LCD_PutString@s+1,_str+1
  7199                           
  7200                           ;TAD_LCD.c: 191:     index = 0;
  7201   0015B4  6A34               	clrf	_index^0,c
  7202                           
  7203                           ;TAD_LCD.c: 192:     state = 1;
  7204   0015B6  0E01               	movlw	1
  7205   0015B8  6E33               	movwf	_state@TAD_LCD$F764^0,c
  7206   0015BA  0C01               	retlw	1	;funcret
  7207   0015BC                     __end_of_LCD_PutString:
  7208                           	callstack 0
  7209                           
  7210 ;; *************** function _LCD_PutChar *****************
  7211 ;; Defined at:
  7212 ;;		line 160 in file "TAD_LCD.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  c               1    wreg     unsigned char 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  c               1   21[COMRAM] unsigned char 
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1
  7226 ;;      Params:         0       0       0
  7227 ;;      Locals:         1       0       0
  7228 ;;      Temps:          0       0       0
  7229 ;;      Totals:         1       0       0
  7230 ;;Total ram usage:        1 bytes
  7231 ;; Hardware stack levels used: 1
  7232 ;; Hardware stack levels required when called: 5
  7233 ;; This function calls:
  7234 ;;		_CantaData
  7235 ;;		_LCD_GotoXY
  7236 ;;		_WaitForBusy
  7237 ;; This function is called by:
  7238 ;;		_LCD_Motor
  7239 ;;		_PORT_Motor
  7240 ;;		_MENU_Motor
  7241 ;;		_CNT_Motor
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text62
  7246   0013E0                     __ptext62:
  7247                           	callstack 0
  7248   0013E0                     _LCD_PutChar:
  7249                           	callstack 24
  7250                           
  7251                           ;incstack = 0
  7252                           ;LCD_PutChar@c stored from wreg
  7253   0013E0  6E71               	movwf	LCD_PutChar@c^0,c
  7254                           
  7255                           ;TAD_LCD.c: 170:  WaitForBusy(); CantaData(c);
  7256   0013E2  ECFE  F008         	call	_WaitForBusy	;wreg free
  7257   0013E6  5071               	movf	LCD_PutChar@c^0,w,c
  7258   0013E8  EC3E  F009         	call	_CantaData
  7259                           
  7260                           ;TAD_LCD.c: 172:  ++ColumnAct;
  7261   0013EC  2A35               	incf	_ColumnAct^0,f,c
  7262                           
  7263                           ;TAD_LCD.c: 173:     if (ColumnAct >= 40) {
  7264   0013EE  0E27               	movlw	39
  7265   0013F0  6435               	cpfsgt	_ColumnAct^0,c
  7266   0013F2  0C27               	retlw	39
  7267                           
  7268                           ;TAD_LCD.c: 174:         ColumnAct = 0;
  7269   0013F4  6A35               	clrf	_ColumnAct^0,c
  7270                           
  7271                           ;TAD_LCD.c: 175:         if (++RowAct >= 2) RowAct = 0;
  7272   0013F6  2A36               	incf	_RowAct^0,f,c
  7273   0013F8  0E01               	movlw	1
  7274   0013FA  6436               	cpfsgt	_RowAct^0,c
  7275   0013FC  D001               	goto	l3645
  7276   0013FE  6A36               	clrf	_RowAct^0,c
  7277   001400                     l3645:
  7278                           
  7279                           ;TAD_LCD.c: 176:         LCD_GotoXY(ColumnAct, RowAct);
  7280   001400  EC6A  F00A         	call	PL58	;call to abstracted procedure
  7281   001404  EF48  F007         	goto	_LCD_GotoXY
  7282   001408                     __end_of_LCD_PutChar:
  7283                           	callstack 0
  7284                           
  7285 ;; *************** function _LCD_GotoXY *****************
  7286 ;; Defined at:
  7287 ;;		line 133 in file "TAD_LCD.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  Column          1    wreg     unsigned char 
  7290 ;;  Row             1   14[COMRAM] unsigned char 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  Column          1   20[COMRAM] unsigned char 
  7293 ;;  Fisics          1   19[COMRAM] unsigned char 
  7294 ;; Return value:  Size  Location     Type
  7295 ;;                  1    wreg      void 
  7296 ;; Registers used:
  7297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7298 ;; Tracked objects:
  7299 ;;		On entry : 0/0
  7300 ;;		On exit  : 0/0
  7301 ;;		Unchanged: 0/0
  7302 ;; Data sizes:     COMRAM   BANK0   BANK1
  7303 ;;      Params:         1       0       0
  7304 ;;      Locals:         4       0       0
  7305 ;;      Temps:          2       0       0
  7306 ;;      Totals:         7       0       0
  7307 ;;Total ram usage:        7 bytes
  7308 ;; Hardware stack levels used: 1
  7309 ;; Hardware stack levels required when called: 4
  7310 ;; This function calls:
  7311 ;;		_CantaIR
  7312 ;;		_WaitForBusy
  7313 ;; This function is called by:
  7314 ;;		_LCD_PutChar
  7315 ;;		_LCD_PreviewChar
  7316 ;;		_PORT_Motor
  7317 ;;		_MQ_Motor
  7318 ;;		_MENU_Motor
  7319 ;;		_CNT_ModifyTime
  7320 ;;		_CNT_Motor
  7321 ;;		_MICRO_ListenAndSend
  7322 ;;		_MRCD_Motor
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text63
  7327   000E90                     __ptext63:
  7328                           	callstack 0
  7329   000E90                     _LCD_GotoXY:
  7330                           	callstack 24
  7331                           
  7332                           ;incstack = 0
  7333                           ;LCD_GotoXY@Column stored from wreg
  7334   000E90  6E70               	movwf	LCD_GotoXY@Column^0,c
  7335                           
  7336                           ;TAD_LCD.c: 137:  unsigned char Fisics;;TAD_LCD.c: 139:  switch (Rows) {
  7337   000E92  D021               	goto	l3527
  7338   000E94                     l3507:
  7339                           
  7340                           ;TAD_LCD.c: 141:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7341   000E94  506A               	movf	LCD_GotoXY@Row^0,w,c
  7342   000E96  E004               	bz	l308
  7343   000E98  6A6E               	clrf	(_LCD_GotoXY$784+1)^0,c
  7344   000E9A  0E40               	movlw	64
  7345   000E9C  6E6D               	movwf	_LCD_GotoXY$784^0,c
  7346   000E9E  D002               	goto	l3511
  7347   000EA0                     l308:
  7348   000EA0  6A6D               	clrf	_LCD_GotoXY$784^0,c
  7349   000EA2  6A6E               	clrf	(_LCD_GotoXY$784+1)^0,c
  7350   000EA4                     l3511:
  7351   000EA4  5070               	movf	LCD_GotoXY@Column^0,w,c
  7352   000EA6  246D               	addwf	_LCD_GotoXY$784^0,w,c
  7353   000EA8  6E6F               	movwf	LCD_GotoXY@Fisics^0,c
  7354   000EAA  D022               	goto	l3529
  7355   000EAC                     l312:
  7356                           
  7357                           ;TAD_LCD.c: 143:    Fisics = Column;
  7358   000EAC  C070  F06F         	movff	LCD_GotoXY@Column,LCD_GotoXY@Fisics
  7359                           
  7360                           ;TAD_LCD.c: 144:    if (Row == 1) Fisics += 0x40; else
  7361   000EB0  046A               	decf	LCD_GotoXY@Row^0,w,c
  7362   000EB2  E102               	bnz	l3517
  7363   000EB4  0E40               	movlw	64
  7364   000EB6  D00A               	goto	L4
  7365   000EB8                     l3517:
  7366                           
  7367                           ;TAD_LCD.c: 145:    if (Row == 2) Fisics += Columns; else
  7368   000EB8  0E02               	movlw	2
  7369   000EBA  186A               	xorwf	LCD_GotoXY@Row^0,w,c
  7370   000EBC  E102               	bnz	l3521
  7371   000EBE  5037               	movf	_Columns^0,w,c
  7372   000EC0  D005               	goto	L4
  7373   000EC2                     l3521:
  7374                           
  7375                           ;TAD_LCD.c: 146:    if (Row == 3) Fisics += 0x40+Columns;
  7376   000EC2  0E03               	movlw	3
  7377   000EC4  186A               	xorwf	LCD_GotoXY@Row^0,w,c
  7378   000EC6  E114               	bnz	l3529
  7379   000EC8  5037               	movf	_Columns^0,w,c
  7380   000ECA  0F40               	addlw	64
  7381   000ECC                     L4:
  7382   000ECC  266F               	addwf	LCD_GotoXY@Fisics^0,f,c
  7383                           
  7384                           ;TAD_LCD.c: 147:    break;
  7385   000ECE  D010               	goto	l3529
  7386   000ED0                     l319:
  7387                           
  7388                           ;TAD_LCD.c: 150:    Fisics = Column; break;
  7389   000ED0  C070  F06F         	movff	LCD_GotoXY@Column,LCD_GotoXY@Fisics
  7390   000ED4  D00D               	goto	l3529
  7391   000ED6                     l3527:
  7392   000ED6  5038               	movf	_Rows^0,w,c
  7393   000ED8  6E6B               	movwf	??_LCD_GotoXY^0,c
  7394   000EDA  6A6C               	clrf	(??_LCD_GotoXY+1)^0,c
  7395                           
  7396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7397                           ; Switch size 1, requested type "space"
  7398                           ; Number of cases is 1, Range of values is 0 to 0
  7399                           ; switch strategies available:
  7400                           ; Name         Instructions Cycles
  7401                           ; simple_byte            4     3 (average)
  7402                           ;	Chosen strategy is simple_byte
  7403   000EDC  506C               	movf	(??_LCD_GotoXY+1)^0,w,c
  7404   000EDE  E1F8               	bnz	l319
  7405                           
  7406                           ; Switch size 1, requested type "space"
  7407                           ; Number of cases is 3, Range of values is 1 to 4
  7408                           ; switch strategies available:
  7409                           ; Name         Instructions Cycles
  7410                           ; simple_byte           10     6 (average)
  7411                           ;	Chosen strategy is simple_byte
  7412   000EE0  506B               	movf	??_LCD_GotoXY^0,w,c
  7413   000EE2  0A01               	xorlw	1	; case 1
  7414   000EE4  E0F5               	bz	l319
  7415   000EE6  0A03               	xorlw	3	; case 2
  7416   000EE8  E0D5               	bz	l3507
  7417   000EEA  0A06               	xorlw	6	; case 4
  7418   000EEC  E0DF               	bz	l312
  7419   000EEE  D7F0               	goto	l319
  7420   000EF0                     l3529:
  7421                           
  7422                           ;TAD_LCD.c: 153:  WaitForBusy();
  7423   000EF0  ECFE  F008         	call	_WaitForBusy	;wreg free
  7424                           
  7425                           ;TAD_LCD.c: 154:  CantaIR(0x80 | Fisics);
  7426   000EF4  506F               	movf	LCD_GotoXY@Fisics^0,w,c
  7427   000EF6  0980               	iorlw	128
  7428   000EF8  EC53  F00A         	call	_CantaIR
  7429                           
  7430                           ;TAD_LCD.c: 156:  RowAct = Row;
  7431   000EFC  C06A  F036         	movff	LCD_GotoXY@Row,_RowAct
  7432                           
  7433                           ;TAD_LCD.c: 157:  ColumnAct = Column;
  7434   000F00  C070  F035         	movff	LCD_GotoXY@Column,_ColumnAct
  7435   000F04  0012               	return		;funcret
  7436   000F06                     __end_of_LCD_GotoXY:
  7437                           	callstack 0
  7438                           
  7439 ;; *************** function _CantaData *****************
  7440 ;; Defined at:
  7441 ;;		line 253 in file "TAD_LCD.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  Data            1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  Data            1    2[COMRAM] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      void 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1
  7455 ;;      Params:         0       0       0
  7456 ;;      Locals:         1       0       0
  7457 ;;      Temps:          0       0       0
  7458 ;;      Totals:         1       0       0
  7459 ;;Total ram usage:        1 bytes
  7460 ;; Hardware stack levels used: 1
  7461 ;; Hardware stack levels required when called: 3
  7462 ;; This function calls:
  7463 ;;		_CantaPartAlta
  7464 ;;		_CantaPartBaixa
  7465 ;; This function is called by:
  7466 ;;		_LCD_PutChar
  7467 ;;		_LCD_PreviewChar
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	text64
  7472   00127C                     __ptext64:
  7473                           	callstack 0
  7474   00127C                     _CantaData:
  7475                           	callstack 25
  7476                           
  7477                           ;incstack = 0
  7478                           ;CantaData@Data stored from wreg
  7479   00127C  6E5E               	movwf	CantaData@Data^0,c
  7480                           
  7481                           ;TAD_LCD.c: 254:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 0);
  7482   00127E  9E95               	bcf	149,7,c	;volatile
  7483   001280  9C95               	bcf	149,6,c	;volatile
  7484   001282  9A95               	bcf	149,5,c	;volatile
  7485   001284  9895               	bcf	149,4,c	;volatile
  7486                           
  7487                           ;TAD_LCD.c: 255:  (LATDbits.LATD3 = 1);
  7488   001286  868C               	bsf	140,3,c	;volatile
  7489                           
  7490                           ;TAD_LCD.c: 256:  (LATDbits.LATD2 = 0);
  7491   001288  948C               	bcf	140,2,c	;volatile
  7492                           
  7493                           ;TAD_LCD.c: 257:  (LATDbits.LATD1 = 1);
  7494   00128A  828C               	bsf	140,1,c	;volatile
  7495                           
  7496                           ;TAD_LCD.c: 258:  CantaPartAlta(Data);
  7497   00128C  505E               	movf	CantaData@Data^0,w,c
  7498   00128E  ECEF  F007         	call	_CantaPartAlta
  7499                           
  7500                           ;TAD_LCD.c: 259:  (LATDbits.LATD1 = 1);
  7501                           
  7502                           ;TAD_LCD.c: 260:  (LATDbits.LATD1 = 0);
  7503                           
  7504                           ;TAD_LCD.c: 261:  (LATDbits.LATD1 = 0);
  7505                           
  7506                           ;TAD_LCD.c: 262:  (LATDbits.LATD1 = 1);
  7507   001292  D80B               	call	PL52	;call to abstracted procedure
  7508                           
  7509                           ;TAD_LCD.c: 263:  CantaPartBaixa(Data);
  7510   001294  505E               	movf	CantaData@Data^0,w,c
  7511   001296  ECB9  F007         	call	_CantaPartBaixa
  7512                           
  7513                           ;TAD_LCD.c: 264:  (LATDbits.LATD1 = 1);
  7514                           
  7515                           ;TAD_LCD.c: 265:  (LATDbits.LATD1 = 0);
  7516                           
  7517                           ;TAD_LCD.c: 266:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 1);
  7518   00129A  D000               	goto	PL22	;call to abstracted procedure
  7519   00129C                     __end_of_CantaData:
  7520                           	callstack 0
  7521   00129C                     PL22:
  7522                           	callstack 24
  7523   00129C  828C               	bsf	140,1,c	;volatile
  7524   00129E  928C               	bcf	140,1,c	;volatile
  7525   0012A0  8E95               	bsf	149,7,c	;volatile
  7526   0012A2  8C95               	bsf	149,6,c	;volatile
  7527   0012A4  8A95               	bsf	149,5,c	;volatile
  7528   0012A6  8895               	bsf	149,4,c	;volatile
  7529   0012A8  0012               	return		;funcret
  7530   0012AA                     __end_ofPL22:
  7531                           	callstack 0
  7532   0012AA                     PL52:
  7533                           	callstack 24
  7534   0012AA  828C               	bsf	140,1,c	;volatile
  7535   0012AC  928C               	bcf	140,1,c	;volatile
  7536   0012AE  928C               	bcf	140,1,c	;volatile
  7537   0012B0  828C               	bsf	140,1,c	;volatile
  7538   0012B2  0012               	return	
  7539   0012B4                     __end_ofPL52:
  7540                           	callstack 0
  7541                           
  7542 ;; *************** function _LCD_IsAvailable *****************
  7543 ;; Defined at:
  7544 ;;		line 206 in file "TAD_LCD.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;		None
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      unsigned char 
  7551 ;; Registers used:
  7552 ;;		wreg, status,2
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1
  7558 ;;      Params:         0       0       0
  7559 ;;      Locals:         0       0       0
  7560 ;;      Temps:          0       0       0
  7561 ;;      Totals:         0       0       0
  7562 ;;Total ram usage:        0 bytes
  7563 ;; Hardware stack levels used: 1
  7564 ;; Hardware stack levels required when called: 2
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		_PORT_Motor
  7569 ;;		_MQ_Motor
  7570 ;;		_MENU_Motor
  7571 ;;		_CNT_Motor
  7572 ;;		_MRCD_Motor
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text65
  7577   00168A                     __ptext65:
  7578                           	callstack 0
  7579   00168A                     _LCD_IsAvailable:
  7580                           	callstack 27
  7581                           
  7582                           ;TAD_LCD.c: 207:     return (state == 0);
  7583                           
  7584                           ;incstack = 0
  7585   00168A  5033               	movf	_state@TAD_LCD$F764^0,w,c
  7586   00168C  B4D8               	btfsc	status,2,c
  7587   00168E  0C01               	retlw	1
  7588   001690  0C00               	retlw	0	;funcret
  7589   001692                     __end_of_LCD_IsAvailable:
  7590                           	callstack 0
  7591                           
  7592 ;; *************** function _LCD_CursorOff *****************
  7593 ;; Defined at:
  7594 ;;		line 126 in file "TAD_LCD.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;		None
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;		None
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      void 
  7601 ;; Registers used:
  7602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1
  7608 ;;      Params:         0       0       0
  7609 ;;      Locals:         0       0       0
  7610 ;;      Temps:          0       0       0
  7611 ;;      Totals:         0       0       0
  7612 ;;Total ram usage:        0 bytes
  7613 ;; Hardware stack levels used: 1
  7614 ;; Hardware stack levels required when called: 4
  7615 ;; This function calls:
  7616 ;;		_CantaIR
  7617 ;;		_WaitForBusy
  7618 ;; This function is called by:
  7619 ;;		_PORT_Motor
  7620 ;;		_CNT_Motor
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text66
  7625   001660                     __ptext66:
  7626                           	callstack 0
  7627   001660                     _LCD_CursorOff:
  7628                           	callstack 25
  7629                           
  7630                           ;TAD_LCD.c: 129:  WaitForBusy();
  7631                           
  7632                           ;incstack = 0
  7633   001660  ECFE  F008         	call	_WaitForBusy	;wreg free
  7634                           
  7635                           ;TAD_LCD.c: 130:  CantaIR(0x08 | 0x04);
  7636   001664  0E0C               	movlw	12
  7637   001666  EF53  F00A         	goto	_CantaIR
  7638   00166A                     __end_of_LCD_CursorOff:
  7639                           	callstack 0
  7640                           
  7641 ;; *************** function _LCD_Clear *****************
  7642 ;; Defined at:
  7643 ;;		line 112 in file "TAD_LCD.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1
  7657 ;;      Params:         0       0       0
  7658 ;;      Locals:         0       0       0
  7659 ;;      Temps:          0       0       0
  7660 ;;      Totals:         0       0       0
  7661 ;;Total ram usage:        0 bytes
  7662 ;; Hardware stack levels used: 1
  7663 ;; Hardware stack levels required when called: 4
  7664 ;; This function calls:
  7665 ;;		_CantaIR
  7666 ;;		_Espera
  7667 ;;		_WaitForBusy
  7668 ;; This function is called by:
  7669 ;;		_PORT_Motor
  7670 ;;		_MQ_PutString
  7671 ;;		_MQ_Motor
  7672 ;;		_MENU_Motor
  7673 ;;		_CNT_ModifyTime
  7674 ;;		_CNT_Motor
  7675 ;;		_MICRO_ListenAndSend
  7676 ;;		_MRCD_Mostrar
  7677 ;;		_MRCD_Motor
  7678 ;; This function uses a non-reentrant model
  7679 ;;
  7680                           
  7681                           	psect	text67
  7682   00150C                     __ptext67:
  7683                           	callstack 0
  7684   00150C                     _LCD_Clear:
  7685                           	callstack 25
  7686                           
  7687                           ;TAD_LCD.c: 115:  WaitForBusy(); CantaIR(0x01);
  7688                           
  7689                           ;incstack = 0
  7690   00150C  ECFE  F008         	call	_WaitForBusy	;wreg free
  7691   001510  0E01               	movlw	1
  7692   001512  EC53  F00A         	call	_CantaIR
  7693                           
  7694                           ;TAD_LCD.c: 116:  Espera(Timer, 10);
  7695   001516  D802               	call	PL62	;call to abstracted procedure
  7696   001518  EF89  F009         	goto	_Espera
  7697   00151C                     __end_of_LCD_Clear:
  7698                           	callstack 0
  7699   00151C                     PL62:
  7700                           	callstack 26
  7701   00151C  0E0A               	movlw	10
  7702   00151E  6E69               	movwf	Espera@ms^0,c
  7703   001520  5059               	movf	_Timer^0,w,c
  7704   001522  0012               	return	
  7705   001524                     __end_ofPL62:
  7706                           	callstack 0
  7707                           
  7708 ;; *************** function _WaitForBusy *****************
  7709 ;; Defined at:
  7710 ;;		line 269 in file "TAD_LCD.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;		None
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;  Busy            1   13[COMRAM] unsigned char 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      void 
  7717 ;; Registers used:
  7718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1
  7724 ;;      Params:         0       0       0
  7725 ;;      Locals:         1       0       0
  7726 ;;      Temps:          0       0       0
  7727 ;;      Totals:         1       0       0
  7728 ;;Total ram usage:        1 bytes
  7729 ;; Hardware stack levels used: 1
  7730 ;; Hardware stack levels required when called: 3
  7731 ;; This function calls:
  7732 ;;		_TI_GetTics
  7733 ;;		_TI_ResetTics
  7734 ;; This function is called by:
  7735 ;;		_LCD_Init
  7736 ;;		_LCD_Clear
  7737 ;;		_LCD_CursorOn
  7738 ;;		_LCD_CursorOff
  7739 ;;		_LCD_GotoXY
  7740 ;;		_LCD_PutChar
  7741 ;;		_LCD_PreviewChar
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text68
  7746   0011FC                     __ptext68:
  7747                           	callstack 0
  7748   0011FC                     _WaitForBusy:
  7749                           	callstack 25
  7750                           
  7751                           ;TAD_LCD.c: 270:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 1);
  7752                           
  7753                           ;incstack = 0
  7754   0011FC  8E95               	bsf	149,7,c	;volatile
  7755   0011FE  8C95               	bsf	149,6,c	;volatile
  7756   001200  8A95               	bsf	149,5,c	;volatile
  7757   001202  8895               	bsf	149,4,c	;volatile
  7758                           
  7759                           ;TAD_LCD.c: 271:  (LATDbits.LATD3 = 0);
  7760   001204  968C               	bcf	140,3,c	;volatile
  7761                           
  7762                           ;TAD_LCD.c: 272:  (LATDbits.LATD2 = 1);
  7763   001206  848C               	bsf	140,2,c	;volatile
  7764                           
  7765                           ;TAD_LCD.c: 273:  TI_ResetTics(Timer);
  7766   001208  5059               	movf	_Timer^0,w,c
  7767   00120A  EC27  F00A         	call	_TI_ResetTics
  7768   00120E                     l3457:
  7769                           
  7770                           ;TAD_LCD.c: 275:   (LATDbits.LATD1 = 1);(LATDbits.LATD1 = 1);
  7771   00120E  828C               	bsf	140,1,c	;volatile
  7772   001210  828C               	bsf	140,1,c	;volatile
  7773                           
  7774                           ;TAD_LCD.c: 276:   Busy = (PORTDbits.RD7);
  7775   001212  0E00               	movlw	0
  7776   001214  BE83               	btfsc	131,7,c	;volatile
  7777   001216  0E01               	movlw	1
  7778   001218  6E69               	movwf	WaitForBusy@Busy^0,c
  7779                           
  7780                           ;TAD_LCD.c: 277:   (LATDbits.LATD1 = 0);
  7781   00121A  928C               	bcf	140,1,c	;volatile
  7782                           
  7783                           ;TAD_LCD.c: 278:   (LATDbits.LATD1 = 0);
  7784   00121C  928C               	bcf	140,1,c	;volatile
  7785                           
  7786                           ;TAD_LCD.c: 279:   (LATDbits.LATD1 = 1);(LATDbits.LATD1 = 1);
  7787   00121E  828C               	bsf	140,1,c	;volatile
  7788   001220  828C               	bsf	140,1,c	;volatile
  7789                           
  7790                           ;TAD_LCD.c: 281:   (LATDbits.LATD1 = 0);
  7791   001222  928C               	bcf	140,1,c	;volatile
  7792                           
  7793                           ;TAD_LCD.c: 282:   (LATDbits.LATD1 = 0);
  7794   001224  928C               	bcf	140,1,c	;volatile
  7795                           
  7796                           ;TAD_LCD.c: 283:   if (TI_GetTics(Timer)) break;
  7797   001226  5059               	movf	_Timer^0,w,c
  7798   001228  EC84  F008         	call	_TI_GetTics
  7799   00122C  D805               	call	PL50	;call to abstracted procedure
  7800   00122E  E001               	bz	l3479
  7801   001230  0012               	return	
  7802   001232                     l3479:
  7803                           
  7804                           ;TAD_LCD.c: 284:  } while(Busy);
  7805   001232  5069               	movf	WaitForBusy@Busy^0,w,c
  7806   001234  E1EC               	bnz	l3457
  7807   001236  0012               	return		;funcret
  7808   001238                     __end_of_WaitForBusy:
  7809                           	callstack 0
  7810   001238                     PL50:
  7811                           	callstack 25
  7812   001238  505C               	movf	?_TI_GetTics^0,w,c
  7813   00123A  105D               	iorwf	(?_TI_GetTics+1)^0,w,c
  7814   00123C  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  7815   00123E  105F               	iorwf	(?_TI_GetTics+3)^0,w,c
  7816   001240  0012               	return	
  7817   001242                     __end_ofPL50:
  7818                           	callstack 0
  7819                           
  7820 ;; *************** function _Espera *****************
  7821 ;; Defined at:
  7822 ;;		line 218 in file "TAD_LCD.c"
  7823 ;; Parameters:    Size  Location     Type
  7824 ;;  Timer           1    wreg     unsigned char 
  7825 ;;  ms              1   13[COMRAM] unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  Timer           1   18[COMRAM] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;                  1    wreg      void 
  7830 ;; Registers used:
  7831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMRAM   BANK0   BANK1
  7837 ;;      Params:         1       0       0
  7838 ;;      Locals:         1       0       0
  7839 ;;      Temps:          4       0       0
  7840 ;;      Totals:         6       0       0
  7841 ;;Total ram usage:        6 bytes
  7842 ;; Hardware stack levels used: 1
  7843 ;; Hardware stack levels required when called: 3
  7844 ;; This function calls:
  7845 ;;		_TI_GetTics
  7846 ;;		_TI_ResetTics
  7847 ;; This function is called by:
  7848 ;;		_LCD_Init
  7849 ;;		_LCD_Clear
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text69
  7854   001312                     __ptext69:
  7855                           	callstack 0
  7856   001312                     _Espera:
  7857                           	callstack 25
  7858                           
  7859                           ;incstack = 0
  7860                           ;Espera@Timer stored from wreg
  7861   001312  6E6E               	movwf	Espera@Timer^0,c
  7862                           
  7863                           ;TAD_LCD.c: 219:  TI_ResetTics(Timer);
  7864   001314  506E               	movf	Espera@Timer^0,w,c
  7865   001316  EC27  F00A         	call	_TI_ResetTics
  7866   00131A                     l3433:
  7867   00131A  C069  F06A         	movff	Espera@ms,??_Espera
  7868   00131E  6A6B               	clrf	(??_Espera+1)^0,c
  7869   001320  6A6C               	clrf	(??_Espera+2)^0,c
  7870   001322  6A6D               	clrf	(??_Espera+3)^0,c
  7871   001324  506E               	movf	Espera@Timer^0,w,c
  7872   001326  EC84  F008         	call	_TI_GetTics
  7873   00132A  506A               	movf	??_Espera^0,w,c
  7874   00132C  5C5C               	subwf	?_TI_GetTics^0,w,c
  7875   00132E  506B               	movf	(??_Espera+1)^0,w,c
  7876   001330  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  7877   001332  506C               	movf	(??_Espera+2)^0,w,c
  7878   001334  585E               	subwfb	(?_TI_GetTics+2)^0,w,c
  7879   001336  506D               	movf	(??_Espera+3)^0,w,c
  7880   001338  585F               	subwfb	(?_TI_GetTics+3)^0,w,c
  7881   00133A  E3EF               	bnc	l3433
  7882   00133C  0012               	return		;funcret
  7883   00133E                     __end_of_Espera:
  7884                           	callstack 0
  7885                           
  7886 ;; *************** function _CantaIR *****************
  7887 ;; Defined at:
  7888 ;;		line 237 in file "TAD_LCD.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  IR              1    wreg     unsigned char 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  IR              1    2[COMRAM] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2, status,0, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1
  7902 ;;      Params:         0       0       0
  7903 ;;      Locals:         1       0       0
  7904 ;;      Temps:          0       0       0
  7905 ;;      Totals:         1       0       0
  7906 ;;Total ram usage:        1 bytes
  7907 ;; Hardware stack levels used: 1
  7908 ;; Hardware stack levels required when called: 3
  7909 ;; This function calls:
  7910 ;;		_CantaPartAlta
  7911 ;;		_CantaPartBaixa
  7912 ;; This function is called by:
  7913 ;;		_LCD_Init
  7914 ;;		_LCD_Clear
  7915 ;;		_LCD_CursorOn
  7916 ;;		_LCD_CursorOff
  7917 ;;		_LCD_GotoXY
  7918 ;; This function uses a non-reentrant model
  7919 ;;
  7920                           
  7921                           	psect	text70
  7922   0014A6                     __ptext70:
  7923                           	callstack 0
  7924   0014A6                     _CantaIR:
  7925                           	callstack 24
  7926                           
  7927                           ;incstack = 0
  7928                           ;CantaIR@IR stored from wreg
  7929   0014A6  6E5E               	movwf	CantaIR@IR^0,c
  7930                           
  7931                           ;TAD_LCD.c: 238:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 0);
  7932   0014A8  9E95               	bcf	149,7,c	;volatile
  7933                           
  7934                           ;TAD_LCD.c: 239:  (LATDbits.LATD3 = 0);
  7935                           
  7936                           ;TAD_LCD.c: 240:  (LATDbits.LATD2 = 0);
  7937                           
  7938                           ;TAD_LCD.c: 241:  (LATDbits.LATD1 = 1);
  7939   0014AA  ECCA  F006         	call	PL24	;call to abstracted procedure
  7940                           
  7941                           ;TAD_LCD.c: 242:  CantaPartAlta(IR);
  7942   0014AE  505E               	movf	CantaIR@IR^0,w,c
  7943   0014B0  ECEF  F007         	call	_CantaPartAlta
  7944                           
  7945                           ;TAD_LCD.c: 243:  (LATDbits.LATD1 = 1);
  7946                           
  7947                           ;TAD_LCD.c: 244:  (LATDbits.LATD1 = 0);
  7948                           
  7949                           ;TAD_LCD.c: 245:  (LATDbits.LATD1 = 0);
  7950                           
  7951                           ;TAD_LCD.c: 246:  (LATDbits.LATD1 = 1);
  7952   0014B4  EC55  F009         	call	PL52	;call to abstracted procedure
  7953                           
  7954                           ;TAD_LCD.c: 247:  CantaPartBaixa(IR);
  7955   0014B8  505E               	movf	CantaIR@IR^0,w,c
  7956   0014BA  ECB9  F007         	call	_CantaPartBaixa
  7957                           
  7958                           ;TAD_LCD.c: 248:  (LATDbits.LATD1 = 1);
  7959                           
  7960                           ;TAD_LCD.c: 249:  (LATDbits.LATD1 = 0);
  7961                           
  7962                           ;TAD_LCD.c: 250:  (TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6 = TRISDbits.TR
      +                          ISD7 = 1);
  7963   0014BE  EF4E  F009         	goto	PL22	;call to abstracted procedure
  7964   0014C2                     __end_of_CantaIR:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _CantaPartBaixa *****************
  7968 ;; Defined at:
  7969 ;;		line 230 in file "TAD_LCD.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  c               1    wreg     unsigned char 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;  c               1    1[COMRAM] unsigned char 
  7974 ;; Return value:  Size  Location     Type
  7975 ;;                  1    wreg      void 
  7976 ;; Registers used:
  7977 ;;		wreg, status,2, status,0
  7978 ;; Tracked objects:
  7979 ;;		On entry : 0/0
  7980 ;;		On exit  : 0/0
  7981 ;;		Unchanged: 0/0
  7982 ;; Data sizes:     COMRAM   BANK0   BANK1
  7983 ;;      Params:         0       0       0
  7984 ;;      Locals:         1       0       0
  7985 ;;      Temps:          1       0       0
  7986 ;;      Totals:         2       0       0
  7987 ;;Total ram usage:        2 bytes
  7988 ;; Hardware stack levels used: 1
  7989 ;; Hardware stack levels required when called: 2
  7990 ;; This function calls:
  7991 ;;		Nothing
  7992 ;; This function is called by:
  7993 ;;		_CantaIR
  7994 ;;		_CantaData
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           	psect	text71
  7999   000F72                     __ptext71:
  8000                           	callstack 0
  8001   000F72                     _CantaPartBaixa:
  8002                           	callstack 24
  8003                           
  8004                           ;incstack = 0
  8005                           ;CantaPartBaixa@c stored from wreg
  8006   000F72  6E5D               	movwf	CantaPartBaixa@c^0,c
  8007                           
  8008                           ;TAD_LCD.c: 231:   (LATDbits.LATD7 = (c & 0x08 ? 1 : 0));
  8009   000F74  A65D               	btfss	CantaPartBaixa@c^0,3,c
  8010   000F76  D003               	goto	u2050
  8011   000F78  6A5C               	clrf	??_CantaPartBaixa^0,c
  8012   000F7A  2A5C               	incf	??_CantaPartBaixa^0,f,c
  8013   000F7C  D001               	goto	u2068
  8014   000F7E                     u2050:
  8015   000F7E  6A5C               	clrf	??_CantaPartBaixa^0,c
  8016   000F80                     u2068:
  8017   000F80  325C               	rrcf	??_CantaPartBaixa^0,f,c
  8018   000F82  325C               	rrcf	??_CantaPartBaixa^0,f,c
  8019   000F84  508C               	movf	140,w,c	;volatile
  8020   000F86  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8021   000F88  0B7F               	andlw	-129
  8022   000F8A  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8023   000F8C  6E8C               	movwf	140,c	;volatile
  8024                           
  8025                           ;TAD_LCD.c: 232:   (LATDbits.LATD6 = (c & 0x04 ? 1 : 0));
  8026   000F8E  A45D               	btfss	CantaPartBaixa@c^0,2,c
  8027   000F90  D003               	goto	u2070
  8028   000F92  6A5C               	clrf	??_CantaPartBaixa^0,c
  8029   000F94  2A5C               	incf	??_CantaPartBaixa^0,f,c
  8030   000F96  D001               	goto	u2088
  8031   000F98                     u2070:
  8032   000F98  6A5C               	clrf	??_CantaPartBaixa^0,c
  8033   000F9A                     u2088:
  8034   000F9A  3A5C               	swapf	??_CantaPartBaixa^0,f,c
  8035   000F9C  465C               	rlncf	??_CantaPartBaixa^0,f,c
  8036   000F9E  465C               	rlncf	??_CantaPartBaixa^0,f,c
  8037   000FA0  508C               	movf	140,w,c	;volatile
  8038   000FA2  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8039   000FA4  0BBF               	andlw	-65
  8040   000FA6  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8041   000FA8  6E8C               	movwf	140,c	;volatile
  8042                           
  8043                           ;TAD_LCD.c: 233:   (LATDbits.LATD5 = (c & 0x02 ? 1 : 0));
  8044   000FAA  A25D               	btfss	CantaPartBaixa@c^0,1,c
  8045   000FAC  D003               	goto	u2090
  8046   000FAE  6A5C               	clrf	??_CantaPartBaixa^0,c
  8047   000FB0  2A5C               	incf	??_CantaPartBaixa^0,f,c
  8048   000FB2  D001               	goto	u2108
  8049   000FB4                     u2090:
  8050   000FB4  6A5C               	clrf	??_CantaPartBaixa^0,c
  8051   000FB6                     u2108:
  8052   000FB6  3A5C               	swapf	??_CantaPartBaixa^0,f,c
  8053   000FB8  465C               	rlncf	??_CantaPartBaixa^0,f,c
  8054   000FBA  508C               	movf	140,w,c	;volatile
  8055   000FBC  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8056   000FBE  0BDF               	andlw	-33
  8057   000FC0  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8058   000FC2  6E8C               	movwf	140,c	;volatile
  8059                           
  8060                           ;TAD_LCD.c: 234:   (LATDbits.LATD4 = (c & 0x01 ? 1 : 0));
  8061   000FC4  A05D               	btfss	CantaPartBaixa@c^0,0,c
  8062   000FC6  D003               	goto	u2110
  8063   000FC8  6A5C               	clrf	??_CantaPartBaixa^0,c
  8064   000FCA  2A5C               	incf	??_CantaPartBaixa^0,f,c
  8065   000FCC  D001               	goto	u2128
  8066   000FCE                     u2110:
  8067   000FCE  6A5C               	clrf	??_CantaPartBaixa^0,c
  8068   000FD0                     u2128:
  8069   000FD0  3A5C               	swapf	??_CantaPartBaixa^0,f,c
  8070   000FD2  508C               	movf	140,w,c	;volatile
  8071   000FD4  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8072   000FD6  0BEF               	andlw	-17
  8073   000FD8  185C               	xorwf	??_CantaPartBaixa^0,w,c
  8074   000FDA  6E8C               	movwf	140,c	;volatile
  8075   000FDC  0012               	return		;funcret
  8076   000FDE                     __end_of_CantaPartBaixa:
  8077                           	callstack 0
  8078                           
  8079 ;; *************** function _CantaPartAlta *****************
  8080 ;; Defined at:
  8081 ;;		line 223 in file "TAD_LCD.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  c               1    wreg     unsigned char 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;  c               1    1[COMRAM] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      void 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1
  8095 ;;      Params:         0       0       0
  8096 ;;      Locals:         1       0       0
  8097 ;;      Temps:          1       0       0
  8098 ;;      Totals:         2       0       0
  8099 ;;Total ram usage:        2 bytes
  8100 ;; Hardware stack levels used: 1
  8101 ;; Hardware stack levels required when called: 2
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_CantaIR
  8106 ;;		_CantaData
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text72
  8111   000FDE                     __ptext72:
  8112                           	callstack 0
  8113   000FDE                     _CantaPartAlta:
  8114                           	callstack 24
  8115                           
  8116                           ;incstack = 0
  8117                           ;CantaPartAlta@c stored from wreg
  8118   000FDE  6E5D               	movwf	CantaPartAlta@c^0,c
  8119                           
  8120                           ;TAD_LCD.c: 224:   (LATDbits.LATD7 = (c & 0x80 ? 1 : 0));
  8121   000FE0  AE5D               	btfss	CantaPartAlta@c^0,7,c
  8122   000FE2  D003               	goto	u1970
  8123   000FE4  6A5C               	clrf	??_CantaPartAlta^0,c
  8124   000FE6  2A5C               	incf	??_CantaPartAlta^0,f,c
  8125   000FE8  D001               	goto	u1988
  8126   000FEA                     u1970:
  8127   000FEA  6A5C               	clrf	??_CantaPartAlta^0,c
  8128   000FEC                     u1988:
  8129   000FEC  325C               	rrcf	??_CantaPartAlta^0,f,c
  8130   000FEE  325C               	rrcf	??_CantaPartAlta^0,f,c
  8131   000FF0  508C               	movf	140,w,c	;volatile
  8132   000FF2  185C               	xorwf	??_CantaPartAlta^0,w,c
  8133   000FF4  0B7F               	andlw	-129
  8134   000FF6  185C               	xorwf	??_CantaPartAlta^0,w,c
  8135   000FF8  6E8C               	movwf	140,c	;volatile
  8136                           
  8137                           ;TAD_LCD.c: 225:   (LATDbits.LATD6 = (c & 0x40 ? 1 : 0));
  8138   000FFA  AC5D               	btfss	CantaPartAlta@c^0,6,c
  8139   000FFC  D003               	goto	u1990
  8140   000FFE  6A5C               	clrf	??_CantaPartAlta^0,c
  8141   001000  2A5C               	incf	??_CantaPartAlta^0,f,c
  8142   001002  D001               	goto	u2008
  8143   001004                     u1990:
  8144   001004  6A5C               	clrf	??_CantaPartAlta^0,c
  8145   001006                     u2008:
  8146   001006  3A5C               	swapf	??_CantaPartAlta^0,f,c
  8147   001008  465C               	rlncf	??_CantaPartAlta^0,f,c
  8148   00100A  465C               	rlncf	??_CantaPartAlta^0,f,c
  8149   00100C  508C               	movf	140,w,c	;volatile
  8150   00100E  185C               	xorwf	??_CantaPartAlta^0,w,c
  8151   001010  0BBF               	andlw	-65
  8152   001012  185C               	xorwf	??_CantaPartAlta^0,w,c
  8153   001014  6E8C               	movwf	140,c	;volatile
  8154                           
  8155                           ;TAD_LCD.c: 226:   (LATDbits.LATD5 = (c & 0x20 ? 1 : 0));
  8156   001016  AA5D               	btfss	CantaPartAlta@c^0,5,c
  8157   001018  D003               	goto	u2010
  8158   00101A  6A5C               	clrf	??_CantaPartAlta^0,c
  8159   00101C  2A5C               	incf	??_CantaPartAlta^0,f,c
  8160   00101E  D001               	goto	u2028
  8161   001020                     u2010:
  8162   001020  6A5C               	clrf	??_CantaPartAlta^0,c
  8163   001022                     u2028:
  8164   001022  3A5C               	swapf	??_CantaPartAlta^0,f,c
  8165   001024  465C               	rlncf	??_CantaPartAlta^0,f,c
  8166   001026  508C               	movf	140,w,c	;volatile
  8167   001028  185C               	xorwf	??_CantaPartAlta^0,w,c
  8168   00102A  0BDF               	andlw	-33
  8169   00102C  185C               	xorwf	??_CantaPartAlta^0,w,c
  8170   00102E  6E8C               	movwf	140,c	;volatile
  8171                           
  8172                           ;TAD_LCD.c: 227:   (LATDbits.LATD4 = (c & 0x10 ? 1 : 0));
  8173   001030  A85D               	btfss	CantaPartAlta@c^0,4,c
  8174   001032  D003               	goto	u2030
  8175   001034  6A5C               	clrf	??_CantaPartAlta^0,c
  8176   001036  2A5C               	incf	??_CantaPartAlta^0,f,c
  8177   001038  D001               	goto	u2048
  8178   00103A                     u2030:
  8179   00103A  6A5C               	clrf	??_CantaPartAlta^0,c
  8180   00103C                     u2048:
  8181   00103C  3A5C               	swapf	??_CantaPartAlta^0,f,c
  8182   00103E  508C               	movf	140,w,c	;volatile
  8183   001040  185C               	xorwf	??_CantaPartAlta^0,w,c
  8184   001042  0BEF               	andlw	-17
  8185   001044  185C               	xorwf	??_CantaPartAlta^0,w,c
  8186   001046  6E8C               	movwf	140,c	;volatile
  8187   001048  0012               	return		;funcret
  8188   00104A                     __end_of_CantaPartAlta:
  8189                           	callstack 0
  8190                           
  8191 ;; *************** function _KPAD_StopInput *****************
  8192 ;; Defined at:
  8193 ;;		line 80 in file "TAD_KEYPAD.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;		None
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;		None
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  1    wreg      void 
  8200 ;; Registers used:
  8201 ;;		None
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMRAM   BANK0   BANK1
  8207 ;;      Params:         0       0       0
  8208 ;;      Locals:         0       0       0
  8209 ;;      Temps:          0       0       0
  8210 ;;      Totals:         0       0       0
  8211 ;;Total ram usage:        0 bytes
  8212 ;; Hardware stack levels used: 1
  8213 ;; Hardware stack levels required when called: 2
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		_PORT_Motor
  8218 ;;		_CNT_Motor
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text73
  8223   0016B6                     __ptext73:
  8224                           	callstack 0
  8225   0016B6                     _KPAD_StopInput:
  8226                           	callstack 27
  8227                           
  8228                           ;TAD_KEYPAD.c: 81:     state = ready = 0;
  8229                           
  8230                           ;incstack = 0
  8231   0016B6  6A3B               	clrf	_ready^0,c
  8232   0016B8  6A40               	clrf	_state^0,c
  8233   0016BA  0012               	return		;funcret
  8234   0016BC                     __end_of_KPAD_StopInput:
  8235                           	callstack 0
  8236                           
  8237 ;; *************** function _KPAD_GetChar *****************
  8238 ;; Defined at:
  8239 ;;		line 84 in file "TAD_KEYPAD.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;		None
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;  aux             1    4[COMRAM] unsigned char 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  1    wreg      unsigned char 
  8246 ;; Registers used:
  8247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1
  8253 ;;      Params:         0       0       0
  8254 ;;      Locals:         3       0       0
  8255 ;;      Temps:          2       0       0
  8256 ;;      Totals:         5       0       0
  8257 ;;Total ram usage:        5 bytes
  8258 ;; Hardware stack levels used: 1
  8259 ;; Hardware stack levels required when called: 2
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_PORT_Motor
  8264 ;;		_MENU_Motor
  8265 ;;		_CNT_Motor
  8266 ;;		_MRCD_Motor
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           	psect	text74
  8271   0011AE                     __ptext74:
  8272                           	callstack 0
  8273   0011AE                     _KPAD_GetChar:
  8274                           	callstack 27
  8275                           
  8276                           ;TAD_KEYPAD.c: 85:     if(!ready) return 0xFF;
  8277                           
  8278                           ;incstack = 0
  8279   0011AE  503B               	movf	_ready^0,w,c
  8280   0011B0  E101               	bnz	l3603
  8281   0011B2  0CFF               	retlw	255
  8282   0011B4                     l3603:
  8283                           
  8284                           ;TAD_KEYPAD.c: 86:     unsigned char aux = KPAD_VALUES[currentValue][smsMode ? pressCoun
      +                          t : KPAD_NO_SMS[currentValue]];
  8285   0011B4  503F               	movf	_smsMode^0,w,c
  8286   0011B6  E10A               	bnz	l201
  8287   0011B8  0EDD               	movlw	low _KPAD_NO_SMS
  8288   0011BA  243D               	addwf	_currentValue^0,w,c
  8289   0011BC  6EF6               	movwf	tblptrl,c
  8290   0011BE  6AF7               	clrf	tblptrh,c
  8291   0011C0  0E1E               	movlw	high _KPAD_NO_SMS
  8292   0011C2  22F7               	addwfc	tblptrh,f,c
  8293   0011C4                     	if	0	;There are less than 3 active tblptr bytes
  8294   0011C4                     	endif
  8295   0011C4  0008               	tblrd		*
  8296   0011C6  50F5               	movf	tablat,w,c
  8297   0011C8  6E5E               	movwf	_KPAD_GetChar$576^0,c
  8298   0011CA  D002               	goto	L5
  8299   0011CC                     l201:
  8300   0011CC  C039  F05E         	movff	_pressCount,_KPAD_GetChar$576
  8301   0011D0                     L5:
  8302   0011D0  6A5F               	clrf	(_KPAD_GetChar$576+1)^0,c
  8303   0011D2  ECD3  F001         	call	PL26	;call to abstracted procedure
  8304   0011D6  CFDE F05C          	movff	postinc2,??_KPAD_GetChar
  8305   0011DA  CFDD F05D          	movff	postdec2,??_KPAD_GetChar+1
  8306   0011DE  505E               	movf	_KPAD_GetChar$576^0,w,c
  8307   0011E0  265C               	addwf	??_KPAD_GetChar^0,f,c
  8308   0011E2  505F               	movf	(_KPAD_GetChar$576+1)^0,w,c
  8309   0011E4  225D               	addwfc	(??_KPAD_GetChar+1)^0,f,c
  8310   0011E6  C05C  FFF6         	movff	??_KPAD_GetChar,tblptrl
  8311   0011EA  C05D  FFF7         	movff	??_KPAD_GetChar+1,tblptrh
  8312   0011EE                     	if	0	;tblptru may be non-zero
  8313   0011EE                     	endif
  8314   0011EE                     	if	0	;tblptru may be non-zero
  8315   0011EE                     	endif
  8316   0011EE  0008               	tblrd		*
  8317   0011F0  CFF5 F060          	movff	tablat,KPAD_GetChar@aux
  8318                           
  8319                           ;TAD_KEYPAD.c: 87:     ready = pressCount = 0;
  8320   0011F4  6A39               	clrf	_pressCount^0,c
  8321   0011F6  6A3B               	clrf	_ready^0,c
  8322                           
  8323                           ;TAD_KEYPAD.c: 88:     return aux;
  8324   0011F8  5060               	movf	KPAD_GetChar@aux^0,w,c
  8325   0011FA  0012               	return		;funcret
  8326   0011FC                     __end_of_KPAD_GetChar:
  8327                           	callstack 0
  8328                           
  8329 ;; *************** function _CNT_Init *****************
  8330 ;; Defined at:
  8331 ;;		line 24 in file "TAD_COUNTER.c"
  8332 ;; Parameters:    Size  Location     Type
  8333 ;;		None
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;		None
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      void 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1
  8345 ;;      Params:         0       0       0
  8346 ;;      Locals:         0       0       0
  8347 ;;      Temps:          0       0       0
  8348 ;;      Totals:         0       0       0
  8349 ;;Total ram usage:        0 bytes
  8350 ;; Hardware stack levels used: 1
  8351 ;; Hardware stack levels required when called: 3
  8352 ;; This function calls:
  8353 ;;		_TI_NewTimer
  8354 ;;		_TI_ResetTics
  8355 ;; This function is called by:
  8356 ;;		_main
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           	psect	text75
  8361   001564                     __ptext75:
  8362                           	callstack 0
  8363   001564                     _CNT_Init:
  8364                           	callstack 27
  8365                           
  8366                           ;TAD_COUNTER.c: 25:     showTime = modifyTime = state = 0;
  8367                           
  8368                           ;incstack = 0
  8369   001564  6A1B               	clrf	_state@TAD_COUNTER$F1357^0,c
  8370   001566  6A1D               	clrf	_modifyTime^0,c
  8371   001568  6A1C               	clrf	_showTime^0,c
  8372                           
  8373                           ;TAD_COUNTER.c: 26:     TI_NewTimer(&timerHora);
  8374   00156A  0E53               	movlw	low _timerHora
  8375   00156C  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  8376   00156E  EC21  F009         	call	_TI_NewTimer	;wreg free
  8377                           
  8378                           ;TAD_COUNTER.c: 27:     TI_ResetTics(timerHora);
  8379   001572  5053               	movf	_timerHora^0,w,c
  8380   001574  EF27  F00A         	goto	_TI_ResetTics
  8381   001578                     __end_of_CNT_Init:
  8382                           	callstack 0
  8383                           
  8384 ;; *************** function _BUZZ_Motor *****************
  8385 ;; Defined at:
  8386 ;;		line 45 in file "TAD_BUZZER.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      void 
  8393 ;; Registers used:
  8394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8395 ;; Tracked objects:
  8396 ;;		On entry : 0/0
  8397 ;;		On exit  : 0/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1
  8400 ;;      Params:         0       0       0
  8401 ;;      Locals:         0       0       0
  8402 ;;      Temps:          4       0       0
  8403 ;;      Totals:         4       0       0
  8404 ;;Total ram usage:        4 bytes
  8405 ;; Hardware stack levels used: 1
  8406 ;; Hardware stack levels required when called: 4
  8407 ;; This function calls:
  8408 ;;		_BUZZ_Play
  8409 ;;		_TI_GetTics
  8410 ;;		_TI_ResetTics
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           	psect	text76
  8417   000A30                     __ptext76:
  8418                           	callstack 0
  8419   000A30                     _BUZZ_Motor:
  8420                           	callstack 26
  8421                           
  8422                           ;TAD_BUZZER.c: 48:     switch (state){
  8423                           
  8424                           ;incstack = 0
  8425   000A30  D048               	goto	l4611
  8426   000A32                     l566:
  8427                           
  8428                           ;TAD_BUZZER.c: 50:             LATBbits.LATB5 = 0;
  8429   000A32  9A8A               	bcf	138,5,c	;volatile
  8430                           
  8431                           ;TAD_BUZZER.c: 51:             break;
  8432   000A34  0012               	return	
  8433   000A36                     l4571:
  8434                           
  8435                           ;TAD_BUZZER.c: 53:             if(TI_GetTics(timerMelody) >= melodyPause){
  8436   000A36  500F               	movf	_melodyPause^0,w,c
  8437   000A38  6E69               	movwf	??_BUZZ_Motor^0,c
  8438   000A3A  5010               	movf	(_melodyPause+1)^0,w,c
  8439   000A3C  6E6A               	movwf	(??_BUZZ_Motor+1)^0,c
  8440   000A3E  6A6B               	clrf	(??_BUZZ_Motor+2)^0,c
  8441   000A40  6A6C               	clrf	(??_BUZZ_Motor+3)^0,c
  8442   000A42  5056               	movf	_timerMelody^0,w,c
  8443   000A44  EC84  F008         	call	_TI_GetTics
  8444   000A48  D84D               	call	PL4	;call to abstracted procedure
  8445   000A4A  E307               	bnc	l4579
  8446                           
  8447                           ;TAD_BUZZER.c: 54:                 TI_ResetTics(timerMelody);
  8448   000A4C  5056               	movf	_timerMelody^0,w,c
  8449   000A4E  EC27  F00A         	call	_TI_ResetTics
  8450                           
  8451                           ;TAD_BUZZER.c: 55:                 melodyIndex++;
  8452   000A52  2A28               	incf	_melodyIndex^0,f,c
  8453                           
  8454                           ;TAD_BUZZER.c: 56:                 BUZZ_Play(MELODY[melodyIndex]);
  8455   000A54  D850               	call	PL14	;call to abstracted procedure
  8456   000A56  EF9D  F00A         	goto	_BUZZ_Play
  8457   000A5A                     l4579:
  8458   000A5A  0E0B               	movlw	11
  8459   000A5C  6428               	cpfsgt	_melodyIndex^0,c
  8460   000A5E  0C0B               	retlw	11
  8461                           
  8462                           ;TAD_BUZZER.c: 59:                 playingMelody = 0;
  8463   000A60  6A29               	clrf	_playingMelody^0,c
  8464                           
  8465                           ;TAD_BUZZER.c: 60:                 state = 0;
  8466   000A62  6A2C               	clrf	_state@TAD_BUZZER$F1215^0,c
  8467   000A64  0012               	return	
  8468   000A66                     l4583:
  8469                           
  8470                           ;TAD_BUZZER.c: 64:             if(TI_GetTics(timerNote) >= 400){
  8471   000A66  5057               	movf	_timerNote^0,w,c
  8472   000A68  EC84  F008         	call	_TI_GetTics
  8473   000A6C  505F               	movf	(?_TI_GetTics+3)^0,w,c
  8474   000A6E  105E               	iorwf	(?_TI_GetTics+2)^0,w,c
  8475   000A70  E105               	bnz	u3440
  8476   000A72  0E90               	movlw	144
  8477   000A74  5C5C               	subwf	?_TI_GetTics^0,w,c
  8478   000A76  0E01               	movlw	1
  8479   000A78  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  8480   000A7A  E308               	bnc	l4593
  8481   000A7C                     u3440:
  8482                           
  8483                           ;TAD_BUZZER.c: 65:                 TI_ResetTics(timerNote);
  8484   000A7C  5057               	movf	_timerNote^0,w,c
  8485   000A7E  EC27  F00A         	call	_TI_ResetTics
  8486                           
  8487                           ;TAD_BUZZER.c: 66:                 state--;
  8488   000A82  062C               	decf	_state@TAD_BUZZER$F1215^0,f,c
  8489                           
  8490                           ;TAD_BUZZER.c: 67:                 if(!playingMelody) state--;
  8491   000A84  5029               	movf	_playingMelody^0,w,c
  8492   000A86  B4D8               	btfsc	status,2,c
  8493   000A88  062C               	decf	_state@TAD_BUZZER$F1215^0,f,c
  8494   000A8A  0012               	return	
  8495   000A8C                     l4593:
  8496                           
  8497                           ;TAD_BUZZER.c: 70:             TI_ResetTics(timerPWM);
  8498   000A8C  5058               	movf	_timerPWM^0,w,c
  8499   000A8E  EC27  F00A         	call	_TI_ResetTics
  8500   000A92                     l4595:
  8501                           
  8502                           ;TAD_BUZZER.c: 71:             state++;
  8503   000A92  2A2C               	incf	_state@TAD_BUZZER$F1215^0,f,c
  8504                           
  8505                           ;TAD_BUZZER.c: 72:             break;
  8506   000A94  0012               	return	
  8507   000A96                     l4597:
  8508                           
  8509                           ;TAD_BUZZER.c: 74:             if(TI_GetTics(timerPWM) >= dutyCycle){
  8510   000A96  C02A  F069         	movff	_dutyCycle,??_BUZZ_Motor
  8511   000A9A  D836               	call	PL46	;call to abstracted procedure
  8512   000A9C  EC84  F008         	call	_TI_GetTics
  8513   000AA0  D821               	call	PL4	;call to abstracted procedure
  8514   000AA2  A0D8               	btfss	status,0,c
  8515   000AA4  0012               	return	
  8516                           
  8517                           ;TAD_BUZZER.c: 75:                 LATBbits.LATB5 = 1;
  8518   000AA6  8A8A               	bsf	138,5,c	;volatile
  8519   000AA8  D7F4               	goto	l4595
  8520   000AAA                     l4603:
  8521                           
  8522                           ;TAD_BUZZER.c: 80:             if(TI_GetTics(timerPWM) >= period){
  8523   000AAA  C02B  F069         	movff	_period,??_BUZZ_Motor
  8524   000AAE  D82C               	call	PL46	;call to abstracted procedure
  8525   000AB0  EC84  F008         	call	_TI_GetTics
  8526   000AB4  D817               	call	PL4	;call to abstracted procedure
  8527   000AB6  A0D8               	btfss	status,0,c
  8528   000AB8  0012               	return	
  8529                           
  8530                           ;TAD_BUZZER.c: 81:                 LATBbits.LATB5 = 0;
  8531   000ABA  9A8A               	bcf	138,5,c	;volatile
  8532                           
  8533                           ;TAD_BUZZER.c: 82:                 state = 2;
  8534   000ABC  0E02               	movlw	2
  8535   000ABE  6E2C               	movwf	_state@TAD_BUZZER$F1215^0,c
  8536   000AC0  0C02               	retlw	2
  8537   000AC2                     l4611:
  8538   000AC2  502C               	movf	_state@TAD_BUZZER$F1215^0,w,c
  8539   000AC4  6E69               	movwf	??_BUZZ_Motor^0,c
  8540   000AC6  6A6A               	clrf	(??_BUZZ_Motor+1)^0,c
  8541                           
  8542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8543                           ; Switch size 1, requested type "space"
  8544                           ; Number of cases is 1, Range of values is 0 to 0
  8545                           ; switch strategies available:
  8546                           ; Name         Instructions Cycles
  8547                           ; simple_byte            4     3 (average)
  8548                           ;	Chosen strategy is simple_byte
  8549   000AC8  506A               	movf	(??_BUZZ_Motor+1)^0,w,c
  8550   000ACA  A4D8               	btfss	status,2,c
  8551   000ACC  0012               	return	
  8552                           
  8553                           ; Switch size 1, requested type "space"
  8554                           ; Number of cases is 5, Range of values is 0 to 4
  8555                           ; switch strategies available:
  8556                           ; Name         Instructions Cycles
  8557                           ; simple_byte           16     9 (average)
  8558                           ;	Chosen strategy is simple_byte
  8559   000ACE  5069               	movf	??_BUZZ_Motor^0,w,c
  8560   000AD0  E0B0               	bz	l566
  8561   000AD2  0A01               	xorlw	1	; case 1
  8562   000AD4  E0B0               	bz	l4571
  8563   000AD6  0A03               	xorlw	3	; case 2
  8564   000AD8  E0C6               	bz	l4583
  8565   000ADA  0A01               	xorlw	1	; case 3
  8566   000ADC  E0DC               	bz	l4597
  8567   000ADE  0A07               	xorlw	7	; case 4
  8568   000AE0  E0E4               	bz	l4603
  8569   000AE2  0012               	return		;funcret
  8570   000AE4                     __end_of_BUZZ_Motor:
  8571                           	callstack 0
  8572   000AE4                     PL4:
  8573                           	callstack 26
  8574   000AE4  5069               	movf	??_BUZZ_Motor^0,w,c
  8575   000AE6  5C5C               	subwf	?_TI_GetTics^0,w,c
  8576   000AE8  506A               	movf	(??_BUZZ_Motor+1)^0,w,c
  8577   000AEA  585D               	subwfb	(?_TI_GetTics+1)^0,w,c
  8578   000AEC  506B               	movf	(??_BUZZ_Motor+2)^0,w,c
  8579   000AEE  585E               	subwfb	(?_TI_GetTics+2)^0,w,c
  8580   000AF0  506C               	movf	(??_BUZZ_Motor+3)^0,w,c
  8581   000AF2  585F               	subwfb	(?_TI_GetTics+3)^0,w,c
  8582   000AF4  0012               	return	
  8583   000AF6                     __end_ofPL4:
  8584                           	callstack 0
  8585   000AF6                     PL14:
  8586                           	callstack 25
  8587   000AF6  0E01               	movlw	low _MELODY
  8588   000AF8  2428               	addwf	_melodyIndex^0,w,c
  8589   000AFA  6EF6               	movwf	tblptrl,c
  8590   000AFC  6AF7               	clrf	tblptrh,c
  8591   000AFE  0E1F               	movlw	high _MELODY
  8592   000B00  22F7               	addwfc	tblptrh,f,c
  8593   000B02                     	if	0	;There are less than 3 active tblptr bytes
  8594   000B02                     	endif
  8595   000B02  0008               	tblrd		*
  8596   000B04  50F5               	movf	tablat,w,c
  8597   000B06  0012               	return	
  8598   000B08                     __end_ofPL14:
  8599                           	callstack 0
  8600   000B08                     PL46:
  8601                           	callstack 26
  8602   000B08  6A6A               	clrf	(??_BUZZ_Motor+1)^0,c
  8603   000B0A  6A6B               	clrf	(??_BUZZ_Motor+2)^0,c
  8604   000B0C  6A6C               	clrf	(??_BUZZ_Motor+3)^0,c
  8605   000B0E  5058               	movf	_timerPWM^0,w,c
  8606   000B10  0012               	return	
  8607   000B12                     __end_ofPL46:
  8608                           	callstack 0
  8609                           
  8610 ;; *************** function _TI_GetTics *****************
  8611 ;; Defined at:
  8612 ;;		line 57 in file "TAD_TIMER.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  TimerHandle     1    wreg     unsigned char 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  TimerHandle     1   12[COMRAM] unsigned char 
  8617 ;;  CopiaTicsAct    4    8[COMRAM] unsigned long 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  4    0[COMRAM] unsigned long 
  8620 ;; Registers used:
  8621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1
  8627 ;;      Params:         4       0       0
  8628 ;;      Locals:         5       0       0
  8629 ;;      Temps:          4       0       0
  8630 ;;      Totals:        13       0       0
  8631 ;;Total ram usage:       13 bytes
  8632 ;; Hardware stack levels used: 1
  8633 ;; Hardware stack levels required when called: 2
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_TI_Wait40ms
  8638 ;;		_KPAD_Motor
  8639 ;;		_Espera
  8640 ;;		_WaitForBusy
  8641 ;;		_BUZZ_Motor
  8642 ;;		_MQ_Motor
  8643 ;;		_MENU_Motor
  8644 ;;		_CNT_Motor
  8645 ;;		_MICRO_Motor
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text77
  8650   001108                     __ptext77:
  8651                           	callstack 0
  8652   001108                     _TI_GetTics:
  8653                           	callstack 27
  8654                           
  8655                           ;incstack = 0
  8656                           ;TI_GetTics@TimerHandle stored from wreg
  8657   001108  6E68               	movwf	TI_GetTics@TimerHandle^0,c
  8658                           
  8659                           ;TAD_TIMER.c: 58:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONb
      +                          its.GIE = 1);
  8660   00110A  9EF2               	bcf	242,7,c	;volatile
  8661   00110C  C005  F064         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  8662   001110  C006  F065         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  8663   001114  C007  F066         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  8664   001118  C008  F067         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  8665   00111C  8EF2               	bsf	242,7,c	;volatile
  8666                           
  8667                           ;TAD_TIMER.c: 59:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  8668   00111E  5068               	movf	TI_GetTics@TimerHandle^0,w,c
  8669   001120  D815               	call	PL18	;call to abstracted procedure
  8670   001122  CFDE F060          	movff	postinc2,??_TI_GetTics
  8671   001126  CFDE F061          	movff	postinc2,??_TI_GetTics+1
  8672   00112A  CFDE F062          	movff	postinc2,??_TI_GetTics+2
  8673   00112E  CFDE F063          	movff	postinc2,??_TI_GetTics+3
  8674   001132  5060               	movf	??_TI_GetTics^0,w,c
  8675   001134  5C64               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  8676   001136  6E5C               	movwf	?_TI_GetTics^0,c
  8677   001138  5061               	movf	(??_TI_GetTics+1)^0,w,c
  8678   00113A  5865               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  8679   00113C  6E5D               	movwf	(?_TI_GetTics+1)^0,c
  8680   00113E  5062               	movf	(??_TI_GetTics+2)^0,w,c
  8681   001140  5866               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  8682   001142  6E5E               	movwf	(?_TI_GetTics+2)^0,c
  8683   001144  5063               	movf	(??_TI_GetTics+3)^0,w,c
  8684   001146  5867               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  8685   001148  6E5F               	movwf	(?_TI_GetTics+3)^0,c
  8686   00114A  0012               	return		;funcret
  8687   00114C                     __end_of_TI_GetTics:
  8688                           	callstack 0
  8689   00114C                     PL18:
  8690                           	callstack 27
  8691   00114C  0D05               	mullw	5
  8692   00114E  0E00               	movlw	low _Timers
  8693   001150  24F3               	addwf	243,w,c
  8694   001152  6ED9               	movwf	fsr2l,c
  8695   001154  0E01               	movlw	high _Timers
  8696   001156  20F4               	addwfc	prodh,w,c
  8697   001158  6EDA               	movwf	fsr2h,c
  8698   00115A  0012               	return	
  8699   00115C                     __end_ofPL18:
  8700                           	callstack 0
  8701                           
  8702 ;; *************** function _BUZZ_Play *****************
  8703 ;; Defined at:
  8704 ;;		line 28 in file "TAD_BUZZER.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;  note            1    wreg     unsigned char 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;  note            1    1[COMRAM] unsigned char 
  8709 ;; Return value:  Size  Location     Type
  8710 ;;                  1    wreg      void 
  8711 ;; Registers used:
  8712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMRAM   BANK0   BANK1
  8718 ;;      Params:         0       0       0
  8719 ;;      Locals:         1       0       0
  8720 ;;      Temps:          0       0       0
  8721 ;;      Totals:         1       0       0
  8722 ;;Total ram usage:        1 bytes
  8723 ;; Hardware stack levels used: 1
  8724 ;; Hardware stack levels required when called: 3
  8725 ;; This function calls:
  8726 ;;		_TI_ResetTics
  8727 ;; This function is called by:
  8728 ;;		_KPAD_Motor
  8729 ;;		_BUZZ_PlayMelody
  8730 ;;		_BUZZ_Motor
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text78
  8735   00153A                     __ptext78:
  8736                           	callstack 0
  8737   00153A                     _BUZZ_Play:
  8738                           	callstack 25
  8739                           
  8740                           ;incstack = 0
  8741                           ;BUZZ_Play@note stored from wreg
  8742   00153A  6E5D               	movwf	BUZZ_Play@note^0,c
  8743                           
  8744                           ;TAD_BUZZER.c: 31:     state = 2;
  8745   00153C  0E02               	movlw	2
  8746   00153E  6E2C               	movwf	_state@TAD_BUZZER$F1215^0,c
  8747                           
  8748                           ;TAD_BUZZER.c: 32:     period = note;
  8749   001540  C05D  F02B         	movff	BUZZ_Play@note,_period
  8750                           
  8751                           ;TAD_BUZZER.c: 33:     dutyCycle = (period >> 1);
  8752   001544  90D8               	bcf	status,0,c
  8753   001546  302B               	rrcf	_period^0,w,c
  8754   001548  6E2A               	movwf	_dutyCycle^0,c
  8755                           
  8756                           ;TAD_BUZZER.c: 34:     TI_ResetTics(timerNote);
  8757   00154A  5057               	movf	_timerNote^0,w,c
  8758   00154C  EF27  F00A         	goto	_TI_ResetTics
  8759   001550                     __end_of_BUZZ_Play:
  8760                           	callstack 0
  8761                           
  8762 ;; *************** function _TI_ResetTics *****************
  8763 ;; Defined at:
  8764 ;;		line 52 in file "TAD_TIMER.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;  TimerHandle     1    wreg     unsigned char 
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;  TimerHandle     1    0[COMRAM] unsigned char 
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      void 
  8771 ;; Registers used:
  8772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMRAM   BANK0   BANK1
  8778 ;;      Params:         0       0       0
  8779 ;;      Locals:         1       0       0
  8780 ;;      Temps:          0       0       0
  8781 ;;      Totals:         1       0       0
  8782 ;;Total ram usage:        1 bytes
  8783 ;; Hardware stack levels used: 1
  8784 ;; Hardware stack levels required when called: 2
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_TI_Wait40ms
  8789 ;;		_KPAD_Motor
  8790 ;;		_Espera
  8791 ;;		_WaitForBusy
  8792 ;;		_BUZZ_Play
  8793 ;;		_BUZZ_PlayMelody
  8794 ;;		_BUZZ_Motor
  8795 ;;		_MQ_PutString
  8796 ;;		_MQ_Motor
  8797 ;;		_MENU_Motor
  8798 ;;		_CNT_Init
  8799 ;;		_CNT_Motor
  8800 ;;		_MICRO_Motor
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           	psect	text79
  8805   00144E                     __ptext79:
  8806                           	callstack 0
  8807   00144E                     _TI_ResetTics:
  8808                           	callstack 27
  8809                           
  8810                           ;incstack = 0
  8811                           ;TI_ResetTics@TimerHandle stored from wreg
  8812   00144E  6E5C               	movwf	TI_ResetTics@TimerHandle^0,c
  8813                           
  8814                           ;TAD_TIMER.c: 53:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONb
      +                          its.GIE = 1);
  8815   001450  9EF2               	bcf	242,7,c	;volatile
  8816   001452  505C               	movf	TI_ResetTics@TimerHandle^0,w,c
  8817   001454  ECA6  F008         	call	PL18	;call to abstracted procedure
  8818   001458  C005  FFDE         	movff	_Tics,postinc2	;volatile
  8819   00145C  C006  FFDE         	movff	_Tics+1,postinc2	;volatile
  8820   001460  C007  FFDE         	movff	_Tics+2,postinc2	;volatile
  8821   001464  C008  FFDE         	movff	_Tics+3,postinc2	;volatile
  8822   001468  8EF2               	bsf	242,7,c	;volatile
  8823   00146A  0012               	return		;funcret
  8824   00146C                     __end_of_TI_ResetTics:
  8825                           	callstack 0
  8826                           
  8827 ;; *************** function _BUZZ_Init *****************
  8828 ;; Defined at:
  8829 ;;		line 17 in file "TAD_BUZZER.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;		None
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;		None
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      void 
  8836 ;; Registers used:
  8837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:     COMRAM   BANK0   BANK1
  8843 ;;      Params:         0       0       0
  8844 ;;      Locals:         0       0       0
  8845 ;;      Temps:          0       0       0
  8846 ;;      Totals:         0       0       0
  8847 ;;Total ram usage:        0 bytes
  8848 ;; Hardware stack levels used: 1
  8849 ;; Hardware stack levels required when called: 3
  8850 ;; This function calls:
  8851 ;;		_TI_NewTimer
  8852 ;; This function is called by:
  8853 ;;		_main
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text80
  8858   00146C                     __ptext80:
  8859                           	callstack 0
  8860   00146C                     _BUZZ_Init:
  8861                           	callstack 27
  8862                           
  8863                           ;TAD_BUZZER.c: 20:     TRISBbits.TRISB5 = 0;
  8864                           
  8865                           ;incstack = 0
  8866   00146C  9A93               	bcf	147,5,c	;volatile
  8867                           
  8868                           ;TAD_BUZZER.c: 21:     LATBbits.LATB5 = 0;
  8869   00146E  9A8A               	bcf	138,5,c	;volatile
  8870                           
  8871                           ;TAD_BUZZER.c: 22:     playingMelody = 0;
  8872   001470  6A29               	clrf	_playingMelody^0,c
  8873                           
  8874                           ;TAD_BUZZER.c: 23:     TI_NewTimer(&timerPWM);
  8875   001472  0E58               	movlw	low _timerPWM
  8876   001474  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  8877   001476  EC21  F009         	call	_TI_NewTimer	;wreg free
  8878                           
  8879                           ;TAD_BUZZER.c: 24:     TI_NewTimer(&timerNote);
  8880   00147A  0E57               	movlw	low _timerNote
  8881   00147C  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  8882   00147E  EC21  F009         	call	_TI_NewTimer	;wreg free
  8883                           
  8884                           ;TAD_BUZZER.c: 25:     TI_NewTimer(&timerMelody);
  8885   001482  0E56               	movlw	low _timerMelody
  8886   001484  6E5C               	movwf	TI_NewTimer@TimerHandle^0,c
  8887   001486  EF21  F009         	goto	_TI_NewTimer	;wreg free
  8888   00148A                     __end_of_BUZZ_Init:
  8889                           	callstack 0
  8890                           
  8891 ;; *************** function _TI_NewTimer *****************
  8892 ;; Defined at:
  8893 ;;		line 42 in file "TAD_TIMER.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  TimerHandle     1    0[COMRAM] PTR unsigned char 
  8896 ;;		 -> txTimer(1), timerHora(1), timerByeBye(1), timer(1), 
  8897 ;;		 -> timerMelody(1), timerNote(1), timerPWM(1), Timer(1), 
  8898 ;;		 -> timerRebots(1), timerSms(1), TI_Wait40ms@Timer(1), 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  Comptador       1    2[COMRAM] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      unsigned char 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1
  8910 ;;      Params:         1       0       0
  8911 ;;      Locals:         1       0       0
  8912 ;;      Temps:          1       0       0
  8913 ;;      Totals:         3       0       0
  8914 ;;Total ram usage:        3 bytes
  8915 ;; Hardware stack levels used: 1
  8916 ;; Hardware stack levels required when called: 2
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_TI_Wait40ms
  8921 ;;		_KPAD_Init
  8922 ;;		_LCD_Init
  8923 ;;		_BUZZ_Init
  8924 ;;		_MQ_Init
  8925 ;;		_MENU_Init
  8926 ;;		_CNT_Init
  8927 ;;		_MICRO_Init
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text81
  8932   001242                     __ptext81:
  8933                           	callstack 0
  8934   001242                     _TI_NewTimer:
  8935                           	callstack 27
  8936                           
  8937                           ;TAD_TIMER.c: 43:  unsigned char Comptador=0;
  8938                           
  8939                           ;incstack = 0
  8940   001242  6A5E               	clrf	TI_NewTimer@Comptador^0,c
  8941                           
  8942                           ;TAD_TIMER.c: 44:  while (Timers[Comptador].Busy==1) {
  8943   001244  D005               	goto	l3587
  8944   001246                     l3583:
  8945                           
  8946                           ;TAD_TIMER.c: 45:   if (++Comptador == 16) return (0);
  8947   001246  2A5E               	incf	TI_NewTimer@Comptador^0,f,c
  8948   001248  0E10               	movlw	16
  8949   00124A  185E               	xorwf	TI_NewTimer@Comptador^0,w,c
  8950   00124C  E101               	bnz	l3587
  8951   00124E  0012               	return	
  8952   001250                     l3587:
  8953                           
  8954                           ;TAD_TIMER.c: 44:  while (Timers[Comptador].Busy==1) {
  8955   001250  505E               	movf	TI_NewTimer@Comptador^0,w,c
  8956   001252  D80C               	call	PL2	;call to abstracted procedure
  8957   001254  04DE               	decf	postinc2,w,c
  8958   001256  E0F7               	bz	l3583
  8959                           
  8960                           ;TAD_TIMER.c: 47:  Timers[Comptador].Busy=1;
  8961   001258  505E               	movf	TI_NewTimer@Comptador^0,w,c
  8962   00125A  D808               	call	PL2	;call to abstracted procedure
  8963   00125C  0E01               	movlw	1
  8964   00125E  6EDF               	movwf	indf2,c
  8965                           
  8966                           ;TAD_TIMER.c: 48:  *TimerHandle=Comptador;
  8967   001260  505C               	movf	TI_NewTimer@TimerHandle^0,w,c
  8968   001262  6ED9               	movwf	fsr2l,c
  8969   001264  6ADA               	clrf	fsr2h,c
  8970   001266  C05E  FFDF         	movff	TI_NewTimer@Comptador,indf2
  8971   00126A  0012               	return		;funcret
  8972   00126C                     __end_of_TI_NewTimer:
  8973                           	callstack 0
  8974   00126C                     PL2:
  8975                           	callstack 28
  8976   00126C  0D05               	mullw	5
  8977   00126E  0E04               	movlw	low (_Timers+4)
  8978   001270  24F3               	addwf	243,w,c
  8979   001272  6ED9               	movwf	fsr2l,c
  8980   001274  0E01               	movlw	high (_Timers+4)
  8981   001276  20F4               	addwfc	prodh,w,c
  8982   001278  6EDA               	movwf	fsr2h,c
  8983   00127A  0012               	return	
  8984   00127C                     __end_ofPL2:
  8985                           	callstack 0
  8986                           
  8987 ;; *************** function _HighRSI *****************
  8988 ;; Defined at:
  8989 ;;		line 33 in file "main.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		wreg, status,2, status,0, cstack
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMRAM   BANK0   BANK1
  9003 ;;      Params:         0       0       0
  9004 ;;      Locals:         0       0       0
  9005 ;;      Temps:          0       0       0
  9006 ;;      Totals:         0       0       0
  9007 ;;Total ram usage:        0 bytes
  9008 ;; Hardware stack levels used: 1
  9009 ;; Hardware stack levels required when called: 1
  9010 ;; This function calls:
  9011 ;;		_RSI_Timer0
  9012 ;; This function is called by:
  9013 ;;		Interrupt level 2
  9014 ;; This function uses a non-reentrant model
  9015 ;;
  9016                           
  9017                           	psect	intcode
  9018   000008                     __pintcode:
  9019                           	callstack 0
  9020   000008                     _HighRSI:
  9021                           	callstack 24
  9022                           
  9023                           ;incstack = 0
  9024   000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9025                           
  9026                           ;main.c: 34:     JOY_Init();
  9027   00000A  B4F2               	btfsc	242,2,c	;volatile
  9028   00000C  ECC5  F00A         	call	_RSI_Timer0	;wreg free
  9029   000010  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9030   000012  0011               	retfie		f
  9031   000014                     __end_of_HighRSI:
  9032                           	callstack 0
  9033                           
  9034 ;; *************** function _RSI_Timer0 *****************
  9035 ;; Defined at:
  9036 ;;		line 24 in file "TAD_TIMER.c"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;		None
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;		None
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      void 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2, status,0
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1
  9050 ;;      Params:         0       0       0
  9051 ;;      Locals:         0       0       0
  9052 ;;      Temps:          0       0       0
  9053 ;;      Totals:         0       0       0
  9054 ;;Total ram usage:        0 bytes
  9055 ;; Hardware stack levels used: 1
  9056 ;; This function calls:
  9057 ;;		Nothing
  9058 ;; This function is called by:
  9059 ;;		_HighRSI
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text83
  9064   00158A                     __ptext83:
  9065                           	callstack 0
  9066   00158A                     _RSI_Timer0:
  9067                           	callstack 24
  9068                           
  9069                           ;TAD_TIMER.c: 26:     TMR0L=100;
  9070                           
  9071                           ;incstack = 0
  9072   00158A  0E64               	movlw	100
  9073   00158C  6ED6               	movwf	214,c	;volatile
  9074                           
  9075                           ;TAD_TIMER.c: 27:     TMR0IF=0;
  9076   00158E  94F2               	bcf	4082,2,c	;volatile
  9077                           
  9078                           ;TAD_TIMER.c: 28:     Tics++;
  9079   001590  2A05               	incf	_Tics^0,f,c	;volatile
  9080   001592  0E00               	movlw	0
  9081   001594  2206               	addwfc	(_Tics+1)^0,f,c	;volatile
  9082   001596  2207               	addwfc	(_Tics+2)^0,f,c	;volatile
  9083   001598  2208               	addwfc	(_Tics+3)^0,f,c	;volatile
  9084   00159A  0C00               	retlw	0	;funcret
  9085   00159C                     __end_of_RSI_Timer0:
  9086                           	callstack 0
  9087                           
  9088                           	psect	rparam
  9089   000000                     
  9090                           	psect	temp
  9091   000077                     btemp:
  9092                           	callstack 0
  9093   000077                     	ds	1
  9094   000000                     int$flags	set	btemp
  9095   000000                     wtemp8	set	btemp+1
  9096   000000                     ttemp5	set	btemp+1
  9097   000000                     ttemp6	set	btemp+4
  9098   000000                     ttemp7	set	btemp+8
  9099                           
  9100                           	psect	idloc
  9101                           
  9102                           ;Config register IDLOC0 @ 0x200000
  9103                           ;	unspecified, using default values
  9104   200000                     	org	2097152
  9105   200000  FF                 	db	255
  9106                           
  9107                           ;Config register IDLOC1 @ 0x200001
  9108                           ;	unspecified, using default values
  9109   200001                     	org	2097153
  9110   200001  FF                 	db	255
  9111                           
  9112                           ;Config register IDLOC2 @ 0x200002
  9113                           ;	unspecified, using default values
  9114   200002                     	org	2097154
  9115   200002  FF                 	db	255
  9116                           
  9117                           ;Config register IDLOC3 @ 0x200003
  9118                           ;	unspecified, using default values
  9119   200003                     	org	2097155
  9120   200003  FF                 	db	255
  9121                           
  9122                           ;Config register IDLOC4 @ 0x200004
  9123                           ;	unspecified, using default values
  9124   200004                     	org	2097156
  9125   200004  FF                 	db	255
  9126                           
  9127                           ;Config register IDLOC5 @ 0x200005
  9128                           ;	unspecified, using default values
  9129   200005                     	org	2097157
  9130   200005  FF                 	db	255
  9131                           
  9132                           ;Config register IDLOC6 @ 0x200006
  9133                           ;	unspecified, using default values
  9134   200006                     	org	2097158
  9135   200006  FF                 	db	255
  9136                           
  9137                           ;Config register IDLOC7 @ 0x200007
  9138                           ;	unspecified, using default values
  9139   200007                     	org	2097159
  9140   200007  FF                 	db	255
  9141                           
  9142                           	psect	config
  9143                           
  9144                           ; Padding undefined space
  9145   300000                     	org	3145728
  9146   300000  FF                 	db	255
  9147                           
  9148                           ;Config register CONFIG1H @ 0x300001
  9149                           ;	Oscillator
  9150                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  9151                           ;	Fail-Safe Clock Monitor Enable bit
  9152                           ;	FCMEN = 0x0, unprogrammed default
  9153                           ;	Internal/External Oscillator Switchover bit
  9154                           ;	IESO = 0x0, unprogrammed default
  9155   300001                     	org	3145729
  9156   300001  06                 	db	6
  9157                           
  9158                           ;Config register CONFIG2L @ 0x300002
  9159                           ;	Power-up Timer Enable bit
  9160                           ;	PWRT = OFF, PWRT disabled
  9161                           ;	Brown-out Reset Enable bits
  9162                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  9163                           ;	Brown-out Reset Voltage bits
  9164                           ;	BORV = 0x3, unprogrammed default
  9165   300002                     	org	3145730
  9166   300002  19                 	db	25
  9167                           
  9168                           ;Config register CONFIG2H @ 0x300003
  9169                           ;	Watchdog Timer Enable bit
  9170                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  9171                           ;	Watchdog Timer Postscale Select bits
  9172                           ;	WDTPS = 0xF, unprogrammed default
  9173   300003                     	org	3145731
  9174   300003  1E                 	db	30
  9175                           
  9176                           ; Padding undefined space
  9177   300004                     	org	3145732
  9178   300004  FF                 	db	255
  9179                           
  9180                           ;Config register CONFIG3H @ 0x300005
  9181                           ;	CCP2 MUX bit
  9182                           ;	CCP2MX = 0x1, unprogrammed default
  9183                           ;	PORTB A/D Enable bit
  9184                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  9185                           ;	Low-Power Timer1 Oscillator Enable bit
  9186                           ;	LPT1OSC = 0x0, unprogrammed default
  9187                           ;	MCLR Pin Enable bit
  9188                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  9189   300005                     	org	3145733
  9190   300005  01                 	db	1
  9191                           
  9192                           ;Config register CONFIG4L @ 0x300006
  9193                           ;	Stack Full/Underflow Reset Enable bit
  9194                           ;	STVREN = 0x1, unprogrammed default
  9195                           ;	Single-Supply ICSP Enable bit
  9196                           ;	LVP = OFF, Single-Supply ICSP disabled
  9197                           ;	Boot Block Size Select bits
  9198                           ;	BBSIZ = 0x0, unprogrammed default
  9199                           ;	Extended Instruction Set Enable bit
  9200                           ;	XINST = 0x0, unprogrammed default
  9201                           ;	Background Debugger Enable bit
  9202                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  9203   300006                     	org	3145734
  9204   300006  81                 	db	129
  9205                           
  9206                           ; Padding undefined space
  9207   300007                     	org	3145735
  9208   300007  FF                 	db	255
  9209                           
  9210                           ;Config register CONFIG5L @ 0x300008
  9211                           ;	unspecified, using default values
  9212                           ;	Code Protection bit
  9213                           ;	CP0 = 0x1, unprogrammed default
  9214                           ;	Code Protection bit
  9215                           ;	CP1 = 0x1, unprogrammed default
  9216   300008                     	org	3145736
  9217   300008  03                 	db	3
  9218                           
  9219                           ;Config register CONFIG5H @ 0x300009
  9220                           ;	unspecified, using default values
  9221                           ;	Boot Block Code Protection bitProtect Boot
  9222                           ;	CPB = 0x1, unprogrammed default
  9223                           ;	Data EEPROM Code Protection bit
  9224                           ;	CPD = 0x1, unprogrammed default
  9225   300009                     	org	3145737
  9226   300009  C0                 	db	192
  9227                           
  9228                           ;Config register CONFIG6L @ 0x30000A
  9229                           ;	unspecified, using default values
  9230                           ;	Write Protection bit
  9231                           ;	WRT0 = 0x1, unprogrammed default
  9232                           ;	Write Protection bit
  9233                           ;	WRT1 = 0x1, unprogrammed default
  9234   30000A                     	org	3145738
  9235   30000A  03                 	db	3
  9236                           
  9237                           ;Config register CONFIG6H @ 0x30000B
  9238                           ;	unspecified, using default values
  9239                           ;	Configuration Register Write Protection bit
  9240                           ;	WRTC = 0x1, unprogrammed default
  9241                           ;	Boot Block Write Protection bit
  9242                           ;	WRTB = 0x1, unprogrammed default
  9243                           ;	Data EEPROM Write Protection bit
  9244                           ;	WRTD = 0x1, unprogrammed default
  9245   30000B                     	org	3145739
  9246   30000B  E0                 	db	224
  9247                           
  9248                           ;Config register CONFIG7L @ 0x30000C
  9249                           ;	unspecified, using default values
  9250                           ;	Table Read Protection bit
  9251                           ;	EBTR0 = 0x1, unprogrammed default
  9252                           ;	Table Read Protection bit
  9253                           ;	EBTR1 = 0x1, unprogrammed default
  9254   30000C                     	org	3145740
  9255   30000C  03                 	db	3
  9256                           
  9257                           ;Config register CONFIG7H @ 0x30000D
  9258                           ;	unspecified, using default values
  9259                           ;	Boot Block Table Read Protection bit
  9260                           ;	EBTRB = 0x1, unprogrammed default
  9261   30000D                     	org	3145741
  9262   30000D  40                 	db	64
  9263                           tosu	equ	0xFFF
  9264                           tosh	equ	0xFFE
  9265                           tosl	equ	0xFFD
  9266                           stkptr	equ	0xFFC
  9267                           pclatu	equ	0xFFB
  9268                           pclath	equ	0xFFA
  9269                           pcl	equ	0xFF9
  9270                           tblptru	equ	0xFF8
  9271                           tblptrh	equ	0xFF7
  9272                           tblptrl	equ	0xFF6
  9273                           tablat	equ	0xFF5
  9274                           prodh	equ	0xFF4
  9275                           prodl	equ	0xFF3
  9276                           indf0	equ	0xFEF
  9277                           postinc0	equ	0xFEE
  9278                           postdec0	equ	0xFED
  9279                           preinc0	equ	0xFEC
  9280                           plusw0	equ	0xFEB
  9281                           fsr0h	equ	0xFEA
  9282                           fsr0l	equ	0xFE9
  9283                           wreg	equ	0xFE8
  9284                           indf1	equ	0xFE7
  9285                           postinc1	equ	0xFE6
  9286                           postdec1	equ	0xFE5
  9287                           preinc1	equ	0xFE4
  9288                           plusw1	equ	0xFE3
  9289                           fsr1h	equ	0xFE2
  9290                           fsr1l	equ	0xFE1
  9291                           bsr	equ	0xFE0
  9292                           indf2	equ	0xFDF
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           preinc2	equ	0xFDC
  9296                           plusw2	equ	0xFDB
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8

Data Sizes:
    Strings     242
    Constant    60
    Data        24
    BSS         243
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     27     118
    BANK0           128      0      96
    BANK1           256      0      80

Pointer List with Targets:

    SAVE_PutRecording@timestamp	PTR unsigned char  size(1) Largest target is 4
		 -> time(COMRAM[4]), 

    SAVE_PutRecording@id	PTR unsigned char  size(1) Largest target is 2
		 -> newID(COMRAM[2]), 

    sp__CNT_GetTimeArr	PTR unsigned char  size(1) Largest target is 4
		 -> time(COMRAM[4]), 

    strlen@s	PTR unsigned char  size(2) Largest target is 23
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), 

    MQ_PutString@s	PTR unsigned char  size(2) Largest target is 23
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), 

    strL2	PTR unsigned char  size(2) Largest target is 23
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), NULL(NULL[0]), 

    strL1	PTR unsigned char  size(2) Largest target is 23
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), NULL(NULL[0]), 

    sp__PORT_GetName	PTR unsigned char  size(1) Largest target is 4
		 -> portName(COMRAM[4]), 

    LCD_PutString@s	PTR unsigned char  size(2) Largest target is 23
		 -> strAux(BANK0[12]), STR_25(CODE[11]), STR_24(CODE[17]), STR_23(CODE[13]), 
		 -> strAux@TAD_COUNTER$F1352(COMRAM[6]), STR_22(CODE[14]), STR_21(CODE[13]), STR_20(CODE[9]), 
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), NULL(NULL[0]), STR_13(CODE[11]), 
		 -> portName(COMRAM[4]), 

    str	PTR unsigned char  size(2) Largest target is 23
		 -> strAux(BANK0[12]), STR_25(CODE[11]), STR_24(CODE[17]), STR_23(CODE[13]), 
		 -> strAux@TAD_COUNTER$F1352(COMRAM[6]), STR_22(CODE[14]), STR_21(CODE[13]), STR_20(CODE[9]), 
		 -> STR_19(CODE[2]), STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[23]), 
		 -> STR_15(CODE[19]), STR_14(CODE[19]), NULL(NULL[0]), STR_13(CODE[11]), 
		 -> portName(COMRAM[4]), 

    KPAD_VALUES	PTR const unsigned char [12] size(2) Largest target is 6
		 -> STR_12(CODE[2]), STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[6]), 
		 -> STR_8(CODE[5]), STR_7(CODE[6]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[2]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> txTimer(COMRAM[1]), timerHora(COMRAM[1]), timerByeBye(COMRAM[1]), timer(COMRAM[1]), 
		 -> timerMelody(COMRAM[1]), timerNote(COMRAM[1]), timerPWM(COMRAM[1]), Timer(COMRAM[1]), 
		 -> timerRebots(COMRAM[1]), timerSms(COMRAM[1]), TI_Wait40ms@Timer(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_MENU_Motor
    _main->_MRCD_Motor
    _TI_Wait40ms->_TI_GetTics
    _PORT_Motor->_LCD_PutChar
    _MRCD_Motor->_LCD_GotoXY
    _MQ_Motor->_LCD_GotoXY
    _MQ_Init->_TI_NewTimer
    _MICRO_Motor->_TI_GetTics
    _SAVE_PutRecording->_CNT_GetTimeArr
    _BUZZ_PlayMelody->_BUZZ_Play
    _MICRO_Init->_TI_NewTimer
    _MENU_Motor->_MQ_PutString
    _MICRO_ListenAndSend->_LCD_GotoXY
    _CNT_ModifyTime->_LCD_GotoXY
    _LCD_CursorOn->_WaitForBusy
    _MENU_Init->_TI_NewTimer
    _LCD_Motor->_LCD_PutChar
    _LCD_Init->_Espera
    _KPAD_Motor->_LCD_PreviewChar
    _LCD_PreviewChar->_LCD_GotoXY
    _KPAD_Init->_TI_NewTimer
    _CNT_Motor->_LCD_PutChar
    _LCD_PutString->_PORT_GetName
    _LCD_PutChar->_LCD_GotoXY
    _LCD_GotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LCD_CursorOff->_WaitForBusy
    _LCD_Clear->_Espera
    _WaitForBusy->_TI_GetTics
    _Espera->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _CNT_Init->_TI_NewTimer
    _BUZZ_Motor->_TI_GetTics
    _BUZZ_Play->_TI_ResetTics
    _BUZZ_Init->_TI_NewTimer

Critical Paths under _HighRSI in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighRSI in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighRSI in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   53400
                          _BUZZ_Init
                         _BUZZ_Motor
                           _CNT_Init
                          _CNT_Motor
                           _JOY_Init
                          _JOY_Motor
                          _KPAD_Init
                         _KPAD_Motor
                           _LCD_Init
                          _LCD_Motor
                          _MENU_Init
                         _MENU_Motor
                         _MICRO_Init
                        _MICRO_Motor
                            _MQ_Init
                           _MQ_Motor
                          _MRCD_Init
                         _MRCD_Motor
                          _PORT_Init
                       _PORT_Mostrar
                         _PORT_Motor
                          _SAVE_Init
                         _SAVE_Motor
                           _SIO_Init
                            _TI_Init
                        _TI_Wait40ms
                          _configADC
                   _configInterrupts
 ---------------------------------------------------------------------------------
 (1) _configInterrupts                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TI_Wait40ms                                          1     1      0    1126
                                             13 COMRAM     1     1      0
                      _TI_CloseTimer
                         _TI_GetTics
                        _TI_NewTimer
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_CloseTimer                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SIO_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SAVE_Motor                                           2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SAVE_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PORT_Motor                                           3     3      0    6603
                                             22 COMRAM     3     3      0
                      _CNT_ResetTime
                       _KPAD_GetChar
                        _KPAD_SetSMS
                    _KPAD_StartInput
                     _KPAD_StopInput
                      _KPAD_UnsetSMS
                          _LCD_Clear
                      _LCD_CursorOff
                       _LCD_CursorOn
                         _LCD_GotoXY
                    _LCD_IsAvailable
                        _LCD_PutChar
                      _LCD_PutString
                       _MENU_Mostrar
                        _SIO_GetChar
                        _SIO_PutChar
                    _SIO_RXAvailable
                    _SIO_TXAvailable
 ---------------------------------------------------------------------------------
 (2) _KPAD_SetSMS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CNT_ResetTime                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PORT_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MRCD_Motor                                           6     6      0    4174
                                             21 COMRAM     6     6      0
                    _BUZZ_PlayMelody
                        _JOY_Disable
                         _JOY_Enable
                        _JOY_GetMove
                       _KPAD_GetChar
                          _LCD_Clear
                         _LCD_GotoXY
                    _LCD_IsAvailable
                      _LCD_PutString
                       _MENU_Mostrar
                    _MRCD_OptionDown
                      _MRCD_OptionUp
                        _SIO_GetChar
                        _SIO_PutChar
                    _SIO_RXAvailable
                    _SIO_TXAvailable
                         _fillStrAux
 ---------------------------------------------------------------------------------
 (2) _fillStrAux                                           1     1      0     132
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MRCD_OptionUp                                        4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _MRCD_OptionDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MRCD_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MQ_Motor                                             2     2      0    3904
                                             21 COMRAM     2     2      0
                          _LCD_Clear
                         _LCD_GotoXY
                    _LCD_IsAvailable
                      _LCD_PutString
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _MQ_Init                                              0     0      0     947
                           _MQ_Clear
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _MICRO_Motor                                          2     2      0     454
                                             13 COMRAM     2     2      0
                    _BUZZ_PlayMelody
                        _CNT_GetTime
                     _CNT_GetTimeArr
                       _MENU_Mostrar
                  _SAVE_PutRecording
                        _SIO_GetChar
                        _SIO_PutChar
                    _SIO_RXAvailable
                    _SIO_TXAvailable
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _SIO_TXAvailable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SIO_RXAvailable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SIO_GetChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SAVE_PutRecording                                    2     0      2     284
                                              2 COMRAM     2     0      2
                     _CNT_GetTimeArr (ARG)
 ---------------------------------------------------------------------------------
 (2) _CNT_GetTimeArr                                       2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _CNT_GetTime                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _BUZZ_PlayMelody                                      0     0      0      66
                          _BUZZ_Play
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _MICRO_Init                                           0     0      0     947
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _MENU_Motor                                           3     3      0   18435
                                             24 COMRAM     3     3      0
                     _CNT_ModifyTime
                       _CNT_ShowTime
                        _JOY_GetMove
                       _KPAD_GetChar
                          _LCD_Clear
                         _LCD_GotoXY
                    _LCD_IsAvailable
                        _LCD_PutChar
                      _LCD_PutString
                    _MENU_OptionDown
                      _MENU_OptionUp
                _MICRO_ListenAndSend
                       _MQ_PutString
                       _MRCD_Mostrar
                       _PORT_GetName
                       _PORT_Mostrar
                         _TI_GetTics
                       _TI_ResetTics
                           _exitMenu
 ---------------------------------------------------------------------------------
 (2) _exitMenu                                             0     0      0       0
                        _JOY_Disable
                           _MQ_Clear
 ---------------------------------------------------------------------------------
 (2) _MQ_Clear                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_Disable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PORT_Mostrar                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PORT_GetName                                         2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _MRCD_Mostrar                                         0     0      0    2137
                         _JOY_Enable
                    _KPAD_StartInput
                      _KPAD_UnsetSMS
                          _LCD_Clear
                      _LCD_PutString
 ---------------------------------------------------------------------------------
 (2) _MQ_PutString                                         5     2      3    2263
                                             19 COMRAM     5     2      3
                          _LCD_Clear
                       _TI_ResetTics
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _MICRO_ListenAndSend                                  0     0      0    3859
                          _LCD_Clear
                         _LCD_GotoXY
                      _LCD_PutString
                        _SIO_PutChar
 ---------------------------------------------------------------------------------
 (2) _SIO_PutChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MENU_OptionUp                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MENU_OptionDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _JOY_GetMove                                          1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CNT_ShowTime                                         0     0      0       0
                    _KPAD_StartInput
                      _KPAD_UnsetSMS
 ---------------------------------------------------------------------------------
 (2) _CNT_ModifyTime                                       0     0      0    4147
                    _KPAD_StartInput
                      _KPAD_UnsetSMS
                          _LCD_Clear
                       _LCD_CursorOn
                         _LCD_GotoXY
                      _LCD_PutString
 ---------------------------------------------------------------------------------
 (2) _LCD_CursorOn                                         0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _MENU_Init                                            0     0      0     947
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _LCD_Motor                                            2     2      0    2032
                                             22 COMRAM     2     2      0
                        _LCD_PutChar
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     3      1    2148
                                             19 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KPAD_Motor                                           4     4      0    2235
                                             22 COMRAM     4     4      0
                          _BUZZ_Play
                    _LCD_PreviewChar
                         _TI_GetTics
                       _TI_ResetTics
                           _escombra
 ---------------------------------------------------------------------------------
 (2) _escombra                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_PreviewChar                                      1     1      0    2032
                                             21 COMRAM     1     1      0
                          _CantaData
                         _LCD_GotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _KPAD_Init                                            0     0      0     947
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _JOY_Motor                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _JOY_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CNT_Motor                                            3     3      0    6406
                                             22 COMRAM     3     3      0
                       _KPAD_GetChar
                     _KPAD_StopInput
                          _LCD_Clear
                      _LCD_CursorOff
                         _LCD_GotoXY
                    _LCD_IsAvailable
                        _LCD_PutChar
                      _LCD_PutString
                       _MENU_Mostrar
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _MENU_Mostrar                                         0     0      0       0
                         _JOY_Enable
                    _KPAD_StartInput
                      _KPAD_UnsetSMS
 ---------------------------------------------------------------------------------
 (3) _KPAD_UnsetSMS                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _KPAD_StartInput                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _JOY_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_PutString                                        2     0      2    1162
                                              2 COMRAM     2     0      2
                       _PORT_GetName (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_PutChar                                          1     1      0    2032
                                             21 COMRAM     1     1      0
                          _CantaData
                         _LCD_GotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _LCD_GotoXY                                           7     6      1    1700
                                             14 COMRAM     7     6      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _CantaData                                            1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LCD_IsAvailable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_CursorOff                                        0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0     975
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _WaitForBusy                                          1     1      0      90
                                             13 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (3) _Espera                                               6     5      1     665
                                             13 COMRAM     6     5      1
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (4) _CantaIR                                              1     1      0     220
                                              2 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (5) _CantaPartBaixa                                       2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _CantaPartAlta                                        2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _KPAD_StopInput                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _KPAD_GetChar                                         5     5      0      47
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _CNT_Init                                             0     0      0     969
                        _TI_NewTimer
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _BUZZ_Motor                                           4     4      0     111
                                             13 COMRAM     4     4      0
                          _BUZZ_Play
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_GetTics                                          13     9      4      45
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (3) _BUZZ_Play                                            1     1      0      44
                                              1 COMRAM     1     1      0
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TI_ResetTics                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _BUZZ_Init                                            0     0      0     947
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     947
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighRSI                                              0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (7) _RSI_Timer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BUZZ_Init
     _TI_NewTimer
   _BUZZ_Motor
     _BUZZ_Play
       _TI_ResetTics
     _TI_GetTics
     _TI_ResetTics
   _CNT_Init
     _TI_NewTimer
     _TI_ResetTics
   _CNT_Motor
     _KPAD_GetChar
     _KPAD_StopInput
     _LCD_Clear
       _CantaIR
         _CantaPartAlta
         _CantaPartBaixa
       _Espera
         _TI_GetTics
         _TI_ResetTics
       _WaitForBusy
         _TI_GetTics
         _TI_ResetTics
     _LCD_CursorOff
       _CantaIR
       _WaitForBusy
     _LCD_GotoXY
       _CantaIR
       _WaitForBusy
     _LCD_IsAvailable
     _LCD_PutChar
       _CantaData
         _CantaPartAlta
         _CantaPartBaixa
       _LCD_GotoXY
       _WaitForBusy
     _LCD_PutString
       _PORT_GetName (ARG)
     _MENU_Mostrar
       _JOY_Enable
       _KPAD_StartInput
       _KPAD_UnsetSMS
     _TI_GetTics
     _TI_ResetTics
   _JOY_Init
   _JOY_Motor
   _KPAD_Init
     _TI_NewTimer
   _KPAD_Motor
     _BUZZ_Play
     _LCD_PreviewChar
       _CantaData
       _LCD_GotoXY
       _WaitForBusy
     _TI_GetTics
     _TI_ResetTics
     _escombra
   _LCD_Init
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TI_NewTimer
     _WaitForBusy
   _LCD_Motor
     _LCD_PutChar
   _MENU_Init
     _TI_NewTimer
   _MENU_Motor
     _CNT_ModifyTime
       _KPAD_StartInput
       _KPAD_UnsetSMS
       _LCD_Clear
       _LCD_CursorOn
         _CantaIR
         _WaitForBusy
       _LCD_GotoXY
       _LCD_PutString
     _CNT_ShowTime
       _KPAD_StartInput
       _KPAD_UnsetSMS
     _JOY_GetMove
     _KPAD_GetChar
     _LCD_Clear
     _LCD_GotoXY
     _LCD_IsAvailable
     _LCD_PutChar
     _LCD_PutString
     _MENU_OptionDown
     _MENU_OptionUp
     _MICRO_ListenAndSend
       _LCD_Clear
       _LCD_GotoXY
       _LCD_PutString
       _SIO_PutChar
     _MQ_PutString
       _LCD_Clear
       _TI_ResetTics
       _strlen
     _MRCD_Mostrar
       _JOY_Enable
       _KPAD_StartInput
       _KPAD_UnsetSMS
       _LCD_Clear
       _LCD_PutString
     _PORT_GetName
     _PORT_Mostrar
     _TI_GetTics
     _TI_ResetTics
     _exitMenu
       _JOY_Disable
       _MQ_Clear
   _MICRO_Init
     _TI_NewTimer
   _MICRO_Motor
     _BUZZ_PlayMelody
       _BUZZ_Play
       _TI_ResetTics
     _CNT_GetTime
     _CNT_GetTimeArr
     _MENU_Mostrar
     _SAVE_PutRecording
       _CNT_GetTimeArr (ARG)
     _SIO_GetChar
     _SIO_PutChar
     _SIO_RXAvailable
     _SIO_TXAvailable
     _TI_GetTics
     _TI_ResetTics
   _MQ_Init
     _MQ_Clear
     _TI_NewTimer
   _MQ_Motor
     _LCD_Clear
     _LCD_GotoXY
     _LCD_IsAvailable
     _LCD_PutString
     _TI_GetTics
     _TI_ResetTics
   _MRCD_Init
   _MRCD_Motor
     _BUZZ_PlayMelody
     _JOY_Disable
     _JOY_Enable
     _JOY_GetMove
     _KPAD_GetChar
     _LCD_Clear
     _LCD_GotoXY
     _LCD_IsAvailable
     _LCD_PutString
     _MENU_Mostrar
     _MRCD_OptionDown
     _MRCD_OptionUp
     _SIO_GetChar
     _SIO_PutChar
     _SIO_RXAvailable
     _SIO_TXAvailable
     _fillStrAux
   _PORT_Init
   _PORT_Mostrar
   _PORT_Motor
     _CNT_ResetTime
     _KPAD_GetChar
     _KPAD_SetSMS
     _KPAD_StartInput
     _KPAD_StopInput
     _KPAD_UnsetSMS
     _LCD_Clear
     _LCD_CursorOff
     _LCD_CursorOn
     _LCD_GotoXY
     _LCD_IsAvailable
     _LCD_PutChar
     _LCD_PutString
     _MENU_Mostrar
     _SIO_GetChar
     _SIO_PutChar
     _SIO_RXAvailable
     _SIO_TXAvailable
   _SAVE_Init
   _SAVE_Motor
   _SIO_Init
   _TI_Init
   _TI_Wait40ms
     _TI_CloseTimer
     _TI_GetTics
     _TI_NewTimer
     _TI_ResetTics
   _configADC
   _configInterrupts

 _HighRSI (ROOT)
   _RSI_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      50       7       31.2%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1B      76       1       93.7%
BITBIGSFRlhhh       1A      0       0       9        0.0%
BITBIGSFRh           D      0       0       8        0.0%
BITBIGSFRlhlh        B      0       0      11        0.0%
BITBIGSFRllhlll      8      0       0      17        0.0%
BITBIGSFRllhllh      7      0       0      16        0.0%
BITBIGSFRllhlhh      7      0       0      14        0.0%
BITBIGSFRllhh        7      0       0      13        0.0%
BITBIGSFRlllhll      6      0       0      20        0.0%
BITBIGSFRlllhh       5      0       0      18        0.0%
BITBIGSFRlhhl        4      0       0      10        0.0%
BITBIGSFRllhllh      1      0       0      15        0.0%
BITBIGSFRlllhlh      1      0       0      19        0.0%
BITBIGSFRlhll        1      0       0      12        0.0%
BITBIGSFRllll        1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     126      22        0.0%
DATA                 0      0     126       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun May 21 20:54:09 2023

                  _LCD_CursorOff 1660                      ?_LCD_GotoXY 006A                       _RSI_Timer0 158A  
                 _CNT_GetTimeArr 16C4                               PL2 126C                               PL4 0AE4  
                             PL6 0F4C                               PL8 0CFA                       _TI_GetTics 1108  
               MQ_PutString@line 0071                     ?_CNT_GetTime 005C                ??_SIO_RXAvailable 005C  
                            PL10 0E76                              PL20 093A                              PL12 0394  
                            PL30 0F66                              PL22 129C                              PL14 0AF6  
                            PL40 06CE                              PL32 01E8                              PL24 0D94  
                            PL16 053E                              PL50 1238                              PL42 10FE  
                            PL34 0E80                              PL26 03A6                              PL18 114C  
                            PL60 054A                              PL52 12AA                              PL44 03B4  
                            PL36 0E88                              PL28 0A22                              PL62 151C  
                            PL54 0D16                              PL46 0B08                              PL38 0D0A  
                            PL64 01F0                              PL56 0C92                              PL48 081E  
                            PL58 14D4                      ?_MICRO_Init 005C                              l201 11CC  
                            l220 022E                              l312 0EAC                              l234 02EE  
                            l308 0EA0                              l236 02FC                              l245 034E  
                            l319 0ED0                              l514 105E                              l506 157E  
                            l627 10E4                              l566 0A32                              l860 0636  
                            l845 059C                              l949 0B8A                              l992 0980  
                            l987 0954                              l988 095A                              l997 099C  
                            l989 0966                              u300 0D32                              u320 0D4C  
                            u340 0D68                              u318 0D34                              u360 0D82  
                            u338 0D4E                              u358 0D6A                              u378 0D84  
                    ?_KPAD_Motor 005C                     ?_LCD_PutChar 005C                  LCD_Init@columns 006F  
                   _MQ_PutString 10AE                    fillStrAux@opt 005C                              _str 0011  
               ??_CantaPartBaixa 005C         _ready@TAD_JOYSTICK$F1124 002E                              prod 0FF3  
                            wreg 0FE8            ??_MICRO_ListenAndSend 0071                    ?_LCD_CursorOn 005C  
_option@TAD_MENURECORDINGS$F1580 0014                  _MENU_OptionDown 15D8                      ?_MENU_Motor 005C  
                           l1004 09E6                             l1005 09EC                             l1060 12FE  
                           l1061 130A                             l2111 15DE                             l2103 15A4  
                           l4031 069E                             l4009 0652                             l4105 027E  
                           l4201 087E                             l4019 0674                             l4131 02E4  
                           l4123 02D0                             l4115 02AA                             l4051 0F30  
                           l4037 06AA                             l4117 02B0                             l4045 0F08  
                           l4301 0082                             l4221 08B4                             l4205 088C  
                           l3511 0EA4                             l4151 030A                             l4071 0216  
                           l4063 01FA                             l4055 0F34                             l4311 009E  
                           l4215 08A4                             l3433 131A                             l3521 0EC2  
                           l4161 033A                             l4081 0228                             l4321 00BE  
                           l4305 008C                             l4401 019E                             l4241 08E2  
                           l4233 08CA                             l4217 08A8                             l3603 11B4  
                           l3507 0E94                             l4323 00C4                             l4315 00A8  
                           l3517 0EB8                             l4165 0362                             l3701 10D8  
                           l4309 009A                             l4413 0B14                             l4245 08EC  
                           l4181 0840                             l4173 082A                             l3527 0ED6  
                           l4095 025C                             l4351 0102                             l4335 00E0  
                           l4327 00CE                             l4271 001A                             l4503 0710  
                           l4255 08FE                             l4191 085E                             l4263 090A  
                           l3457 120E                             l3529 0EF0                             l4089 023E  
                           l4329 00DA                             l4441 0B6C                             l4433 0B52  
                           l4417 0B1E                             l4513 0732                             l4193 0862  
                           l4185 084A                             l4177 083A                      _TI_NewTimer 1242  
                           l4603 0AAA                             l4611 0AC2                             l3619 1502  
                           l4099 026E                             l4371 0132                             l4363 011A  
                           l4347 00F8                             l4339 00EA                             l4291 0040  
                           l4531 077C                             l3645 1400                             l2853 1052  
                           l3573 140C                             l4381 0156                             l4429 0B48  
                           l4517 073C                             l4509 072E                             l4197 086C  
                           l3583 1246                             l3479 1232                             l3911 0554  
                           l2871 107A                             l3575 140E                             l4367 0128  
                           l4359 0110                             l4295 0046                             l4279 0030  
                           l4463 0B9E                             l4447 0B76                             l4551 07B6  
                           l4543 07A8                             l4527 0772                             l3815 142E  
                           l2881 1094                             l2849 104C                             l4393 0180  
                           l4385 0168                             l4377 014C                             l4297 0078  
                           l4537 078A                             l4641 0976                             l3587 1250  
                           l4571 0A36                             l2867 106E                             l3763 0CA2  
                           l4475 0BBC                             l4547 07AC                             l4491 06F4  
                           l4563 07F2                             l4811 04C6                             l4731 03EA  
                           l4723 03D4                             l4627 0950                             l4619 0946  
                           l2885 1098                             l4389 0172                             l4493 06F8  
                           l3781 15C2                             l3773 13B0                             l4741 040E  
                           l4717 03C0                             l4653 0986                             l4637 096C  
                           l4709 09F6                             l3829 1376                             l4583 0A66  
                           l3951 05B8                             l3695 10C4                             l4479 0BC0  
                           l4559 07EC                             l4487 06D6                             l4807 04BC  
                           l4823 0504                             l4671 09A8                             l4593 0A8C  
                           l4497 0702                             l4761 043C                             l4753 042A  
                           l4665 099A                             l4595 0A92                             l4579 0A5A  
                           l3963 05E4                             l3947 05A8                             l3955 05C0  
                           l4819 04FE                             l4739 040A                             l4667 09A0  
                           l4597 0A96                             l3965 05E8                             l3877 0C08  
                           l4781 0470                             l4765 0446                             l4757 0432  
                           l4749 0420                             l4677 09C2                             l3991 062E  
                           l3959 05CC                             l4791 048E                             l4775 0462  
                           l4687 09D2                             l3969 05F2                             l4785 047C  
                           l4769 0450                             l4857 0DEC                             l3987 0624  
                           l4795 0494                             l3999 0644                             l4799 049E  
                   ?_MICRO_Motor 005C                             STR_1 1FFD                             STR_2 1FD8  
                           STR_3 1FDD                             STR_4 1FE2                             STR_5 1FE7  
                           STR_6 1FEC                             STR_7 1FCC                             STR_8 1FF1  
                           STR_9 1FD2                             u2010 1020                             u2030 103A  
                           u2110 0FCE                             u2008 1006                             u1400 1090  
                           u2050 0F7E                             u2028 1022                             u2108 0FB6  
                           u2070 0F98                             u2048 103C                             u2128 0FD0  
                           u2400 138A                             u2090 0FB4                             u2410 0C90  
                           u2068 0F80                             u2420 056A                             u3220 0B68  
                           u3070 00B8                     ?_KPAD_SetSMS 005C                      ?_BUZZ_Motor 005C  
                           u2088 0F9A                             u2600 0F16                             u3410 07D2  
                           u2620 0F28                             u3180 0198                             u3340 0758  
                           u3500 0972                             u2710 0254                             u3270 06EA  
                           u2607 0F14                             u3440 0A7C                             u2640 020E  
                           u2627 0F26                             u2820 02F8                             u3540 09B8  
                           u2670 0224                             u2760 02A6                             u1970 0FEA  
                           u2850 0306                             u2930 0886                             u2860 0320  
                           u2780 02CC                             u1990 1004                             u3670 045E  
                           u2890 0334                             u1988 0FEC                             _TMR0 0FD6  
                  _LCD_PutString 15AC                      _TI_Wait40ms 1368                             _Tics 0005  
                           _Rows 0038                ??_SIO_TXAvailable 005C                             _main 0DA2  
                    ?_MRCD_Motor 005C                             _time 0048                  __end_of_MQ_Init 160C  
                           fsr1h 0FE2                             fsr2h 0FDA                             indf1 0FE7  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
                           btemp 0077                  __end_of_TI_Init 144E                             prodl 0FF3  
                           start 0014                  __end_of_CantaIR 14C2                    _CNT_ResetTime 1638  
                 _recordingField 0016                  __end_of_HighRSI 0014                   ?_LCD_CursorOff 005C  
                  ?_CNT_ShowTime 005C   _index@TAD_SAVERECORDINGS$F1535 0017           __end_of_CNT_GetTimeArr 16C8  
                   ___param_bank 0000                      ?_SAVE_Motor 005C                    ?_KPAD_GetChar 005C  
               __end_of_LCD_Init 0C92                 __end_of_CNT_Init 1578                      ?_JOY_Enable 005C  
                    Espera@Timer 006E                            ?_main 005C                            _EEADR 0FA9  
                          STR_10 1FFB                            STR_11 1FF6                            STR_20 1FC3  
                          STR_12 1FF9                            STR_13 1FB8                            STR_21 1FA0  
                          STR_22 1F85                            STR_14 1F4E                            STR_23 1F93  
                          STR_15 1F61                            STR_24 1F74                            STR_16 1F0D  
                          STR_25 1FAD                            STR_17 1F24                            STR_18 1F39  
                          STR_19 1FF7                            _T0CON 0FD5                            _RCREG 0FAE  
                 _CNT_ModifyTime 12B4                            _RCSTA 0FAB                            _TMR0L 0FD6  
                          _SPBRG 0FAF                            _PORTB 0F81                            _PORTC 0F82  
                          _TXREG 0FAD                            _TXSTA 0FAC                   ??_LCD_CursorOn 006A  
               __end_of_JOY_Init 1682                            _Timer 0059                 LCD_GotoXY@Fisics 006F  
               LCD_GotoXY@Column 0070                            _newID 0050                 __end_of_SIO_Init 153A  
                          _index 0034                 __end_of_MQ_Clear 1624                            _ready 003B  
                   _TI_ResetTics 144E                            _strL1 000D                            _strL2 000B  
                          _timer 0055                            _state 0040                   ?_LCD_PutString 005E  
               __end_of_MQ_Motor 081E                            tablat 0FF5                      ?_PORT_Motor 005C  
                  _TI_CloseTimer 15F4                            ttemp5 0078                            ttemp6 007B  
                          ttemp7 007F                            status 0FD8                            wtemp8 0078  
                 ?_CNT_ResetTime 005C                   ??_CNT_ShowTime 005C                     LCD_Init@rows 0070  
        EscriuPrimeraOrdre@ordre 005D                  __initialization 115C                  ?_CNT_GetTimeArr 005C  
               ?_LCD_IsAvailable 005C                     __end_of_main 0E1A                    _KPAD_UnsetSMS 16AA  
                    ?_RSI_Timer0 005C                   TI_Init@counter 005C                   ??_KPAD_GetChar 005C  
                    ?_TI_GetTics 005C           __end_of_CNT_ModifyTime 12E4                  _LCD_PreviewChar 14C2  
                         ??_main 0077          __end_of_MENU_OptionDown 15E6                __end_of_LCD_Clear 151C  
                  __activetblptr 0002                  _BUZZ_PlayMelody 148A                    ?_MENU_Mostrar 005C  
              __end_of_LCD_Motor 0F4C                __end_of_CNT_Motor 06CE                     ?_JOY_GetMove 005C  
                   ?_JOY_Disable 005C                __end_of_KPAD_Init 13E0                     LCD_PutChar@c 0071  
                         _ADCON1 0FC1                           _ADCON2 0FC0                __end_of_MENU_Init 1660  
                         _ADRESH 0FC4                           _EEDATA 0FA8                        ??_MQ_Init 005F  
                         _EECON2 0FA7                __end_of_BUZZ_Init 148A                __end_of_BUZZ_Play 1550  
                      ??_TI_Init 005C                        ??_CantaIR 005E                   ?_TI_CloseTimer 005C  
              __end_of_MRCD_Init 16C0                           _MELODY 1F01                    ??_WaitForBusy 0069  
                         _TMR0IF 7F92                        ??_HighRSI 005C                           _SPBRGH 0FB0  
              __end_of_SAVE_Init 1672                  ??_LCD_CursorOff 006A              SAVE_PutRecording@id 005E  
                         _Espera 1312                     CNT_Motor@aux 0074                __end_of_JOY_Motor 10AE  
                         _RowAct 0036                           _Timers 0100                   ?_KPAD_UnsetSMS 005C  
               __end_of_escombra 150C                __end_of_PORT_Init 169E                 __end_of_exitMenu 164C  
                         clear_0 1182                           clear_1 118E                           clear_2 119A  
                  ?_MRCD_Mostrar 005C                           _period 002B                           _sizeL1 0024  
                         _sizeL2 0023                           isa$std 0001                  ?_CNT_ModifyTime 005C  
                         _option 0020                           _strAux 00BC                           _strlen 1408  
                   ?_SIO_GetChar 005C                 TI_Wait40ms@Timer 0069                   ??_MENU_Mostrar 005C  
               CNT_GetTime@index 005C                  _KPAD_INT_VALUES 1EF5                     __mediumconst 1ED0  
              ??_MRCD_OptionDown 005C                           tblptrh 0FF7                           tblptrl 0FF6  
                         tblptru 0FF8                  ??_LCD_PutString 0060                __end_of_CantaData 129C  
                   ?_SIO_PutChar 005C                  ??_CNT_ResetTime 005C                       __accesstop 0080  
        __end_of__initialization 11A0                        ?_LCD_Init 006F                        ?_CNT_Init 005C  
                  ___rparam_used 0001                    _MENU_OptionUp 159C                  _SIO_RXAvailable 16A4  
                  LCD_GotoXY@Row 006A                        LCD_Init@i 0071             __end_of_LCD_CursorOn 1656  
               _configInterrupts 1692                   __pcstackCOMRAM 005C              __end_of_WaitForBusy 1238  
        __end_of_LCD_PreviewChar 14D4                        ?_JOY_Init 005C                     __pidataBANK0 14DC  
                   ??_LCD_GotoXY 006B          __end_of_BUZZ_PlayMelody 14A6          _state@TAD_COUNTER$F1357 001B  
                 ??_MRCD_Mostrar 006F                        ?_SIO_Init 005C                        ?_MQ_Clear 005C  
                 _KPAD_StopInput 16B6                       __end_ofPL2 127C                       __end_ofPL4 0AF6  
                     __end_ofPL6 0F66                       __end_ofPL8 0D0A             TI_NewTimer@Comptador 005E  
                      ?_MQ_Motor 005C                     ??_MICRO_Init 005F                 ?_MENU_OptionDown 005C  
                   ??_KPAD_Motor 0072                  _SIO_TXAvailable 169E             __end_of_KPAD_PRESSES 1EF5  
           __end_of_CNT_ShowTime 15F4                ??_KPAD_StartInput 005C                  ??_TI_CloseTimer 005C  
                   ??_MENU_Motor 0074                     ?_TI_NewTimer 005C       SAVE_PutRecording@timestamp 005F  
                   ??_BUZZ_Motor 0069             __end_of_KPAD_GetChar 11FC                       __pbssBANK0 0080  
                     __pbssBANK1 0100                     ?_TI_Wait40ms 005C               __end_of_LCD_GotoXY 0F06  
                     _biggerSize 0022                       ??_LCD_Init 0070                     ??_MRCD_Motor 0071  
                     ??_CNT_Init 005F                   ?_MENU_OptionUp 005C               __end_of_KPAD_NOTES 1EDD  
                  _CantaPartAlta 0FDE           TI_NewTimer@TimerHandle 005C                  ??_KPAD_UnsetSMS 005C  
                        ?_Espera 0069               __end_of_MICRO_Init 1618               __end_of_KPAD_Motor 0394  
                     ??_JOY_Init 005C                     ??_SAVE_Motor 005C           __end_of_KPAD_StopInput 16BC  
        TI_ResetTics@TimerHandle 005C          __end_of_KPAD_INT_VALUES 1F01                       ??_SIO_Init 005C  
                     ??_MQ_Clear 005C                     ??_JOY_Enable 005C               __end_of_MENU_Motor 01E8  
                     ??_MQ_Motor 0071      __end_of_MICRO_ListenAndSend 1368               __end_of_BUZZ_Motor 0AE4  
                        ?_strlen 005C                       _fillStrAux 0E1A               __end_of_MRCD_Motor 053E  
                  _MRCD_OptionUp 1390                          _MQ_Init 1600                    MQ_PutString@s 006F  
                        _TI_Init 142C          __end_of_SIO_RXAvailable 16AA                          _CantaIR 14A6  
                      ?_escombra 005C                     ??_PORT_Motor 0072                KPAD_Motor@currCol 0075  
             __end_of_SAVE_Motor 0A22                KPAD_Motor@currRow 0074                          _HighRSI 0008  
                      ?_exitMenu 005C                 ??_CNT_GetTimeArr 005E                      _WaitForBusy 11FC  
                 ?_CantaPartAlta 005C                          _Columns 0037               __end_of_JOY_Enable 16B6  
           __end_of_MENU_Mostrar 1564                          __Hparam 0000                          __Lparam 0000  
              __end_of_configADC 162E                 ?_LCD_PreviewChar 005C                     ??_RSI_Timer0 005C  
                ?_KPAD_StopInput 005C                 ?_BUZZ_PlayMelody 005C                     ??_TI_GetTics 0060  
        __end_of_SIO_TXAvailable 16A4                          __pcinit 115C                          __ramtop 0200  
                        _enabled 0030                          __ptext0 0DA2                          __ptext1 1692  
                        __ptext2 1624                          __ptext3 1368                          __ptext4 15F4  
                        __ptext5 142C                          __ptext6 1524                          __ptext7 0944  
                        __ptext8 166A                          __ptext9 0828                          _indexL1 0026  
                        _indexL2 0025               __end_of_PORT_Motor 093A                        CantaIR@IR 005E  
                 ?_MRCD_OptionUp 005C                          _timeAux 0001                       _modifyTime 001D  
                        _smsMode 003F                        _LCD_Clear 150C                          _txTimer 0052  
                WaitForBusy@Busy 0069                        _LCD_Motor 0F06                        _CNT_Motor 0552  
                     _recordings 0080                    ?_PORT_GetName 005C             end_of_initialization 11A0  
                      _KPAD_Init 13B8                       ??_escombra 005C         _strAux@TAD_COUNTER$F1352 0042  
           __end_of_MRCD_Mostrar 1312                  ??_MENU_OptionUp 005C               __end_of_RSI_Timer0 159C  
                      _MENU_Init 1656                       ??_exitMenu 005C                    __Lmediumconst 1ED0  
             __end_of_TI_GetTics 114C                        _BUZZ_Init 146C                        _BUZZ_Play 153A  
                      _MRCD_Init 16BC                    ?_PORT_Mostrar 005C                        _SAVE_Init 166A  
               ??_CNT_ModifyTime 0071                          postdec1 0FE5                          postdec2 0FDD  
                        postinc0 0FEE                          postinc2 0FDE                  _MRCD_OptionDown 15BC  
                      _JOY_Motor 104A                          strlen@i 0060                          strlen@s 005C  
               SIO_PutChar@Valor 005C                       _pressCount 0039                        _PORTCbits 0F82  
                      _PORTDbits 0F83                       _smsPressed 003A                _SAVE_PutRecording 0C9A  
                      _PORT_Init 1698                      ?_fillStrAux 005C            TI_GetTics@TimerHandle 0068  
            _state@TAD_PORT$F865 0032               ?_SAVE_PutRecording 005E                        _TRISAbits 0F92  
                      _TRISBbits 0F93                        _TRISCbits 0F94                        _TRISDbits 0F95  
       __end_of_configInterrupts 1698                       ?_LCD_Clear 005C                     _LCD_CursorOn 164C  
                     ?_LCD_Motor 005C                   ??_PORT_GetName 005E                       ?_CNT_Motor 005C  
                     ?_KPAD_Init 005C              ??_SAVE_PutRecording 0060                 ?_SIO_RXAvailable 005C  
                ??_CantaPartAlta 005C                        _CantaData 127C                       ?_MENU_Init 005C  
                 __end_of_MELODY 1F0D                       ?_BUZZ_Init 005C                       ?_BUZZ_Play 005C  
                 ??_PORT_Mostrar 005C                       ?_MRCD_Init 005C            __end_of_LCD_CursorOff 166A  
                   _KPAD_PRESSES 1EE9                     _CNT_ShowTime 15E6                       ?_SAVE_Init 005C  
                 __end_of_Espera 133E       __end_of_EscriuPrimeraOrdre 0D94                       ?_JOY_Motor 005C  
                   _KPAD_GetChar 11AE                 ?_SIO_TXAvailable 005C                  _KPAD_StartInput 1682  
      __end_of_SAVE_PutRecording 0CFA                      _BAUDCONbits 0FB8                    ??_CNT_GetTime 005C  
                      _ColumnAct 0035                    ??_LCD_PutChar 0071                       ?_PORT_Init 005C  
                  ?_MQ_PutString 006F                  ??_MRCD_OptionUp 005C                   __end_of_strlen 142C  
                    __end_ofPL10 0E80                      __end_ofPL20 0944                      __end_ofPL12 03A6  
                    __end_ofPL30 0F72                      __end_ofPL22 12AA                      __end_ofPL14 0B08  
                    __end_ofPL40 06D4                      __end_ofPL32 01F0                      __end_ofPL24 0DA2  
                    __end_ofPL16 054A                      __end_ofPL50 1242                      __end_ofPL42 1108  
                    __end_ofPL34 0E88                      __end_ofPL26 03B4                      __end_ofPL18 115C  
                    __end_ofPL60 0552                      __end_ofPL52 12B4                      __end_ofPL44 03BE  
                    __end_ofPL36 0E90                      __end_ofPL28 0A30                      __end_ofPL62 1524  
                    __end_ofPL54 0D20                      __end_ofPL46 0B12                      __end_ofPL38 0D16  
                    __end_ofPL64 01F8                      __end_ofPL56 0C9A                      __end_ofPL48 0828  
                    __end_ofPL58 14DC              start_initialization 115C                    ??_MICRO_Motor 0069  
          __end_of_LCD_PutString 15BC                    ??_KPAD_SetSMS 005C                       ?_CantaData 005C  
          __end_of_CNT_ResetTime 1642          __end_of_MRCD_OptionDown 15CA                         ??_Espera 006A  
 _state@TAD_SAVERECORDINGS$F1534 0018                      __pdataBANK0 00C8                         ??_strlen 005E  
                 ??_MQ_PutString 0072       _state@TAD_MARQUESINA$F1253 0027                     _MENU_Mostrar 1550  
                    __pbssCOMRAM 0001              __end_of_CNT_GetTime 15D8                      ??_LCD_Clear 006F  
                    ??_LCD_Motor 0072                    ?_TI_ResetTics 005C                ??_LCD_IsAvailable 005C  
            __end_of_LCD_PutChar 1408                      ??_CNT_Motor 0072                         ?_MQ_Init 005C  
                    ??_KPAD_Init 005F                         ?_TI_Init 005C            __end_of_TI_CloseTimer 1600  
                       ?_CantaIR 005C                   _CantaPartBaixa 0F72              __end_of_KPAD_NO_SMS 1EE9  
                       ?_HighRSI 005C                      ??_MENU_Init 005F                     ?_WaitForBusy 005C  
                  _playingMelody 0029                     _currentValue 003D                      ??_BUZZ_Init 005F  
                    ??_BUZZ_Play 005D                      ??_MRCD_Init 005C                 ??_KPAD_StopInput 005C  
            __end_of_MICRO_Motor 0BE8              __end_of_KPAD_SetSMS 1638          __end_of_KPAD_StartInput 168A  
                    ??_SAVE_Init 005C            __end_of_KPAD_UnsetSMS 16B0                        __pintcode 0008  
       TI_CloseTimer@TimerHandle 005C                    __pmediumconst 1ED0             __end_of_PORT_GetName 16D4  
                    ??_JOY_Motor 005C                  CantaPartBaixa@c 005D                        _configADC 1624  
                  _numRecordings 0041                     _MRCD_Mostrar 12E4                      ??_PORT_Init 005C  
           __end_of_PORT_Mostrar 16D0                    ??_JOY_GetMove 005C                    ??_JOY_Disable 005C  
                      _indexSent 0013                   ??_TI_ResetTics 005C           __end_of_CantaPartBaixa 0FDE  
                      _dutyCycle 002A               _state@TAD_LCD$F764 0033                      ??_CantaData 005E  
                       _LCD_Init 0BE8                         _CNT_Init 1564                         _LATBbits 0F8A  
                       _LATDbits 0F8C                   LCD_PutString@s 005E                 ?_MRCD_OptionDown 005C  
               _KPAD_GetChar$576 005E                         _PIR1bits 0F9E         _state@TAD_JOYSTICK$F1125 002D  
                       _RCONbits 0FD0                         _JOY_Init 167A                        _timerHora 0053  
                      _timerNote 0057                        _printNext 001F                       ?_configADC 005C  
                       _SIO_Init 1524                         _MQ_Clear 1618                        _rowValues 003E  
                       _MQ_Motor 06D4                      _CNT_GetTime 15CA                       _ADCON0bits 0FC2  
                  ??_SIO_GetChar 005C                      _LCD_PutChar 13E0                     ??_fillStrAux 005C  
                       Espera@ms 0069           _state@TAD_BUZZER$F1215 002C                      _KPAD_VALUES 00C8  
               LCD_PreviewChar@c 0071                      _KPAD_NO_SMS 1EDD                ?_configInterrupts 005C  
                  ??_SIO_PutChar 005C                        copy_data0 1170                  ?_CantaPartBaixa 005C  
                  MENU_Motor@aux 0076                      _MICRO_Motor 0B12               ??_configInterrupts 005C  
                    _KPAD_SetSMS 162E              __end_of_JOY_GetMove 158A              __end_of_JOY_Disable 16CC  
          __end_of_MENU_OptionUp 15AC                       _EECON1bits 0FA6             __end_of_MQ_PutString 10FE  
              ??_MENU_OptionDown 005C                         __Hrparam 0000                 ?_KPAD_StartInput 005C  
                       __Lrparam 0000               __end_of_fillStrAux 0E76                  KPAD_GetChar@aux 0060  
                    _melodyIndex 0028                      _melodyPause 000F                _MQ_PutString$1268 0072  
                       __ptext10 162E                         __ptext11 1638               _EscriuPrimeraOrdre 0D20  
                       __ptext20 0B12                         __ptext12 1698                         __ptext21 169E  
                       __ptext13 03BE                         __ptext30 1642                         __ptext22 16A4  
                       __ptext14 0E1A                         __ptext31 1618                         __ptext23 16C0  
                       __ptext15 1390                         __ptext40 159C                         __ptext32 16C8  
                       __ptext24 0C9A                         __ptext16 15BC                         __ptext41 15D8  
                       __ptext33 16CC                         __ptext25 16C4                         __ptext17 16BC  
                       __ptext50 01F8                         __ptext42 1578                         __ptext34 16D0  
                       __ptext26 15CA                         __ptext18 06D4                         __ptext51 14F4  
                       __ptext43 15E6                         __ptext35 12E4                         __ptext27 148A  
                       __ptext19 1600                         __ptext60 16B0                         __ptext52 14C2  
                       __ptext44 12B4                         __ptext36 10AE                         __ptext28 160C  
                       __ptext61 15AC                         __ptext53 13B8                         __ptext45 164C  
                       __ptext37 1408                         __ptext29 0018                         __ptext70 14A6  
                       __ptext62 13E0                         __ptext54 104A                         __ptext46 1656  
                       __ptext38 133E                         __ptext71 0F72                         __ptext63 0E90  
                       __ptext55 167A                         __ptext47 0F06                         __ptext39 1672  
                       __ptext80 146C                         __ptext72 0FDE                         __ptext64 127C  
                       __ptext56 0552                         __ptext48 0BE8                         __ptext81 1242  
                       __ptext73 16B6                         __ptext65 168A                         __ptext57 1550  
                       __ptext49 0D20                         __ptext74 11AE                         __ptext66 1660  
                       __ptext58 16AA                         __ptext83 158A                         __ptext75 1564  
                       __ptext67 150C                         __ptext59 1682                         __ptext76 0A30  
                       __ptext68 11FC                         __ptext77 1108                         __ptext69 1312  
                       __ptext78 153A                         __ptext79 144E              __end_of_SIO_GetChar 16C4  
                  ??_TI_NewTimer 005D                   CantaPartAlta@c 005D            _state@TAD_MICRO$F1460 001A  
                  ??_TI_Wait40ms 0069                         _escombra 14F4                    BUZZ_Play@note 005D  
                       _indexAux 0019                         _lastMove 002F                         _exitMenu 1642  
            ?_EscriuPrimeraOrdre 005C            __end_of_CantaPartAlta 104A                    CantaData@Data 005E  
            __end_of_SIO_PutChar 167A                     _timeAuxIndex 001E                         _numChars 0031  
                       _timerPWM 0058                         isa$xinst 0000                         _showTime 001C  
                       _timerSms 005B                         _portName 004C             __end_of_TI_ResetTics 146C  
                       int$flags 0077                       _LCD_GotoXY 0E90                      ??_configADC 005C  
                     _KPAD_NOTES 1ED1                  _LCD_IsAvailable 168A             ??_EscriuPrimeraOrdre 005C  
                     _MICRO_Init 160C                       _KPAD_Motor 01F8                       _INTCONbits 0FF2  
          __end_of_MRCD_OptionUp 13B8                      _JOY_GetMove 1578                      _JOY_Disable 16C8  
      TI_GetTics@CopiaTicsActual 0064                       _MENU_Motor 0018                ??_LCD_PreviewChar 0071  
                   _PORT_GetName 16D0                         intlevel2 0000                       _BUZZ_Motor 0A30  
              ??_BUZZ_PlayMelody 005E             _state@TAD_MENU$F1311 0021                       _MRCD_Motor 03BE  
                 JOY_GetMove@aux 005C              __end_of_TI_NewTimer 126C                      _sentSamples 0009  
                   _PORT_Mostrar 16CC                    _previousValue 003C              __end_of_TI_Wait40ms 1390  
            _MICRO_ListenAndSend 133E   _state@TAD_MENURECORDINGS$F1579 0015                       _SAVE_Motor 0944  
                     _JOY_Enable 16B0                      _timerByeBye 0054                      _SIO_GetChar 16C0  
                    _timerMelody 0056                      _timerRebots 005A             ?_MICRO_ListenAndSend 005C  
                    _SIO_PutChar 1672                    PORT_Motor@aux 0074                       _PORT_Motor 0828  
                 _LCD_GotoXY$784 006D                    MRCD_Motor@aux 0076          __end_of_LCD_IsAvailable 1692  
